// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using VegaRenderService;
//
//    var vegaLiteSpec = VegaLiteSpec.FromJson(jsonString);

namespace VegaRenderService
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class VegaLiteSpec
    {
        [JsonProperty("$ref", NullValueHandling = NullValueHandling.Ignore)]
        public string Ref { get; set; }

        [JsonProperty("$schema", NullValueHandling = NullValueHandling.Ignore)]
        public Uri Schema { get; set; }

        [JsonProperty("definitions", NullValueHandling = NullValueHandling.Ignore)]
        public Definitions Definitions { get; set; }
    }

    public partial class Definitions
    {
        [JsonProperty("Aggregate", NullValueHandling = NullValueHandling.Ignore)]
        public AggregateClass Aggregate { get; set; }

        [JsonProperty("AggregateOp", NullValueHandling = NullValueHandling.Ignore)]
        public AggregateOp AggregateOp { get; set; }

        [JsonProperty("AggregateTransform", NullValueHandling = NullValueHandling.Ignore)]
        public AggregateTransform AggregateTransform { get; set; }

        [JsonProperty("AggregatedFieldDef", NullValueHandling = NullValueHandling.Ignore)]
        public FieldDef AggregatedFieldDef { get; set; }

        [JsonProperty("Align", NullValueHandling = NullValueHandling.Ignore)]
        public AggregateOp Align { get; set; }

        [JsonProperty("AllSortString", NullValueHandling = NullValueHandling.Ignore)]
        public AggregateClass AllSortString { get; set; }

        [JsonProperty("AnyMark", NullValueHandling = NullValueHandling.Ignore)]
        public AggregateClass AnyMark { get; set; }

        [JsonProperty("AnyMarkConfig", NullValueHandling = NullValueHandling.Ignore)]
        public AggregateClass AnyMarkConfig { get; set; }

        [JsonProperty("AreaConfig", NullValueHandling = NullValueHandling.Ignore)]
        public AreaConfig AreaConfig { get; set; }

        [JsonProperty("ArgmaxDef", NullValueHandling = NullValueHandling.Ignore)]
        public ArgmaxDef ArgmaxDef { get; set; }

        [JsonProperty("ArgminDef", NullValueHandling = NullValueHandling.Ignore)]
        public ArgminDef ArgminDef { get; set; }

        [JsonProperty("AutoSizeParams", NullValueHandling = NullValueHandling.Ignore)]
        public AutoSizeParams AutoSizeParams { get; set; }

        [JsonProperty("AutosizeType", NullValueHandling = NullValueHandling.Ignore)]
        public AggregateOp AutosizeType { get; set; }

        [JsonProperty("Axis", NullValueHandling = NullValueHandling.Ignore)]
        public Axis Axis { get; set; }

        [JsonProperty("AxisConfig", NullValueHandling = NullValueHandling.Ignore)]
        public Axis AxisConfig { get; set; }

        [JsonProperty("AxisOrient", NullValueHandling = NullValueHandling.Ignore)]
        public AggregateOp AxisOrient { get; set; }

        [JsonProperty("AxisResolveMap", NullValueHandling = NullValueHandling.Ignore)]
        public AxisResolveMap AxisResolveMap { get; set; }

        [JsonProperty("BarConfig", NullValueHandling = NullValueHandling.Ignore)]
        public AreaConfig BarConfig { get; set; }

        [JsonProperty("BaseTitleNoValueRefs", NullValueHandling = NullValueHandling.Ignore)]
        public BaseTitleNoValueRefs BaseTitleNoValueRefs { get; set; }

        [JsonProperty("Baseline", NullValueHandling = NullValueHandling.Ignore)]
        public AggregateOp Baseline { get; set; }

        [JsonProperty("BinExtent", NullValueHandling = NullValueHandling.Ignore)]
        public BinExtent BinExtent { get; set; }

        [JsonProperty("BinParams", NullValueHandling = NullValueHandling.Ignore)]
        public BinParams BinParams { get; set; }

        [JsonProperty("BinTransform", NullValueHandling = NullValueHandling.Ignore)]
        public BinTransform BinTransform { get; set; }

        [JsonProperty("BindCheckbox", NullValueHandling = NullValueHandling.Ignore)]
        public BindCheckbox BindCheckbox { get; set; }

        [JsonProperty("BindRadioSelect", NullValueHandling = NullValueHandling.Ignore)]
        public BindRadioSelect BindRadioSelect { get; set; }

        [JsonProperty("BindRange", NullValueHandling = NullValueHandling.Ignore)]
        public BindRange BindRange { get; set; }

        [JsonProperty("Binding", NullValueHandling = NullValueHandling.Ignore)]
        public AggregateClass Binding { get; set; }

        [JsonProperty("Blend", NullValueHandling = NullValueHandling.Ignore)]
        public TitleAnchorClass Blend { get; set; }

        [JsonProperty("BoxPlot", NullValueHandling = NullValueHandling.Ignore)]
        public BoxPlot BoxPlot { get; set; }

        [JsonProperty("BoxPlotConfig", NullValueHandling = NullValueHandling.Ignore)]
        public BoxPlotConfig BoxPlotConfig { get; set; }

        [JsonProperty("BoxPlotDef", NullValueHandling = NullValueHandling.Ignore)]
        public BoxPlotDef BoxPlotDef { get; set; }

        [JsonProperty("BrushConfig", NullValueHandling = NullValueHandling.Ignore)]
        public BrushConfig BrushConfig { get; set; }

        [JsonProperty("CalculateTransform", NullValueHandling = NullValueHandling.Ignore)]
        public CalculateTransform CalculateTransform { get; set; }

        [JsonProperty("Categorical", NullValueHandling = NullValueHandling.Ignore)]
        public AggregateOp Categorical { get; set; }

        [JsonProperty("Color", NullValueHandling = NullValueHandling.Ignore)]
        public Color Color { get; set; }

        [JsonProperty("ColorDef", NullValueHandling = NullValueHandling.Ignore)]
        public ColorDef ColorDef { get; set; }

        [JsonProperty("ColorName", NullValueHandling = NullValueHandling.Ignore)]
        public AggregateOp ColorName { get; set; }

        [JsonProperty("ColorScheme", NullValueHandling = NullValueHandling.Ignore)]
        public AggregateClass ColorScheme { get; set; }

        [JsonProperty("Encoding", NullValueHandling = NullValueHandling.Ignore)]
        public Encoding Encoding { get; set; }

        [JsonProperty("CompositeMark", NullValueHandling = NullValueHandling.Ignore)]
        public AggregateClass CompositeMark { get; set; }

        [JsonProperty("CompositeMarkDef", NullValueHandling = NullValueHandling.Ignore)]
        public AggregateClass CompositeMarkDef { get; set; }

        [JsonProperty("CompositionConfig", NullValueHandling = NullValueHandling.Ignore)]
        public CompositionConfig CompositionConfig { get; set; }

        [JsonProperty("ConditionalMarkPropFieldOrDatumDef", NullValueHandling = NullValueHandling.Ignore)]
        public AggregateClass ConditionalMarkPropFieldOrDatumDef { get; set; }

        [JsonProperty("ConditionalMarkPropFieldOrDatumDef<TypeForShape>", NullValueHandling = NullValueHandling.Ignore)]
        public AggregateClass ConditionalMarkPropFieldOrDatumDefTypeForShape { get; set; }

        [JsonProperty("ConditionalStringFieldDef", NullValueHandling = NullValueHandling.Ignore)]
        public AggregateClass ConditionalStringFieldDef { get; set; }

        [JsonProperty("ConditionalValueDef<(Gradient|string|null|ExprRef)>", NullValueHandling = NullValueHandling.Ignore)]
        public AggregateClass ConditionalValueDefGradientStringNullExprRef { get; set; }

        [JsonProperty("ConditionalValueDef<(Text|ExprRef)>", NullValueHandling = NullValueHandling.Ignore)]
        public AggregateClass ConditionalValueDefTextExprRef { get; set; }

        [JsonProperty("ConditionalValueDef<(number[]|ExprRef)>", NullValueHandling = NullValueHandling.Ignore)]
        public AggregateClass ConditionalValueDefNumberExprRef { get; set; }

        [JsonProperty("ConditionalValueDef<(number|ExprRef)>", NullValueHandling = NullValueHandling.Ignore)]
        public AggregateClass DefinitionsConditionalValueDefNumberExprRef { get; set; }

        [JsonProperty("ConditionalValueDef<(string|ExprRef)>", NullValueHandling = NullValueHandling.Ignore)]
        public AggregateClass ConditionalValueDefStringExprRef { get; set; }

        [JsonProperty("ConditionalValueDef<(string|null|ExprRef)>", NullValueHandling = NullValueHandling.Ignore)]
        public AggregateClass ConditionalValueDefStringNullExprRef { get; set; }

        [JsonProperty("ConditionalValueDef<number>", NullValueHandling = NullValueHandling.Ignore)]
        public AggregateClass ConditionalValueDefNumber { get; set; }

        [JsonProperty("ConditionalAxisColor", NullValueHandling = NullValueHandling.Ignore)]
        public ColorDef ConditionalAxisColor { get; set; }

        [JsonProperty("ConditionalAxisLabelAlign", NullValueHandling = NullValueHandling.Ignore)]
        public ColorDef ConditionalAxisLabelAlign { get; set; }

        [JsonProperty("ConditionalAxisLabelBaseline", NullValueHandling = NullValueHandling.Ignore)]
        public ColorDef ConditionalAxisLabelBaseline { get; set; }

        [JsonProperty("ConditionalAxisLabelFontStyle", NullValueHandling = NullValueHandling.Ignore)]
        public ColorDef ConditionalAxisLabelFontStyle { get; set; }

        [JsonProperty("ConditionalAxisLabelFontWeight", NullValueHandling = NullValueHandling.Ignore)]
        public ColorDef ConditionalAxisLabelFontWeight { get; set; }

        [JsonProperty("ConditionalAxisNumber", NullValueHandling = NullValueHandling.Ignore)]
        public ColorDef ConditionalAxisNumber { get; set; }

        [JsonProperty("ConditionalAxisNumberArray", NullValueHandling = NullValueHandling.Ignore)]
        public ColorDef ConditionalAxisNumberArray { get; set; }

        [JsonProperty("ConditionalAxisProperty<(Align|null)>", NullValueHandling = NullValueHandling.Ignore)]
        public ConditionalAxisPropertyAlignNullClass ConditionalAxisPropertyAlignNull { get; set; }

        [JsonProperty("ConditionalAxisProperty<(Color|null)>", NullValueHandling = NullValueHandling.Ignore)]
        public ConditionalAxisPropertyAlignNullClass ConditionalAxisPropertyColorNull { get; set; }

        [JsonProperty("ConditionalAxisProperty<(FontStyle|null)>", NullValueHandling = NullValueHandling.Ignore)]
        public ConditionalAxisPropertyAlignNullClass ConditionalAxisPropertyFontStyleNull { get; set; }

        [JsonProperty("ConditionalAxisProperty<(FontWeight|null)>", NullValueHandling = NullValueHandling.Ignore)]
        public ConditionalAxisPropertyAlignNullClass ConditionalAxisPropertyFontWeightNull { get; set; }

        [JsonProperty("ConditionalAxisProperty<(TextBaseline|null)>", NullValueHandling = NullValueHandling.Ignore)]
        public ConditionalAxisPropertyAlignNullClass ConditionalAxisPropertyTextBaselineNull { get; set; }

        [JsonProperty("ConditionalAxisProperty<(number[]|null)>", NullValueHandling = NullValueHandling.Ignore)]
        public ConditionalAxisPropertyNumberNull ConditionalAxisPropertyNumberNull { get; set; }

        [JsonProperty("ConditionalAxisProperty<(number|null)>", NullValueHandling = NullValueHandling.Ignore)]
        public ConditionalAxisPropertyNumberNullClass DefinitionsConditionalAxisPropertyNumberNull { get; set; }

        [JsonProperty("ConditionalAxisProperty<(string|null)>", NullValueHandling = NullValueHandling.Ignore)]
        public ConditionalAxisPropertyNumberNullClass ConditionalAxisPropertyStringNull { get; set; }

        [JsonProperty("ConditionalAxisString", NullValueHandling = NullValueHandling.Ignore)]
        public ColorDef ConditionalAxisString { get; set; }

        [JsonProperty("ConditionalPredicate<(ValueDef<(Align|null)>|ExprRef)>", NullValueHandling = NullValueHandling.Ignore)]
        public ConditionalPredicateValueDefAlignNullExprRefClass ConditionalPredicateValueDefAlignNullExprRef { get; set; }

        [JsonProperty("ConditionalPredicate<(ValueDef<(Color|null)>|ExprRef)>", NullValueHandling = NullValueHandling.Ignore)]
        public ConditionalPredicateValueDefAlignNullExprRefClass ConditionalPredicateValueDefColorNullExprRef { get; set; }

        [JsonProperty("ConditionalPredicate<(ValueDef<(FontStyle|null)>|ExprRef)>", NullValueHandling = NullValueHandling.Ignore)]
        public ConditionalPredicateValueDefAlignNullExprRefClass ConditionalPredicateValueDefFontStyleNullExprRef { get; set; }

        [JsonProperty("ConditionalPredicate<(ValueDef<(FontWeight|null)>|ExprRef)>", NullValueHandling = NullValueHandling.Ignore)]
        public ConditionalPredicateValueDefAlignNullExprRefClass ConditionalPredicateValueDefFontWeightNullExprRef { get; set; }

        [JsonProperty("ConditionalPredicate<(ValueDef<(TextBaseline|null)>|ExprRef)>", NullValueHandling = NullValueHandling.Ignore)]
        public ConditionalPredicateValueDefAlignNullExprRefClass ConditionalPredicateValueDefTextBaselineNullExprRef { get; set; }

        [JsonProperty("ConditionalPredicate<(ValueDef<(number[]|null)>|ExprRef)>", NullValueHandling = NullValueHandling.Ignore)]
        public ConditionalPredicateValueDefNumberNullExprRef ConditionalPredicateValueDefNumberNullExprRef { get; set; }

        [JsonProperty("ConditionalPredicate<(ValueDef<(number|null)>|ExprRef)>", NullValueHandling = NullValueHandling.Ignore)]
        public ConditionalPredicateValueDefNumberNullExprRefClass DefinitionsConditionalPredicateValueDefNumberNullExprRef { get; set; }

        [JsonProperty("ConditionalPredicate<(ValueDef<(string|null)>|ExprRef)>", NullValueHandling = NullValueHandling.Ignore)]
        public ConditionalPredicateValueDefNumberNullExprRefClass ConditionalPredicateValueDefStringNullExprRef { get; set; }

        [JsonProperty("ConditionalPredicate<MarkPropFieldOrDatumDef>", NullValueHandling = NullValueHandling.Ignore)]
        public Conditional ConditionalPredicateMarkPropFieldOrDatumDef { get; set; }

        [JsonProperty("ConditionalPredicate<MarkPropFieldOrDatumDef<TypeForShape>>", NullValueHandling = NullValueHandling.Ignore)]
        public Conditional ConditionalPredicateMarkPropFieldOrDatumDefTypeForShape { get; set; }

        [JsonProperty("ConditionalPredicate<StringFieldDef>", NullValueHandling = NullValueHandling.Ignore)]
        public ConditionalStringFieldDef ConditionalPredicateStringFieldDef { get; set; }

        [JsonProperty("ConditionalPredicate<ValueDef<(Gradient|string|null|ExprRef)>>", NullValueHandling = NullValueHandling.Ignore)]
        public ConditionalPredicateValueDefExprRef ConditionalPredicateValueDefGradientStringNullExprRef { get; set; }

        [JsonProperty("ConditionalPredicate<ValueDef<(Text|ExprRef)>>", NullValueHandling = NullValueHandling.Ignore)]
        public ConditionalPredicateValueDefTextExprRef ConditionalPredicateValueDefTextExprRef { get; set; }

        [JsonProperty("ConditionalPredicate<ValueDef<(number[]|ExprRef)>>", NullValueHandling = NullValueHandling.Ignore)]
        public ConditionalPredicateValueDefNumberExprRef ConditionalPredicateValueDefNumberExprRef { get; set; }

        [JsonProperty("ConditionalPredicate<ValueDef<(number|ExprRef)>>", NullValueHandling = NullValueHandling.Ignore)]
        public ConditionalPredicateValueDefExprRef DefinitionsConditionalPredicateValueDefNumberExprRef { get; set; }

        [JsonProperty("ConditionalPredicate<ValueDef<(string|ExprRef)>>", NullValueHandling = NullValueHandling.Ignore)]
        public ConditionalPredicateValueDefExprRef ConditionalPredicateValueDefStringExprRef { get; set; }

        [JsonProperty("ConditionalPredicate<ValueDef<(string|null|ExprRef)>>", NullValueHandling = NullValueHandling.Ignore)]
        public ConditionalPredicateValueDefExprRef DefinitionsConditionalPredicateValueDefStringNullExprRef { get; set; }

        [JsonProperty("ConditionalPredicate<ValueDef<number>>", NullValueHandling = NullValueHandling.Ignore)]
        public ConditionalPredicateValueDefNumber ConditionalPredicateValueDefNumber { get; set; }

        [JsonProperty("ConditionalSelection<MarkPropFieldOrDatumDef>", NullValueHandling = NullValueHandling.Ignore)]
        public Conditional ConditionalSelectionMarkPropFieldOrDatumDef { get; set; }

        [JsonProperty("ConditionalSelection<MarkPropFieldOrDatumDef<TypeForShape>>", NullValueHandling = NullValueHandling.Ignore)]
        public Conditional ConditionalSelectionMarkPropFieldOrDatumDefTypeForShape { get; set; }

        [JsonProperty("ConditionalSelection<StringFieldDef>", NullValueHandling = NullValueHandling.Ignore)]
        public ConditionalStringFieldDef ConditionalSelectionStringFieldDef { get; set; }

        [JsonProperty("ConditionalSelection<ValueDef<(Gradient|string|null|ExprRef)>>", NullValueHandling = NullValueHandling.Ignore)]
        public ConditionalSelectionValueDefExprRef ConditionalSelectionValueDefGradientStringNullExprRef { get; set; }

        [JsonProperty("ConditionalSelection<ValueDef<(Text|ExprRef)>>", NullValueHandling = NullValueHandling.Ignore)]
        public ConditionalSelectionValueDefTextExprRef ConditionalSelectionValueDefTextExprRef { get; set; }

        [JsonProperty("ConditionalSelection<ValueDef<(number[]|ExprRef)>>", NullValueHandling = NullValueHandling.Ignore)]
        public ConditionalSelectionValueDefNumberExprRef ConditionalSelectionValueDefNumberExprRef { get; set; }

        [JsonProperty("ConditionalSelection<ValueDef<(number|ExprRef)>>", NullValueHandling = NullValueHandling.Ignore)]
        public ConditionalSelectionValueDefExprRef DefinitionsConditionalSelectionValueDefNumberExprRef { get; set; }

        [JsonProperty("ConditionalSelection<ValueDef<(string|ExprRef)>>", NullValueHandling = NullValueHandling.Ignore)]
        public ConditionalSelectionValueDefExprRef ConditionalSelectionValueDefStringExprRef { get; set; }

        [JsonProperty("ConditionalSelection<ValueDef<(string|null|ExprRef)>>", NullValueHandling = NullValueHandling.Ignore)]
        public ConditionalSelectionValueDefExprRef ConditionalSelectionValueDefStringNullExprRef { get; set; }

        [JsonProperty("ConditionalSelection<ValueDef<number>>", NullValueHandling = NullValueHandling.Ignore)]
        public ConditionalSelectionValueDefNumber ConditionalSelectionValueDefNumber { get; set; }

        [JsonProperty("Config", NullValueHandling = NullValueHandling.Ignore)]
        public Config Config { get; set; }

        [JsonProperty("CsvDataFormat", NullValueHandling = NullValueHandling.Ignore)]
        public CsvDataFormat CsvDataFormat { get; set; }

        [JsonProperty("Cursor", NullValueHandling = NullValueHandling.Ignore)]
        public AggregateOp Cursor { get; set; }

        [JsonProperty("Cyclical", NullValueHandling = NullValueHandling.Ignore)]
        public AggregateOp Cyclical { get; set; }

        [JsonProperty("Data", NullValueHandling = NullValueHandling.Ignore)]
        public AggregateClass Data { get; set; }

        [JsonProperty("DataFormat", NullValueHandling = NullValueHandling.Ignore)]
        public AggregateClass DataFormat { get; set; }

        [JsonProperty("DataSource", NullValueHandling = NullValueHandling.Ignore)]
        public AggregateClass DataSource { get; set; }

        [JsonProperty("Datasets", NullValueHandling = NullValueHandling.Ignore)]
        public ColorDef Datasets { get; set; }

        [JsonProperty("DateTime", NullValueHandling = NullValueHandling.Ignore)]
        public DateTime DateTime { get; set; }

        [JsonProperty("DatumDef", NullValueHandling = NullValueHandling.Ignore)]
        public DatumDef DatumDef { get; set; }

        [JsonProperty("Day", NullValueHandling = NullValueHandling.Ignore)]
        public Day Day { get; set; }

        [JsonProperty("DensityTransform", NullValueHandling = NullValueHandling.Ignore)]
        public DensityTransform DensityTransform { get; set; }

        [JsonProperty("DerivedStream", NullValueHandling = NullValueHandling.Ignore)]
        public DerivedStream DerivedStream { get; set; }

        [JsonProperty("Dict<InlineDataset>", NullValueHandling = NullValueHandling.Ignore)]
        public DictInlineDataset DictInlineDataset { get; set; }

        [JsonProperty("Dict<SelectionInit>", NullValueHandling = NullValueHandling.Ignore)]
        public DictInlineDataset DictSelectionInit { get; set; }

        [JsonProperty("Dict<SelectionInitInterval>", NullValueHandling = NullValueHandling.Ignore)]
        public DictInlineDataset DictSelectionInitInterval { get; set; }

        [JsonProperty("Dict<unknown>", NullValueHandling = NullValueHandling.Ignore)]
        public DictUnknown DictUnknown { get; set; }

        [JsonProperty("Diverging", NullValueHandling = NullValueHandling.Ignore)]
        public AggregateOp Diverging { get; set; }

        [JsonProperty("DomainUnionWith", NullValueHandling = NullValueHandling.Ignore)]
        public DomainUnionWith DomainUnionWith { get; set; }

        [JsonProperty("DsvDataFormat", NullValueHandling = NullValueHandling.Ignore)]
        public DsvDataFormat DsvDataFormat { get; set; }

        [JsonProperty("Element", NullValueHandling = NullValueHandling.Ignore)]
        public Element Element { get; set; }

        [JsonProperty("EncodingSortField", NullValueHandling = NullValueHandling.Ignore)]
        public EncodingSortField EncodingSortField { get; set; }

        [JsonProperty("EncodingSortField<FieldName>", NullValueHandling = NullValueHandling.Ignore)]
        public EncodingSortField EncodingSortFieldFieldName { get; set; }

        [JsonProperty("ErrorBand", NullValueHandling = NullValueHandling.Ignore)]
        public BoxPlot ErrorBand { get; set; }

        [JsonProperty("ErrorBandConfig", NullValueHandling = NullValueHandling.Ignore)]
        public ErrorBandConfig ErrorBandConfig { get; set; }

        [JsonProperty("ErrorBandDef", NullValueHandling = NullValueHandling.Ignore)]
        public ErrorBandDef ErrorBandDef { get; set; }

        [JsonProperty("ErrorBar", NullValueHandling = NullValueHandling.Ignore)]
        public BoxPlot ErrorBar { get; set; }

        [JsonProperty("ErrorBarConfig", NullValueHandling = NullValueHandling.Ignore)]
        public ErrorBarConfig ErrorBarConfig { get; set; }

        [JsonProperty("ErrorBarDef", NullValueHandling = NullValueHandling.Ignore)]
        public ErrorBarDef ErrorBarDef { get; set; }

        [JsonProperty("ErrorBarExtent", NullValueHandling = NullValueHandling.Ignore)]
        public AggregateOp ErrorBarExtent { get; set; }

        [JsonProperty("EventStream", NullValueHandling = NullValueHandling.Ignore)]
        public EventStream EventStream { get; set; }

        [JsonProperty("EventType", NullValueHandling = NullValueHandling.Ignore)]
        public AggregateOp EventType { get; set; }

        [JsonProperty("Expr", NullValueHandling = NullValueHandling.Ignore)]
        public Element Expr { get; set; }

        [JsonProperty("ExprOrSignalRef", NullValueHandling = NullValueHandling.Ignore)]
        public ColorDef ExprOrSignalRef { get; set; }

        [JsonProperty("ExprRef", NullValueHandling = NullValueHandling.Ignore)]
        public ExprRef ExprRef { get; set; }

        [JsonProperty("FacetEncodingFieldDef", NullValueHandling = NullValueHandling.Ignore)]
        public FacetEncodingFieldDef FacetEncodingFieldDef { get; set; }

        [JsonProperty("FacetFieldDef", NullValueHandling = NullValueHandling.Ignore)]
        public FacetFieldDef FacetFieldDef { get; set; }

        [JsonProperty("FacetFieldDef<FieldName>", NullValueHandling = NullValueHandling.Ignore)]
        public FacetFieldDef FacetFieldDefFieldName { get; set; }

        [JsonProperty("FacetMapping", NullValueHandling = NullValueHandling.Ignore)]
        public FacetMapping FacetMapping { get; set; }

        [JsonProperty("FacetMapping<FieldName>", NullValueHandling = NullValueHandling.Ignore)]
        public FacetMapping FacetMappingFieldName { get; set; }

        [JsonProperty("FacetedEncoding", NullValueHandling = NullValueHandling.Ignore)]
        public Encoding FacetedEncoding { get; set; }

        [JsonProperty("FacetedUnitSpec", NullValueHandling = NullValueHandling.Ignore)]
        public FacetedUnitSpec FacetedUnitSpec { get; set; }

        [JsonProperty("Field", NullValueHandling = NullValueHandling.Ignore)]
        public AggregateClass Field { get; set; }

        [JsonProperty("FieldDefWithoutScale", NullValueHandling = NullValueHandling.Ignore)]
        public FieldDefWithoutScale FieldDefWithoutScale { get; set; }

        [JsonProperty("FieldEqualPredicate", NullValueHandling = NullValueHandling.Ignore)]
        public FieldEqualPredicate FieldEqualPredicate { get; set; }

        [JsonProperty("FieldGTEPredicate", NullValueHandling = NullValueHandling.Ignore)]
        public FieldGtePredicate FieldGtePredicate { get; set; }

        [JsonProperty("FieldGTPredicate", NullValueHandling = NullValueHandling.Ignore)]
        public FieldGtPredicate FieldGtPredicate { get; set; }

        [JsonProperty("FieldLTEPredicate", NullValueHandling = NullValueHandling.Ignore)]
        public FieldLtePredicate FieldLtePredicate { get; set; }

        [JsonProperty("FieldLTPredicate", NullValueHandling = NullValueHandling.Ignore)]
        public FieldLtPredicate FieldLtPredicate { get; set; }

        [JsonProperty("FieldName", NullValueHandling = NullValueHandling.Ignore)]
        public Element FieldName { get; set; }

        [JsonProperty("FieldOneOfPredicate", NullValueHandling = NullValueHandling.Ignore)]
        public FieldOneOfPredicate FieldOneOfPredicate { get; set; }

        [JsonProperty("FieldOrDatumDefWithCondition<DatumDef,(Gradient|string|null)>", NullValueHandling = NullValueHandling.Ignore)]
        public FieldOrDatumDefWithConditionDatumDef FieldOrDatumDefWithConditionDatumDefGradientStringNull { get; set; }

        [JsonProperty("FieldOrDatumDefWithCondition<DatumDef,(string|null)>", NullValueHandling = NullValueHandling.Ignore)]
        public FieldOrDatumDefWithConditionDatumDef FieldOrDatumDefWithConditionDatumDefStringNull { get; set; }

        [JsonProperty("FieldOrDatumDefWithCondition<DatumDef,number>", NullValueHandling = NullValueHandling.Ignore)]
        public FieldOrDatumDefWithConditionDatumDef FieldOrDatumDefWithConditionDatumDefNumber { get; set; }

        [JsonProperty("FieldOrDatumDefWithCondition<DatumDef,number[]>", NullValueHandling = NullValueHandling.Ignore)]
        public FieldOrDatumDefWithConditionDatumDef DefinitionsFieldOrDatumDefWithConditionDatumDefNumber { get; set; }

        [JsonProperty("FieldOrDatumDefWithCondition<MarkPropFieldDef,(Gradient|string|null)>", NullValueHandling = NullValueHandling.Ignore)]
        public FieldOrDatumDefWithConditionMarkPropFieldDef FieldOrDatumDefWithConditionMarkPropFieldDefGradientStringNull { get; set; }

        [JsonProperty("FieldOrDatumDefWithCondition<MarkPropFieldDef,number>", NullValueHandling = NullValueHandling.Ignore)]
        public FieldOrDatumDefWithConditionMarkPropFieldDef FieldOrDatumDefWithConditionMarkPropFieldDefNumber { get; set; }

        [JsonProperty("FieldOrDatumDefWithCondition<MarkPropFieldDef,number[]>", NullValueHandling = NullValueHandling.Ignore)]
        public FieldOrDatumDefWithConditionMarkPropFieldDef DefinitionsFieldOrDatumDefWithConditionMarkPropFieldDefNumber { get; set; }

        [JsonProperty("FieldOrDatumDefWithCondition<MarkPropFieldDef<TypeForShape>,(string|null)>", NullValueHandling = NullValueHandling.Ignore)]
        public FieldOrDatumDefWithConditionMarkPropFieldDef FieldOrDatumDefWithConditionMarkPropFieldDefTypeForShapeStringNull { get; set; }

        [JsonProperty("FieldOrDatumDefWithCondition<StringDatumDef,Text>", NullValueHandling = NullValueHandling.Ignore)]
        public FieldOrDatumDefWithConditionStringDatumDefText FieldOrDatumDefWithConditionStringDatumDefText { get; set; }

        [JsonProperty("FieldOrDatumDefWithCondition<StringFieldDef,Text>", NullValueHandling = NullValueHandling.Ignore)]
        public FieldOrDatumDefWithConditionStringFieldDef FieldOrDatumDefWithConditionStringFieldDefText { get; set; }

        [JsonProperty("FieldOrDatumDefWithCondition<StringFieldDef,string>", NullValueHandling = NullValueHandling.Ignore)]
        public FieldOrDatumDefWithConditionStringFieldDef FieldOrDatumDefWithConditionStringFieldDefString { get; set; }

        [JsonProperty("FieldRangePredicate", NullValueHandling = NullValueHandling.Ignore)]
        public FieldRangePredicate FieldRangePredicate { get; set; }

        [JsonProperty("FieldValidPredicate", NullValueHandling = NullValueHandling.Ignore)]
        public FieldValidPredicate FieldValidPredicate { get; set; }

        [JsonProperty("FilterTransform", NullValueHandling = NullValueHandling.Ignore)]
        public FilterTransform FilterTransform { get; set; }

        [JsonProperty("Fit", NullValueHandling = NullValueHandling.Ignore)]
        public Fit Fit { get; set; }

        [JsonProperty("FlattenTransform", NullValueHandling = NullValueHandling.Ignore)]
        public FlattenTransform FlattenTransform { get; set; }

        [JsonProperty("FoldTransform", NullValueHandling = NullValueHandling.Ignore)]
        public FoldTransform FoldTransform { get; set; }

        [JsonProperty("FontStyle", NullValueHandling = NullValueHandling.Ignore)]
        public Element FontStyle { get; set; }

        [JsonProperty("FontWeight", NullValueHandling = NullValueHandling.Ignore)]
        public FontWeight FontWeight { get; set; }

        [JsonProperty("Generator", NullValueHandling = NullValueHandling.Ignore)]
        public AggregateClass Generator { get; set; }

        [JsonProperty("NormalizedConcatSpec<GenericSpec>", NullValueHandling = NullValueHandling.Ignore)]
        public Spec NormalizedConcatSpecGenericSpec { get; set; }

        [JsonProperty("ConcatSpec<GenericSpec>", NullValueHandling = NullValueHandling.Ignore)]
        public Spec ConcatSpecGenericSpec { get; set; }

        [JsonProperty("NormalizedFacetSpec", NullValueHandling = NullValueHandling.Ignore)]
        public Spec NormalizedFacetSpec { get; set; }

        [JsonProperty("FacetSpec", NullValueHandling = NullValueHandling.Ignore)]
        public Spec FacetSpec { get; set; }

        [JsonProperty("NormalizedHConcatSpec<GenericSpec>", NullValueHandling = NullValueHandling.Ignore)]
        public ConcatSpecGenericSpec NormalizedHConcatSpecGenericSpec { get; set; }

        [JsonProperty("HConcatSpec<GenericSpec>", NullValueHandling = NullValueHandling.Ignore)]
        public ConcatSpecGenericSpec HConcatSpecGenericSpec { get; set; }

        [JsonProperty("NormalizedSpec", NullValueHandling = NullValueHandling.Ignore)]
        public NormalizedSpec NormalizedSpec { get; set; }

        [JsonProperty("Spec", NullValueHandling = NullValueHandling.Ignore)]
        public NormalizedSpec Spec { get; set; }

        [JsonProperty("NormalizedVConcatSpec<GenericSpec>", NullValueHandling = NullValueHandling.Ignore)]
        public ConcatSpecGenericSpec NormalizedVConcatSpecGenericSpec { get; set; }

        [JsonProperty("VConcatSpec<GenericSpec>", NullValueHandling = NullValueHandling.Ignore)]
        public ConcatSpecGenericSpec VConcatSpecGenericSpec { get; set; }

        [JsonProperty("GeoJsonFeature", NullValueHandling = NullValueHandling.Ignore)]
        public GeoJsonFeature GeoJsonFeature { get; set; }

        [JsonProperty("GeoJsonFeatureCollection", NullValueHandling = NullValueHandling.Ignore)]
        public GeoJsonFeature GeoJsonFeatureCollection { get; set; }

        [JsonProperty("Gradient", NullValueHandling = NullValueHandling.Ignore)]
        public AggregateClass Gradient { get; set; }

        [JsonProperty("GradientStop", NullValueHandling = NullValueHandling.Ignore)]
        public GradientStop GradientStop { get; set; }

        [JsonProperty("GraticuleGenerator", NullValueHandling = NullValueHandling.Ignore)]
        public GraticuleGenerator GraticuleGenerator { get; set; }

        [JsonProperty("GraticuleParams", NullValueHandling = NullValueHandling.Ignore)]
        public GraticuleParams GraticuleParams { get; set; }

        [JsonProperty("Header", NullValueHandling = NullValueHandling.Ignore)]
        public Header Header { get; set; }

        [JsonProperty("HeaderConfig", NullValueHandling = NullValueHandling.Ignore)]
        public HeaderConfig HeaderConfig { get; set; }

        [JsonProperty("HexColor", NullValueHandling = NullValueHandling.Ignore)]
        public HexColor HexColor { get; set; }

        [JsonProperty("ImputeMethod", NullValueHandling = NullValueHandling.Ignore)]
        public AggregateOp ImputeMethod { get; set; }

        [JsonProperty("ImputeParams", NullValueHandling = NullValueHandling.Ignore)]
        public ImputeParams ImputeParams { get; set; }

        [JsonProperty("ImputeSequence", NullValueHandling = NullValueHandling.Ignore)]
        public ImputeSequence ImputeSequence { get; set; }

        [JsonProperty("ImputeTransform", NullValueHandling = NullValueHandling.Ignore)]
        public ImputeTransform ImputeTransform { get; set; }

        [JsonProperty("InlineData", NullValueHandling = NullValueHandling.Ignore)]
        public InlineData InlineData { get; set; }

        [JsonProperty("InlineDataset", NullValueHandling = NullValueHandling.Ignore)]
        public InlineDataset InlineDataset { get; set; }

        [JsonProperty("InputBinding", NullValueHandling = NullValueHandling.Ignore)]
        public InputBinding InputBinding { get; set; }

        [JsonProperty("Interpolate", NullValueHandling = NullValueHandling.Ignore)]
        public Interpolate Interpolate { get; set; }

        [JsonProperty("IntervalSelection", NullValueHandling = NullValueHandling.Ignore)]
        public IntervalSelection IntervalSelection { get; set; }

        [JsonProperty("IntervalSelectionConfig", NullValueHandling = NullValueHandling.Ignore)]
        public IntervalSelectionConfig IntervalSelectionConfig { get; set; }

        [JsonProperty("JoinAggregateFieldDef", NullValueHandling = NullValueHandling.Ignore)]
        public FieldDef JoinAggregateFieldDef { get; set; }

        [JsonProperty("JoinAggregateTransform", NullValueHandling = NullValueHandling.Ignore)]
        public JoinAggregateTransform JoinAggregateTransform { get; set; }

        [JsonProperty("JsonDataFormat", NullValueHandling = NullValueHandling.Ignore)]
        public JsonDataFormat JsonDataFormat { get; set; }

        [JsonProperty("LabelOverlap", NullValueHandling = NullValueHandling.Ignore)]
        public LabelOverlap LabelOverlap { get; set; }

        [JsonProperty("LatLongDef", NullValueHandling = NullValueHandling.Ignore)]
        public AggregateClass LatLongDef { get; set; }

        [JsonProperty("LatLongFieldDef", NullValueHandling = NullValueHandling.Ignore)]
        public LatLongFieldDef LatLongFieldDef { get; set; }

        [JsonProperty("LayerRepeatMapping", NullValueHandling = NullValueHandling.Ignore)]
        public LayerRepeatMapping LayerRepeatMapping { get; set; }

        [JsonProperty("LayerRepeatSpec", NullValueHandling = NullValueHandling.Ignore)]
        public LayerRepeatSpec LayerRepeatSpec { get; set; }

        [JsonProperty("LayerSpec", NullValueHandling = NullValueHandling.Ignore)]
        public LayerSpec LayerSpec { get; set; }

        [JsonProperty("LayoutAlign", NullValueHandling = NullValueHandling.Ignore)]
        public AggregateOp LayoutAlign { get; set; }

        [JsonProperty("Legend", NullValueHandling = NullValueHandling.Ignore)]
        public Legend Legend { get; set; }

        [JsonProperty("LegendBinding", NullValueHandling = NullValueHandling.Ignore)]
        public LegendBinding LegendBinding { get; set; }

        [JsonProperty("LegendConfig", NullValueHandling = NullValueHandling.Ignore)]
        public LegendConfig LegendConfig { get; set; }

        [JsonProperty("LegendOrient", NullValueHandling = NullValueHandling.Ignore)]
        public AggregateOp LegendOrient { get; set; }

        [JsonProperty("LegendResolveMap", NullValueHandling = NullValueHandling.Ignore)]
        public ResolveMap LegendResolveMap { get; set; }

        [JsonProperty("LegendStreamBinding", NullValueHandling = NullValueHandling.Ignore)]
        public LegendStreamBinding LegendStreamBinding { get; set; }

        [JsonProperty("LineConfig", NullValueHandling = NullValueHandling.Ignore)]
        public AreaConfig LineConfig { get; set; }

        [JsonProperty("LinearGradient", NullValueHandling = NullValueHandling.Ignore)]
        public Gradient LinearGradient { get; set; }

        [JsonProperty("LocalMultiTimeUnit", NullValueHandling = NullValueHandling.Ignore)]
        public AggregateOp LocalMultiTimeUnit { get; set; }

        [JsonProperty("LocalSingleTimeUnit", NullValueHandling = NullValueHandling.Ignore)]
        public AggregateOp LocalSingleTimeUnit { get; set; }

        [JsonProperty("LoessTransform", NullValueHandling = NullValueHandling.Ignore)]
        public LoessTransform LoessTransform { get; set; }

        [JsonProperty("LogicalAnd<Predicate>", NullValueHandling = NullValueHandling.Ignore)]
        public LogicalAndPredicate LogicalAndPredicate { get; set; }

        [JsonProperty("SelectionAnd", NullValueHandling = NullValueHandling.Ignore)]
        public LogicalAndPredicate SelectionAnd { get; set; }

        [JsonProperty("PredicateComposition", NullValueHandling = NullValueHandling.Ignore)]
        public AggregateClass PredicateComposition { get; set; }

        [JsonProperty("SelectionComposition", NullValueHandling = NullValueHandling.Ignore)]
        public Color SelectionComposition { get; set; }

        [JsonProperty("LogicalNot<Predicate>", NullValueHandling = NullValueHandling.Ignore)]
        public LogicalNotPredicate LogicalNotPredicate { get; set; }

        [JsonProperty("SelectionNot", NullValueHandling = NullValueHandling.Ignore)]
        public LogicalNotPredicate SelectionNot { get; set; }

        [JsonProperty("LogicalOr<Predicate>", NullValueHandling = NullValueHandling.Ignore)]
        public LogicalOrPredicate LogicalOrPredicate { get; set; }

        [JsonProperty("SelectionOr", NullValueHandling = NullValueHandling.Ignore)]
        public LogicalOrPredicate SelectionOr { get; set; }

        [JsonProperty("LookupData", NullValueHandling = NullValueHandling.Ignore)]
        public LookupData LookupData { get; set; }

        [JsonProperty("LookupSelection", NullValueHandling = NullValueHandling.Ignore)]
        public LookupSelection LookupSelection { get; set; }

        [JsonProperty("LookupTransform", NullValueHandling = NullValueHandling.Ignore)]
        public LookupTransform LookupTransform { get; set; }

        [JsonProperty("Mark", NullValueHandling = NullValueHandling.Ignore)]
        public Mark Mark { get; set; }

        [JsonProperty("MarkConfig<>", NullValueHandling = NullValueHandling.Ignore)]
        public MarkConfig DefinitionsMarkConfig { get; set; }

        [JsonProperty("MarkConfig<ExprOrSignalRef>", NullValueHandling = NullValueHandling.Ignore)]
        public AreaConfig MarkConfigExprOrSignalRef { get; set; }

        [JsonProperty("MarkConfig", NullValueHandling = NullValueHandling.Ignore)]
        public AreaConfig MarkConfig { get; set; }

        [JsonProperty("MarkDef", NullValueHandling = NullValueHandling.Ignore)]
        public MarkDef MarkDef { get; set; }

        [JsonProperty("MarkPropDef<(Gradient|string|null)>", NullValueHandling = NullValueHandling.Ignore)]
        public AggregateClass MarkPropDefGradientStringNull { get; set; }

        [JsonProperty("MarkPropDef<(string|null),TypeForShape>", NullValueHandling = NullValueHandling.Ignore)]
        public AggregateClass MarkPropDefStringNullTypeForShape { get; set; }

        [JsonProperty("MarkPropDef<number>", NullValueHandling = NullValueHandling.Ignore)]
        public AggregateClass MarkPropDefNumber { get; set; }

        [JsonProperty("MarkPropDef<number[]>", NullValueHandling = NullValueHandling.Ignore)]
        public AggregateClass DefinitionsMarkPropDefNumber { get; set; }

        [JsonProperty("MarkType", NullValueHandling = NullValueHandling.Ignore)]
        public AggregateOp MarkType { get; set; }

        [JsonProperty("MergedStream", NullValueHandling = NullValueHandling.Ignore)]
        public DerivedStream MergedStream { get; set; }

        [JsonProperty("Month", NullValueHandling = NullValueHandling.Ignore)]
        public Month Month { get; set; }

        [JsonProperty("MultiSelection", NullValueHandling = NullValueHandling.Ignore)]
        public MultiSelection MultiSelection { get; set; }

        [JsonProperty("MultiSelectionConfig", NullValueHandling = NullValueHandling.Ignore)]
        public MultiSelectionConfig MultiSelectionConfig { get; set; }

        [JsonProperty("MultiTimeUnit", NullValueHandling = NullValueHandling.Ignore)]
        public AggregateClass MultiTimeUnit { get; set; }

        [JsonProperty("NamedData", NullValueHandling = NullValueHandling.Ignore)]
        public NamedData NamedData { get; set; }

        [JsonProperty("NonArgAggregateOp", NullValueHandling = NullValueHandling.Ignore)]
        public AggregateOp NonArgAggregateOp { get; set; }

        [JsonProperty("NonLayerRepeatSpec", NullValueHandling = NullValueHandling.Ignore)]
        public Spec NonLayerRepeatSpec { get; set; }

        [JsonProperty("NumericArrayMarkPropDef", NullValueHandling = NullValueHandling.Ignore)]
        public ColorDef NumericArrayMarkPropDef { get; set; }

        [JsonProperty("NumericMarkPropDef", NullValueHandling = NullValueHandling.Ignore)]
        public ColorDef NumericMarkPropDef { get; set; }

        [JsonProperty("NumericValueDef", NullValueHandling = NullValueHandling.Ignore)]
        public ColorDef NumericValueDef { get; set; }

        [JsonProperty("OrderFieldDef", NullValueHandling = NullValueHandling.Ignore)]
        public OrderFieldDef OrderFieldDef { get; set; }

        [JsonProperty("OrderValueDef", NullValueHandling = NullValueHandling.Ignore)]
        public OrderValueDef OrderValueDef { get; set; }

        [JsonProperty("Orient", NullValueHandling = NullValueHandling.Ignore)]
        public AggregateOp Orient { get; set; }

        [JsonProperty("Orientation", NullValueHandling = NullValueHandling.Ignore)]
        public AggregateOp Orientation { get; set; }

        [JsonProperty("OverlayMarkDef", NullValueHandling = NullValueHandling.Ignore)]
        public AreaConfig OverlayMarkDef { get; set; }

        [JsonProperty("Padding", NullValueHandling = NullValueHandling.Ignore)]
        public Padding Padding { get; set; }

        [JsonProperty("Parameter", NullValueHandling = NullValueHandling.Ignore)]
        public Parameter Parameter { get; set; }

        [JsonProperty("Parse", NullValueHandling = NullValueHandling.Ignore)]
        public DictInlineDataset Parse { get; set; }

        [JsonProperty("ParseValue", NullValueHandling = NullValueHandling.Ignore)]
        public LabelOverlap ParseValue { get; set; }

        [JsonProperty("PivotTransform", NullValueHandling = NullValueHandling.Ignore)]
        public PivotTransform PivotTransform { get; set; }

        [JsonProperty("PolarDef", NullValueHandling = NullValueHandling.Ignore)]
        public AggregateClass PolarDef { get; set; }

        [JsonProperty("Position2Def", NullValueHandling = NullValueHandling.Ignore)]
        public AggregateClass Position2Def { get; set; }

        [JsonProperty("PositionDatumDef", NullValueHandling = NullValueHandling.Ignore)]
        public PositionDatumDef PositionDatumDef { get; set; }

        [JsonProperty("PositionDatumDefBase", NullValueHandling = NullValueHandling.Ignore)]
        public PositionDatumDefBase PositionDatumDefBase { get; set; }

        [JsonProperty("PositionDef", NullValueHandling = NullValueHandling.Ignore)]
        public AggregateClass PositionDef { get; set; }

        [JsonProperty("PositionFieldDef", NullValueHandling = NullValueHandling.Ignore)]
        public PositionFieldDef PositionFieldDef { get; set; }

        [JsonProperty("PositionFieldDefBase", NullValueHandling = NullValueHandling.Ignore)]
        public PositionFieldDef PositionFieldDefBase { get; set; }

        [JsonProperty("PositionValueDef", NullValueHandling = NullValueHandling.Ignore)]
        public ColorDef PositionValueDef { get; set; }

        [JsonProperty("Predicate", NullValueHandling = NullValueHandling.Ignore)]
        public Color Predicate { get; set; }

        [JsonProperty("PrimitiveValue", NullValueHandling = NullValueHandling.Ignore)]
        public PrimitiveValue PrimitiveValue { get; set; }

        [JsonProperty("Projection", NullValueHandling = NullValueHandling.Ignore)]
        public Projection Projection { get; set; }

        [JsonProperty("ProjectionConfig", NullValueHandling = NullValueHandling.Ignore)]
        public FieldDefWithoutScale ProjectionConfig { get; set; }

        [JsonProperty("ProjectionType", NullValueHandling = NullValueHandling.Ignore)]
        public AggregateOp ProjectionType { get; set; }

        [JsonProperty("QuantileTransform", NullValueHandling = NullValueHandling.Ignore)]
        public QuantileTransform QuantileTransform { get; set; }

        [JsonProperty("RadialGradient", NullValueHandling = NullValueHandling.Ignore)]
        public Gradient RadialGradient { get; set; }

        [JsonProperty("RangeConfig", NullValueHandling = NullValueHandling.Ignore)]
        public RangeConfig RangeConfig { get; set; }

        [JsonProperty("RangeEnum", NullValueHandling = NullValueHandling.Ignore)]
        public AggregateOp RangeEnum { get; set; }

        [JsonProperty("RangeRaw", NullValueHandling = NullValueHandling.Ignore)]
        public RangeRaw RangeRaw { get; set; }

        [JsonProperty("RangeRawArray", NullValueHandling = NullValueHandling.Ignore)]
        public RangeRawArray RangeRawArray { get; set; }

        [JsonProperty("RangeScheme", NullValueHandling = NullValueHandling.Ignore)]
        public RangeScheme RangeScheme { get; set; }

        [JsonProperty("RectConfig", NullValueHandling = NullValueHandling.Ignore)]
        public AreaConfig RectConfig { get; set; }

        [JsonProperty("RegressionTransform", NullValueHandling = NullValueHandling.Ignore)]
        public RegressionTransform RegressionTransform { get; set; }

        [JsonProperty("RepeatMapping", NullValueHandling = NullValueHandling.Ignore)]
        public RepeatMapping RepeatMapping { get; set; }

        [JsonProperty("RepeatRef", NullValueHandling = NullValueHandling.Ignore)]
        public RepeatRef RepeatRef { get; set; }

        [JsonProperty("RepeatSpec", NullValueHandling = NullValueHandling.Ignore)]
        public AggregateClass RepeatSpec { get; set; }

        [JsonProperty("Resolve", NullValueHandling = NullValueHandling.Ignore)]
        public Resolve Resolve { get; set; }

        [JsonProperty("ResolveMode", NullValueHandling = NullValueHandling.Ignore)]
        public AggregateOp ResolveMode { get; set; }

        [JsonProperty("RowCol<LayoutAlign>", NullValueHandling = NullValueHandling.Ignore)]
        public RowColLayoutAlign RowColLayoutAlign { get; set; }

        [JsonProperty("RowCol<boolean>", NullValueHandling = NullValueHandling.Ignore)]
        public RowCol RowColBoolean { get; set; }

        [JsonProperty("RowCol<number>", NullValueHandling = NullValueHandling.Ignore)]
        public RowCol RowColNumber { get; set; }

        [JsonProperty("RowColumnEncodingFieldDef", NullValueHandling = NullValueHandling.Ignore)]
        public FacetFieldDef RowColumnEncodingFieldDef { get; set; }

        [JsonProperty("SampleTransform", NullValueHandling = NullValueHandling.Ignore)]
        public SampleTransform SampleTransform { get; set; }

        [JsonProperty("Scale", NullValueHandling = NullValueHandling.Ignore)]
        public Scale Scale { get; set; }

        [JsonProperty("ScaleBinParams", NullValueHandling = NullValueHandling.Ignore)]
        public ImputeSequence ScaleBinParams { get; set; }

        [JsonProperty("ScaleBins", NullValueHandling = NullValueHandling.Ignore)]
        public ScaleBins ScaleBins { get; set; }

        [JsonProperty("ScaleConfig", NullValueHandling = NullValueHandling.Ignore)]
        public ScaleConfig ScaleConfig { get; set; }

        [JsonProperty("ScaleInterpolateEnum", NullValueHandling = NullValueHandling.Ignore)]
        public AggregateOp ScaleInterpolateEnum { get; set; }

        [JsonProperty("ScaleInterpolateParams", NullValueHandling = NullValueHandling.Ignore)]
        public ScaleInterpolateParams ScaleInterpolateParams { get; set; }

        [JsonProperty("ScaleResolveMap", NullValueHandling = NullValueHandling.Ignore)]
        public ResolveMap ScaleResolveMap { get; set; }

        [JsonProperty("ScaleType", NullValueHandling = NullValueHandling.Ignore)]
        public AggregateOp ScaleType { get; set; }

        [JsonProperty("SchemeParams", NullValueHandling = NullValueHandling.Ignore)]
        public SchemeParams SchemeParams { get; set; }

        [JsonProperty("SecondaryFieldDef", NullValueHandling = NullValueHandling.Ignore)]
        public SecondaryFieldDef SecondaryFieldDef { get; set; }

        [JsonProperty("SelectionConfig", NullValueHandling = NullValueHandling.Ignore)]
        public SelectionConfig SelectionConfig { get; set; }

        [JsonProperty("SelectionDef", NullValueHandling = NullValueHandling.Ignore)]
        public AggregateClass SelectionDef { get; set; }

        [JsonProperty("SelectionExtent", NullValueHandling = NullValueHandling.Ignore)]
        public SelectionExtent SelectionExtent { get; set; }

        [JsonProperty("SelectionInit", NullValueHandling = NullValueHandling.Ignore)]
        public AggregateClass SelectionInit { get; set; }

        [JsonProperty("SelectionInitInterval", NullValueHandling = NullValueHandling.Ignore)]
        public AggregateClass SelectionInitInterval { get; set; }

        [JsonProperty("SelectionInitIntervalMapping", NullValueHandling = NullValueHandling.Ignore)]
        public ColorDef SelectionInitIntervalMapping { get; set; }

        [JsonProperty("SelectionInitMapping", NullValueHandling = NullValueHandling.Ignore)]
        public ColorDef SelectionInitMapping { get; set; }

        [JsonProperty("SelectionPredicate", NullValueHandling = NullValueHandling.Ignore)]
        public SelectionPredicate SelectionPredicate { get; set; }

        [JsonProperty("SelectionResolution", NullValueHandling = NullValueHandling.Ignore)]
        public AggregateOp SelectionResolution { get; set; }

        [JsonProperty("SequenceGenerator", NullValueHandling = NullValueHandling.Ignore)]
        public SequenceGenerator SequenceGenerator { get; set; }

        [JsonProperty("SequenceParams", NullValueHandling = NullValueHandling.Ignore)]
        public ImputeSequence SequenceParams { get; set; }

        [JsonProperty("SequentialMultiHue", NullValueHandling = NullValueHandling.Ignore)]
        public AggregateOp SequentialMultiHue { get; set; }

        [JsonProperty("SequentialSingleHue", NullValueHandling = NullValueHandling.Ignore)]
        public AggregateOp SequentialSingleHue { get; set; }

        [JsonProperty("ShapeDef", NullValueHandling = NullValueHandling.Ignore)]
        public ColorDef ShapeDef { get; set; }

        [JsonProperty("SharedEncoding", NullValueHandling = NullValueHandling.Ignore)]
        public SharedEncoding SharedEncoding { get; set; }

        [JsonProperty("SingleDefUnitChannel", NullValueHandling = NullValueHandling.Ignore)]
        public AggregateOp SingleDefUnitChannel { get; set; }

        [JsonProperty("SingleSelection", NullValueHandling = NullValueHandling.Ignore)]
        public SingleSelection SingleSelection { get; set; }

        [JsonProperty("SingleSelectionConfig", NullValueHandling = NullValueHandling.Ignore)]
        public SingleSelectionConfig SingleSelectionConfig { get; set; }

        [JsonProperty("SingleTimeUnit", NullValueHandling = NullValueHandling.Ignore)]
        public AggregateClass SingleTimeUnit { get; set; }

        [JsonProperty("Sort", NullValueHandling = NullValueHandling.Ignore)]
        public Color Sort { get; set; }

        [JsonProperty("SortArray", NullValueHandling = NullValueHandling.Ignore)]
        public SortArray SortArray { get; set; }

        [JsonProperty("SortByChannel", NullValueHandling = NullValueHandling.Ignore)]
        public AggregateOp SortByChannel { get; set; }

        [JsonProperty("SortByChannelDesc", NullValueHandling = NullValueHandling.Ignore)]
        public AggregateOp SortByChannelDesc { get; set; }

        [JsonProperty("SortByEncoding", NullValueHandling = NullValueHandling.Ignore)]
        public SortByEncoding SortByEncoding { get; set; }

        [JsonProperty("SortField", NullValueHandling = NullValueHandling.Ignore)]
        public SortField SortField { get; set; }

        [JsonProperty("SortOrder", NullValueHandling = NullValueHandling.Ignore)]
        public AggregateOp SortOrder { get; set; }

        [JsonProperty("SphereGenerator", NullValueHandling = NullValueHandling.Ignore)]
        public SphereGenerator SphereGenerator { get; set; }

        [JsonProperty("StackOffset", NullValueHandling = NullValueHandling.Ignore)]
        public AggregateOp StackOffset { get; set; }

        [JsonProperty("StackTransform", NullValueHandling = NullValueHandling.Ignore)]
        public StackTransform StackTransform { get; set; }

        [JsonProperty("StandardType", NullValueHandling = NullValueHandling.Ignore)]
        public AggregateOp StandardType { get; set; }

        [JsonProperty("Step", NullValueHandling = NullValueHandling.Ignore)]
        public Step Step { get; set; }

        [JsonProperty("Stream", NullValueHandling = NullValueHandling.Ignore)]
        public AggregateClass Stream { get; set; }

        [JsonProperty("StringFieldDef", NullValueHandling = NullValueHandling.Ignore)]
        public StringFieldDef StringFieldDef { get; set; }

        [JsonProperty("StringFieldDefWithCondition", NullValueHandling = NullValueHandling.Ignore)]
        public ColorDef StringFieldDefWithCondition { get; set; }

        [JsonProperty("StringValueDefWithCondition", NullValueHandling = NullValueHandling.Ignore)]
        public ColorDef StringValueDefWithCondition { get; set; }

        [JsonProperty("StrokeCap", NullValueHandling = NullValueHandling.Ignore)]
        public AggregateOp StrokeCap { get; set; }

        [JsonProperty("StrokeJoin", NullValueHandling = NullValueHandling.Ignore)]
        public AggregateOp StrokeJoin { get; set; }

        [JsonProperty("StyleConfigIndex", NullValueHandling = NullValueHandling.Ignore)]
        public StyleConfigIndex StyleConfigIndex { get; set; }

        [JsonProperty("SymbolShape", NullValueHandling = NullValueHandling.Ignore)]
        public Element SymbolShape { get; set; }

        [JsonProperty("Text", NullValueHandling = NullValueHandling.Ignore)]
        public InlineDataset Text { get; set; }

        [JsonProperty("TextBaseline", NullValueHandling = NullValueHandling.Ignore)]
        public LegendBinding TextBaseline { get; set; }

        [JsonProperty("TextDef", NullValueHandling = NullValueHandling.Ignore)]
        public AggregateClass TextDef { get; set; }

        [JsonProperty("TextDirection", NullValueHandling = NullValueHandling.Ignore)]
        public AggregateOp TextDirection { get; set; }

        [JsonProperty("TickConfig", NullValueHandling = NullValueHandling.Ignore)]
        public AreaConfig TickConfig { get; set; }

        [JsonProperty("TickCount", NullValueHandling = NullValueHandling.Ignore)]
        public Color TickCount { get; set; }

        [JsonProperty("TimeInterval", NullValueHandling = NullValueHandling.Ignore)]
        public AggregateOp TimeInterval { get; set; }

        [JsonProperty("TimeIntervalStep", NullValueHandling = NullValueHandling.Ignore)]
        public TimeIntervalStep TimeIntervalStep { get; set; }

        [JsonProperty("TimeUnit", NullValueHandling = NullValueHandling.Ignore)]
        public AggregateClass TimeUnit { get; set; }

        [JsonProperty("TimeUnitParams", NullValueHandling = NullValueHandling.Ignore)]
        public TimeUnitParams TimeUnitParams { get; set; }

        [JsonProperty("TimeUnitTransform", NullValueHandling = NullValueHandling.Ignore)]
        public TimeUnitTransform TimeUnitTransform { get; set; }

        [JsonProperty("TitleAnchor", NullValueHandling = NullValueHandling.Ignore)]
        public TitleAnchorClass TitleAnchor { get; set; }

        [JsonProperty("TitleConfig", NullValueHandling = NullValueHandling.Ignore)]
        public ColorDef TitleConfig { get; set; }

        [JsonProperty("TitleFrame", NullValueHandling = NullValueHandling.Ignore)]
        public AggregateOp TitleFrame { get; set; }

        [JsonProperty("TitleOrient", NullValueHandling = NullValueHandling.Ignore)]
        public AggregateOp TitleOrient { get; set; }

        [JsonProperty("TitleParams", NullValueHandling = NullValueHandling.Ignore)]
        public TitleParams TitleParams { get; set; }

        [JsonProperty("TooltipContent", NullValueHandling = NullValueHandling.Ignore)]
        public TooltipContent TooltipContent { get; set; }

        [JsonProperty("TopLevelNormalizedConcatSpec<GenericSpec>", NullValueHandling = NullValueHandling.Ignore)]
        public TopLevelFacetSpec TopLevelNormalizedConcatSpecGenericSpec { get; set; }

        [JsonProperty("TopLevelNormalizedHConcatSpec<GenericSpec>", NullValueHandling = NullValueHandling.Ignore)]
        public TopLevelNormalizedConcatSpecGenericSpec TopLevelNormalizedHConcatSpecGenericSpec { get; set; }

        [JsonProperty("TopLevelNormalizedVConcatSpec<GenericSpec>", NullValueHandling = NullValueHandling.Ignore)]
        public TopLevelNormalizedConcatSpecGenericSpec TopLevelNormalizedVConcatSpecGenericSpec { get; set; }

        [JsonProperty("TopLevelLayerSpec", NullValueHandling = NullValueHandling.Ignore)]
        public TopLevelSpec TopLevelLayerSpec { get; set; }

        [JsonProperty("TopLevelRepeatSpec", NullValueHandling = NullValueHandling.Ignore)]
        public TopLevelRepeatSpec TopLevelRepeatSpec { get; set; }

        [JsonProperty("TopLevelFacetSpec", NullValueHandling = NullValueHandling.Ignore)]
        public TopLevelFacetSpec TopLevelFacetSpec { get; set; }

        [JsonProperty("TopLevelSpec", NullValueHandling = NullValueHandling.Ignore)]
        public NormalizedSpec TopLevelSpec { get; set; }

        [JsonProperty("TopLevelUnitSpec", NullValueHandling = NullValueHandling.Ignore)]
        public TopLevelSpec TopLevelUnitSpec { get; set; }

        [JsonProperty("TopoDataFormat", NullValueHandling = NullValueHandling.Ignore)]
        public TopoDataFormat TopoDataFormat { get; set; }

        [JsonProperty("Transform", NullValueHandling = NullValueHandling.Ignore)]
        public AggregateClass Transform { get; set; }

        [JsonProperty("Type", NullValueHandling = NullValueHandling.Ignore)]
        public Mark Type { get; set; }

        [JsonProperty("TypeForShape", NullValueHandling = NullValueHandling.Ignore)]
        public AggregateOp TypeForShape { get; set; }

        [JsonProperty("TypedFieldDef", NullValueHandling = NullValueHandling.Ignore)]
        public TypedFieldDef TypedFieldDef { get; set; }

        [JsonProperty("URI", NullValueHandling = NullValueHandling.Ignore)]
        public HexColor Uri { get; set; }

        [JsonProperty("UnitSpec", NullValueHandling = NullValueHandling.Ignore)]
        public LayerSpec UnitSpec { get; set; }

        [JsonProperty("UnitSpecWithFrame", NullValueHandling = NullValueHandling.Ignore)]
        public LayerSpec UnitSpecWithFrame { get; set; }

        [JsonProperty("UrlData", NullValueHandling = NullValueHandling.Ignore)]
        public UrlData UrlData { get; set; }

        [JsonProperty("UtcMultiTimeUnit", NullValueHandling = NullValueHandling.Ignore)]
        public AggregateOp UtcMultiTimeUnit { get; set; }

        [JsonProperty("UtcSingleTimeUnit", NullValueHandling = NullValueHandling.Ignore)]
        public AggregateOp UtcSingleTimeUnit { get; set; }

        [JsonProperty("ValueDef<(number|\"width\"|\"height\"|ExprRef)>", NullValueHandling = NullValueHandling.Ignore)]
        public ValueDefNumberWidthHeightExprRef ValueDefNumberWidthHeightExprRef { get; set; }

        [JsonProperty("ValueDef<(number|ExprRef)>", NullValueHandling = NullValueHandling.Ignore)]
        public ValueDefNumberExprRef ValueDefNumberExprRef { get; set; }

        [JsonProperty("ValueDef<number>", NullValueHandling = NullValueHandling.Ignore)]
        public ValueDefNumber ValueDefNumber { get; set; }

        [JsonProperty("ValueDefWithCondition<MarkPropFieldOrDatumDef,(Gradient|string|null)>", NullValueHandling = NullValueHandling.Ignore)]
        public OrderValueDef ValueDefWithConditionMarkPropFieldOrDatumDefGradientStringNull { get; set; }

        [JsonProperty("ValueDefWithCondition<MarkPropFieldOrDatumDef,(string|null)>", NullValueHandling = NullValueHandling.Ignore)]
        public OrderValueDef ValueDefWithConditionMarkPropFieldOrDatumDefStringNull { get; set; }

        [JsonProperty("ValueDefWithCondition<MarkPropFieldOrDatumDef,number>", NullValueHandling = NullValueHandling.Ignore)]
        public OrderValueDef ValueDefWithConditionMarkPropFieldOrDatumDefNumber { get; set; }

        [JsonProperty("ValueDefWithCondition<MarkPropFieldOrDatumDef,number[]>", NullValueHandling = NullValueHandling.Ignore)]
        public ValueDefWithConditionMarkPropFieldOrDatumDefNumber DefinitionsValueDefWithConditionMarkPropFieldOrDatumDefNumber { get; set; }

        [JsonProperty("ValueDefWithCondition<MarkPropFieldOrDatumDef<TypeForShape>,(string|null)>", NullValueHandling = NullValueHandling.Ignore)]
        public OrderValueDef ValueDefWithConditionMarkPropFieldOrDatumDefTypeForShapeStringNull { get; set; }

        [JsonProperty("ValueDefWithCondition<StringFieldDef,Text>", NullValueHandling = NullValueHandling.Ignore)]
        public ValueDefWithConditionStringFieldDefText ValueDefWithConditionStringFieldDefText { get; set; }

        [JsonProperty("Vector2<DateTime>", NullValueHandling = NullValueHandling.Ignore)]
        public Vector2DateTime Vector2DateTime { get; set; }

        [JsonProperty("Vector2<Vector2<number>>", NullValueHandling = NullValueHandling.Ignore)]
        public Vector2DateTime Vector2Vector2Number { get; set; }

        [JsonProperty("Vector2<boolean>", NullValueHandling = NullValueHandling.Ignore)]
        public Vector2Boolean Vector2Boolean { get; set; }

        [JsonProperty("Vector2<number>", NullValueHandling = NullValueHandling.Ignore)]
        public Vector2Boolean Vector2Number { get; set; }

        [JsonProperty("Vector2<string>", NullValueHandling = NullValueHandling.Ignore)]
        public Vector2Boolean Vector2String { get; set; }

        [JsonProperty("Vector3<number>", NullValueHandling = NullValueHandling.Ignore)]
        public Vector2Boolean Vector3Number { get; set; }

        [JsonProperty("ViewBackground", NullValueHandling = NullValueHandling.Ignore)]
        public ViewBackground ViewBackground { get; set; }

        [JsonProperty("ViewConfig", NullValueHandling = NullValueHandling.Ignore)]
        public ViewConfig ViewConfig { get; set; }

        [JsonProperty("WindowEventType", NullValueHandling = NullValueHandling.Ignore)]
        public Color WindowEventType { get; set; }

        [JsonProperty("WindowFieldDef", NullValueHandling = NullValueHandling.Ignore)]
        public WindowFieldDef WindowFieldDef { get; set; }

        [JsonProperty("WindowOnlyOp", NullValueHandling = NullValueHandling.Ignore)]
        public AggregateOp WindowOnlyOp { get; set; }

        [JsonProperty("WindowTransform", NullValueHandling = NullValueHandling.Ignore)]
        public WindowTransform WindowTransform { get; set; }
    }

    public partial class AggregateClass
    {
        [JsonProperty("anyOf", NullValueHandling = NullValueHandling.Ignore)]
        public List<ColorDef> AnyOf { get; set; }
    }

    public partial class ColorDef
    {
        [JsonProperty("$ref", NullValueHandling = NullValueHandling.Ignore)]
        public string Ref { get; set; }
    }

    public partial class AggregateOp
    {
        [JsonProperty("enum", NullValueHandling = NullValueHandling.Ignore)]
        public List<string> Enum { get; set; }

        [JsonProperty("type", NullValueHandling = NullValueHandling.Ignore)]
        public TypeEnum? Type { get; set; }
    }

    public partial class AggregateTransform
    {
        [JsonProperty("additionalProperties", NullValueHandling = NullValueHandling.Ignore)]
        public bool? AdditionalProperties { get; set; }

        [JsonProperty("properties", NullValueHandling = NullValueHandling.Ignore)]
        public AggregateTransformProperties Properties { get; set; }

        [JsonProperty("required", NullValueHandling = NullValueHandling.Ignore)]
        public List<string> AggregateTransformRequired { get; set; }

        [JsonProperty("type", NullValueHandling = NullValueHandling.Ignore)]
        public TypeEnum? Type { get; set; }
    }

    public partial class AggregateTransformProperties
    {
        [JsonProperty("aggregate", NullValueHandling = NullValueHandling.Ignore)]
        public GroupbyClass Aggregate { get; set; }

        [JsonProperty("groupby", NullValueHandling = NullValueHandling.Ignore)]
        public GroupbyClass Groupby { get; set; }
    }

    public partial class GroupbyClass
    {
        [JsonProperty("description", NullValueHandling = NullValueHandling.Ignore)]
        public string Description { get; set; }

        [JsonProperty("items", NullValueHandling = NullValueHandling.Ignore)]
        public ColorDef Items { get; set; }

        [JsonProperty("type", NullValueHandling = NullValueHandling.Ignore)]
        public TypeEnum? Type { get; set; }
    }

    public partial class FieldDef
    {
        [JsonProperty("additionalProperties", NullValueHandling = NullValueHandling.Ignore)]
        public bool? AdditionalProperties { get; set; }

        [JsonProperty("properties", NullValueHandling = NullValueHandling.Ignore)]
        public AggregatedFieldDefProperties Properties { get; set; }

        [JsonProperty("required", NullValueHandling = NullValueHandling.Ignore)]
        public List<string> FieldDefRequired { get; set; }

        [JsonProperty("type", NullValueHandling = NullValueHandling.Ignore)]
        public TypeEnum? Type { get; set; }
    }

    public partial class AggregatedFieldDefProperties
    {
        [JsonProperty("as", NullValueHandling = NullValueHandling.Ignore)]
        public FieldDefWithoutScale As { get; set; }

        [JsonProperty("field", NullValueHandling = NullValueHandling.Ignore)]
        public FieldDefWithoutScale Field { get; set; }

        [JsonProperty("op", NullValueHandling = NullValueHandling.Ignore)]
        public FieldDefWithoutScale Op { get; set; }
    }

    public partial class FieldDefWithoutScale
    {
        [JsonProperty("$ref", NullValueHandling = NullValueHandling.Ignore)]
        public string Ref { get; set; }

        [JsonProperty("description", NullValueHandling = NullValueHandling.Ignore)]
        public string Description { get; set; }
    }

    public partial class AreaConfig
    {
        [JsonProperty("additionalProperties", NullValueHandling = NullValueHandling.Ignore)]
        public bool? AdditionalProperties { get; set; }

        [JsonProperty("properties", NullValueHandling = NullValueHandling.Ignore)]
        public AreaConfigProperties Properties { get; set; }

        [JsonProperty("type", NullValueHandling = NullValueHandling.Ignore)]
        public TypeEnum? Type { get; set; }
    }

    public partial class AreaConfigProperties
    {
        [JsonProperty("align", NullValueHandling = NullValueHandling.Ignore)]
        public NormalizedSpec Align { get; set; }

        [JsonProperty("angle", NullValueHandling = NullValueHandling.Ignore)]
        public GridOpacityClass Angle { get; set; }

        [JsonProperty("aria", NullValueHandling = NullValueHandling.Ignore)]
        public Aria Aria { get; set; }

        [JsonProperty("ariaRole", NullValueHandling = NullValueHandling.Ignore)]
        public Aria AriaRole { get; set; }

        [JsonProperty("ariaRoleDescription", NullValueHandling = NullValueHandling.Ignore)]
        public Aria AriaRoleDescription { get; set; }

        [JsonProperty("aspect", NullValueHandling = NullValueHandling.Ignore)]
        public Aria Aspect { get; set; }

        [JsonProperty("baseline", NullValueHandling = NullValueHandling.Ignore)]
        public NormalizedSpec Baseline { get; set; }

        [JsonProperty("blend", NullValueHandling = NullValueHandling.Ignore)]
        public BlendClass Blend { get; set; }

        [JsonProperty("color", NullValueHandling = NullValueHandling.Ignore)]
        public NormalizedSpec Color { get; set; }

        [JsonProperty("cornerRadius", NullValueHandling = NullValueHandling.Ignore)]
        public Aria CornerRadius { get; set; }

        [JsonProperty("cornerRadiusBottomLeft", NullValueHandling = NullValueHandling.Ignore)]
        public Aria CornerRadiusBottomLeft { get; set; }

        [JsonProperty("cornerRadiusBottomRight", NullValueHandling = NullValueHandling.Ignore)]
        public Aria CornerRadiusBottomRight { get; set; }

        [JsonProperty("cornerRadiusTopLeft", NullValueHandling = NullValueHandling.Ignore)]
        public Aria CornerRadiusTopLeft { get; set; }

        [JsonProperty("cornerRadiusTopRight", NullValueHandling = NullValueHandling.Ignore)]
        public Aria CornerRadiusTopRight { get; set; }

        [JsonProperty("cursor", NullValueHandling = NullValueHandling.Ignore)]
        public BlendClass Cursor { get; set; }

        [JsonProperty("description", NullValueHandling = NullValueHandling.Ignore)]
        public Aria Description { get; set; }

        [JsonProperty("dir", NullValueHandling = NullValueHandling.Ignore)]
        public BlendClass Dir { get; set; }

        [JsonProperty("dx", NullValueHandling = NullValueHandling.Ignore)]
        public Aria Dx { get; set; }

        [JsonProperty("dy", NullValueHandling = NullValueHandling.Ignore)]
        public Aria Dy { get; set; }

        [JsonProperty("ellipsis", NullValueHandling = NullValueHandling.Ignore)]
        public Aria Ellipsis { get; set; }

        [JsonProperty("endAngle", NullValueHandling = NullValueHandling.Ignore)]
        public Aria EndAngle { get; set; }

        [JsonProperty("fill", NullValueHandling = NullValueHandling.Ignore)]
        public CornerRadiusEnd Fill { get; set; }

        [JsonProperty("fillOpacity", NullValueHandling = NullValueHandling.Ignore)]
        public GridOpacityClass FillOpacity { get; set; }

        [JsonProperty("filled", NullValueHandling = NullValueHandling.Ignore)]
        public Clip Filled { get; set; }

        [JsonProperty("font", NullValueHandling = NullValueHandling.Ignore)]
        public Aria Font { get; set; }

        [JsonProperty("fontSize", NullValueHandling = NullValueHandling.Ignore)]
        public FontSize FontSize { get; set; }

        [JsonProperty("fontStyle", NullValueHandling = NullValueHandling.Ignore)]
        public BlendClass FontStyle { get; set; }

        [JsonProperty("fontWeight", NullValueHandling = NullValueHandling.Ignore)]
        public BlendClass FontWeight { get; set; }

        [JsonProperty("height", NullValueHandling = NullValueHandling.Ignore)]
        public Aria Height { get; set; }

        [JsonProperty("href", NullValueHandling = NullValueHandling.Ignore)]
        public BlendClass Href { get; set; }

        [JsonProperty("innerRadius", NullValueHandling = NullValueHandling.Ignore)]
        public CornerRadiusEnd InnerRadius { get; set; }

        [JsonProperty("interpolate", NullValueHandling = NullValueHandling.Ignore)]
        public BlendClass Interpolate { get; set; }

        [JsonProperty("invalid", NullValueHandling = NullValueHandling.Ignore)]
        public Invalid Invalid { get; set; }

        [JsonProperty("limit", NullValueHandling = NullValueHandling.Ignore)]
        public Aria Limit { get; set; }

        [JsonProperty("line", NullValueHandling = NullValueHandling.Ignore)]
        public CornerRadiusEnd Line { get; set; }

        [JsonProperty("lineBreak", NullValueHandling = NullValueHandling.Ignore)]
        public Aria LineBreak { get; set; }

        [JsonProperty("lineHeight", NullValueHandling = NullValueHandling.Ignore)]
        public Aria LineHeight { get; set; }

        [JsonProperty("opacity", NullValueHandling = NullValueHandling.Ignore)]
        public Opacity Opacity { get; set; }

        [JsonProperty("order", NullValueHandling = NullValueHandling.Ignore)]
        public Order Order { get; set; }

        [JsonProperty("orient", NullValueHandling = NullValueHandling.Ignore)]
        public FieldDefWithoutScale Orient { get; set; }

        [JsonProperty("outerRadius", NullValueHandling = NullValueHandling.Ignore)]
        public CornerRadiusEnd OuterRadius { get; set; }

        [JsonProperty("padAngle", NullValueHandling = NullValueHandling.Ignore)]
        public Aria PadAngle { get; set; }

        [JsonProperty("point", NullValueHandling = NullValueHandling.Ignore)]
        public Point Point { get; set; }

        [JsonProperty("radius", NullValueHandling = NullValueHandling.Ignore)]
        public CornerRadiusEnd Radius { get; set; }

        [JsonProperty("radius2", NullValueHandling = NullValueHandling.Ignore)]
        public CornerRadiusEnd Radius2 { get; set; }

        [JsonProperty("shape", NullValueHandling = NullValueHandling.Ignore)]
        public Shape Shape { get; set; }

        [JsonProperty("size", NullValueHandling = NullValueHandling.Ignore)]
        public Size Size { get; set; }

        [JsonProperty("smooth", NullValueHandling = NullValueHandling.Ignore)]
        public Aria Smooth { get; set; }

        [JsonProperty("startAngle", NullValueHandling = NullValueHandling.Ignore)]
        public Aria StartAngle { get; set; }

        [JsonProperty("stroke", NullValueHandling = NullValueHandling.Ignore)]
        public CornerRadiusEnd Stroke { get; set; }

        [JsonProperty("strokeCap", NullValueHandling = NullValueHandling.Ignore)]
        public BlendClass StrokeCap { get; set; }

        [JsonProperty("strokeDash", NullValueHandling = NullValueHandling.Ignore)]
        public Dash StrokeDash { get; set; }

        [JsonProperty("strokeDashOffset", NullValueHandling = NullValueHandling.Ignore)]
        public Aria StrokeDashOffset { get; set; }

        [JsonProperty("strokeJoin", NullValueHandling = NullValueHandling.Ignore)]
        public BlendClass StrokeJoin { get; set; }

        [JsonProperty("strokeMiterLimit", NullValueHandling = NullValueHandling.Ignore)]
        public Aria StrokeMiterLimit { get; set; }

        [JsonProperty("strokeOffset", NullValueHandling = NullValueHandling.Ignore)]
        public Aria StrokeOffset { get; set; }

        [JsonProperty("strokeOpacity", NullValueHandling = NullValueHandling.Ignore)]
        public GridOpacityClass StrokeOpacity { get; set; }

        [JsonProperty("strokeWidth", NullValueHandling = NullValueHandling.Ignore)]
        public FontSize StrokeWidth { get; set; }

        [JsonProperty("tension", NullValueHandling = NullValueHandling.Ignore)]
        public Aria Tension { get; set; }

        [JsonProperty("text", NullValueHandling = NullValueHandling.Ignore)]
        public BlendClass Text { get; set; }

        [JsonProperty("theta", NullValueHandling = NullValueHandling.Ignore)]
        public Opacity Theta { get; set; }

        [JsonProperty("theta2", NullValueHandling = NullValueHandling.Ignore)]
        public CornerRadiusEnd Theta2 { get; set; }

        [JsonProperty("timeUnitBand", NullValueHandling = NullValueHandling.Ignore)]
        public Clip TimeUnitBand { get; set; }

        [JsonProperty("timeUnitBandPosition", NullValueHandling = NullValueHandling.Ignore)]
        public Clip TimeUnitBandPosition { get; set; }

        [JsonProperty("tooltip", NullValueHandling = NullValueHandling.Ignore)]
        public CornerRadiusEnd Tooltip { get; set; }

        [JsonProperty("url", NullValueHandling = NullValueHandling.Ignore)]
        public BlendClass Url { get; set; }

        [JsonProperty("width", NullValueHandling = NullValueHandling.Ignore)]
        public Aria Width { get; set; }

        [JsonProperty("x", NullValueHandling = NullValueHandling.Ignore)]
        public Point X { get; set; }

        [JsonProperty("x2", NullValueHandling = NullValueHandling.Ignore)]
        public Point X2 { get; set; }

        [JsonProperty("y", NullValueHandling = NullValueHandling.Ignore)]
        public Point Y { get; set; }

        [JsonProperty("y2", NullValueHandling = NullValueHandling.Ignore)]
        public Point Y2 { get; set; }

        [JsonProperty("binSpacing", NullValueHandling = NullValueHandling.Ignore)]
        public BandSize BinSpacing { get; set; }

        [JsonProperty("continuousBandSize", NullValueHandling = NullValueHandling.Ignore)]
        public BandSize ContinuousBandSize { get; set; }

        [JsonProperty("cornerRadiusEnd", NullValueHandling = NullValueHandling.Ignore)]
        public CornerRadiusEnd CornerRadiusEnd { get; set; }

        [JsonProperty("discreteBandSize", NullValueHandling = NullValueHandling.Ignore)]
        public BandSize DiscreteBandSize { get; set; }

        [JsonProperty("bandSize", NullValueHandling = NullValueHandling.Ignore)]
        public BandSize BandSize { get; set; }

        [JsonProperty("clip", NullValueHandling = NullValueHandling.Ignore)]
        public Clip Clip { get; set; }

        [JsonProperty("radius2Offset", NullValueHandling = NullValueHandling.Ignore)]
        public CornerRadiusEnd Radius2Offset { get; set; }

        [JsonProperty("radiusOffset", NullValueHandling = NullValueHandling.Ignore)]
        public CornerRadiusEnd RadiusOffset { get; set; }

        [JsonProperty("style", NullValueHandling = NullValueHandling.Ignore)]
        public Style Style { get; set; }

        [JsonProperty("theta2Offset", NullValueHandling = NullValueHandling.Ignore)]
        public CornerRadiusEnd Theta2Offset { get; set; }

        [JsonProperty("thetaOffset", NullValueHandling = NullValueHandling.Ignore)]
        public CornerRadiusEnd ThetaOffset { get; set; }

        [JsonProperty("thickness", NullValueHandling = NullValueHandling.Ignore)]
        public BandSize Thickness { get; set; }

        [JsonProperty("type", NullValueHandling = NullValueHandling.Ignore)]
        public FieldDefWithoutScale Type { get; set; }

        [JsonProperty("x2Offset", NullValueHandling = NullValueHandling.Ignore)]
        public CornerRadiusEnd X2Offset { get; set; }

        [JsonProperty("xOffset", NullValueHandling = NullValueHandling.Ignore)]
        public CornerRadiusEnd XOffset { get; set; }

        [JsonProperty("y2Offset", NullValueHandling = NullValueHandling.Ignore)]
        public CornerRadiusEnd Y2Offset { get; set; }

        [JsonProperty("yOffset", NullValueHandling = NullValueHandling.Ignore)]
        public CornerRadiusEnd YOffset { get; set; }
    }

    public partial class NormalizedSpec
    {
        [JsonProperty("anyOf", NullValueHandling = NullValueHandling.Ignore)]
        public List<ColorDef> AnyOf { get; set; }

        [JsonProperty("description", NullValueHandling = NullValueHandling.Ignore)]
        public string Description { get; set; }
    }

    public partial class GridOpacityClass
    {
        [JsonProperty("anyOf", NullValueHandling = NullValueHandling.Ignore)]
        public List<GridOpacityAnyOf> AnyOf { get; set; }
    }

    public partial class GridOpacityAnyOf
    {
        [JsonProperty("description", NullValueHandling = NullValueHandling.Ignore)]
        public string Description { get; set; }

        [JsonProperty("maximum", NullValueHandling = NullValueHandling.Ignore)]
        public long? Maximum { get; set; }

        [JsonProperty("minimum", NullValueHandling = NullValueHandling.Ignore)]
        public long? Minimum { get; set; }

        [JsonProperty("type", NullValueHandling = NullValueHandling.Ignore)]
        public TypeEnum? Type { get; set; }

        [JsonProperty("$ref", NullValueHandling = NullValueHandling.Ignore)]
        public DayRef? Ref { get; set; }
    }

    public partial class Aria
    {
        [JsonProperty("anyOf", NullValueHandling = NullValueHandling.Ignore)]
        public List<AriaAnyOf> AnyOf { get; set; }
    }

    public partial class AriaAnyOf
    {
        [JsonProperty("description", NullValueHandling = NullValueHandling.Ignore)]
        public string Description { get; set; }

        [JsonProperty("type", NullValueHandling = NullValueHandling.Ignore)]
        public TypeEnum? Type { get; set; }

        [JsonProperty("$ref", NullValueHandling = NullValueHandling.Ignore)]
        public DayRef? Ref { get; set; }
    }

    public partial class BandSize
    {
        [JsonProperty("description", NullValueHandling = NullValueHandling.Ignore)]
        public string Description { get; set; }

        [JsonProperty("minimum", NullValueHandling = NullValueHandling.Ignore)]
        public long? Minimum { get; set; }

        [JsonProperty("type", NullValueHandling = NullValueHandling.Ignore)]
        public TypeEnum? Type { get; set; }
    }

    public partial class BlendClass
    {
        [JsonProperty("anyOf", NullValueHandling = NullValueHandling.Ignore)]
        public List<FieldDefWithoutScale> AnyOf { get; set; }
    }

    public partial class Clip
    {
        [JsonProperty("description", NullValueHandling = NullValueHandling.Ignore)]
        public string Description { get; set; }

        [JsonProperty("type", NullValueHandling = NullValueHandling.Ignore)]
        public TypeEnum? Type { get; set; }
    }

    public partial class CornerRadiusEnd
    {
        [JsonProperty("anyOf", NullValueHandling = NullValueHandling.Ignore)]
        public List<AnyOf> AnyOf { get; set; }

        [JsonProperty("description", NullValueHandling = NullValueHandling.Ignore)]
        public string Description { get; set; }
    }

    public partial class AnyOf
    {
        [JsonProperty("$ref", NullValueHandling = NullValueHandling.Ignore)]
        public string Ref { get; set; }

        [JsonProperty("type", NullValueHandling = NullValueHandling.Ignore)]
        public TypeEnum? Type { get; set; }
    }

    public partial class FontSize
    {
        [JsonProperty("anyOf", NullValueHandling = NullValueHandling.Ignore)]
        public List<GridWidthAnyOf> AnyOf { get; set; }
    }

    public partial class GridWidthAnyOf
    {
        [JsonProperty("description", NullValueHandling = NullValueHandling.Ignore)]
        public string Description { get; set; }

        [JsonProperty("minimum", NullValueHandling = NullValueHandling.Ignore)]
        public long? Minimum { get; set; }

        [JsonProperty("type", NullValueHandling = NullValueHandling.Ignore)]
        public TypeEnum? Type { get; set; }

        [JsonProperty("$ref", NullValueHandling = NullValueHandling.Ignore)]
        public DayRef? Ref { get; set; }
    }

    public partial class Invalid
    {
        [JsonProperty("description", NullValueHandling = NullValueHandling.Ignore)]
        public string Description { get; set; }

        [JsonProperty("enum", NullValueHandling = NullValueHandling.Ignore)]
        public List<EnumElement?> Enum { get; set; }

        [JsonProperty("type", NullValueHandling = NullValueHandling.Ignore)]
        public List<TypeEnum> Type { get; set; }
    }

    public partial class Opacity
    {
        [JsonProperty("anyOf", NullValueHandling = NullValueHandling.Ignore)]
        public List<AnyOf> AnyOf { get; set; }

        [JsonProperty("description", NullValueHandling = NullValueHandling.Ignore)]
        public string Description { get; set; }

        [JsonProperty("maximum", NullValueHandling = NullValueHandling.Ignore)]
        public long? Maximum { get; set; }

        [JsonProperty("minimum", NullValueHandling = NullValueHandling.Ignore)]
        public long? Minimum { get; set; }
    }

    public partial class Order
    {
        [JsonProperty("description", NullValueHandling = NullValueHandling.Ignore)]
        public string Description { get; set; }

        [JsonProperty("type", NullValueHandling = NullValueHandling.Ignore)]
        public List<TypeEnum> Type { get; set; }
    }

    public partial class Point
    {
        [JsonProperty("anyOf", NullValueHandling = NullValueHandling.Ignore)]
        public List<PointAnyOf> AnyOf { get; set; }

        [JsonProperty("description", NullValueHandling = NullValueHandling.Ignore)]
        public string Description { get; set; }
    }

    public partial class PointAnyOf
    {
        [JsonProperty("type", NullValueHandling = NullValueHandling.Ignore)]
        public TypeEnum? Type { get; set; }

        [JsonProperty("$ref", NullValueHandling = NullValueHandling.Ignore)]
        public PurpleRef? Ref { get; set; }

        [JsonProperty("const", NullValueHandling = NullValueHandling.Ignore)]
        public ConstElement? Const { get; set; }
    }

    public partial class Shape
    {
        [JsonProperty("anyOf", NullValueHandling = NullValueHandling.Ignore)]
        public List<DomainColorAnyOf> AnyOf { get; set; }
    }

    public partial class DomainColorAnyOf
    {
        [JsonProperty("anyOf", NullValueHandling = NullValueHandling.Ignore)]
        public List<AnyOf> AnyOf { get; set; }

        [JsonProperty("description", NullValueHandling = NullValueHandling.Ignore)]
        public string Description { get; set; }

        [JsonProperty("$ref", NullValueHandling = NullValueHandling.Ignore)]
        public FluffyRef? Ref { get; set; }
    }

    public partial class Size
    {
        [JsonProperty("anyOf", NullValueHandling = NullValueHandling.Ignore)]
        public List<AnyOf> AnyOf { get; set; }

        [JsonProperty("description", NullValueHandling = NullValueHandling.Ignore)]
        public string Description { get; set; }

        [JsonProperty("minimum", NullValueHandling = NullValueHandling.Ignore)]
        public long? Minimum { get; set; }
    }

    public partial class Dash
    {
        [JsonProperty("anyOf", NullValueHandling = NullValueHandling.Ignore)]
        public List<DomainDashAnyOf> AnyOf { get; set; }
    }

    public partial class DomainDashAnyOf
    {
        [JsonProperty("description", NullValueHandling = NullValueHandling.Ignore)]
        public string Description { get; set; }

        [JsonProperty("items", NullValueHandling = NullValueHandling.Ignore)]
        public Element Items { get; set; }

        [JsonProperty("type", NullValueHandling = NullValueHandling.Ignore)]
        public TypeEnum? Type { get; set; }

        [JsonProperty("$ref", NullValueHandling = NullValueHandling.Ignore)]
        public DayRef? Ref { get; set; }
    }

    public partial class Element
    {
        [JsonProperty("type", NullValueHandling = NullValueHandling.Ignore)]
        public TypeEnum? Type { get; set; }
    }

    public partial class Style
    {
        [JsonProperty("anyOf", NullValueHandling = NullValueHandling.Ignore)]
        public List<RangeRawArray> AnyOf { get; set; }

        [JsonProperty("description", NullValueHandling = NullValueHandling.Ignore)]
        public string Description { get; set; }
    }

    public partial class RangeRawArray
    {
        [JsonProperty("type", NullValueHandling = NullValueHandling.Ignore)]
        public TypeEnum? Type { get; set; }

        [JsonProperty("items", NullValueHandling = NullValueHandling.Ignore)]
        public Element Items { get; set; }
    }

    public partial class ArgmaxDef
    {
        [JsonProperty("additionalProperties", NullValueHandling = NullValueHandling.Ignore)]
        public bool? AdditionalProperties { get; set; }

        [JsonProperty("properties", NullValueHandling = NullValueHandling.Ignore)]
        public ArgmaxDefProperties Properties { get; set; }

        [JsonProperty("required", NullValueHandling = NullValueHandling.Ignore)]
        public List<string> ArgmaxDefRequired { get; set; }

        [JsonProperty("type", NullValueHandling = NullValueHandling.Ignore)]
        public TypeEnum? Type { get; set; }
    }

    public partial class ArgmaxDefProperties
    {
        [JsonProperty("argmax", NullValueHandling = NullValueHandling.Ignore)]
        public Element Argmax { get; set; }
    }

    public partial class ArgminDef
    {
        [JsonProperty("additionalProperties", NullValueHandling = NullValueHandling.Ignore)]
        public bool? AdditionalProperties { get; set; }

        [JsonProperty("properties", NullValueHandling = NullValueHandling.Ignore)]
        public ArgminDefProperties Properties { get; set; }

        [JsonProperty("required", NullValueHandling = NullValueHandling.Ignore)]
        public List<string> ArgminDefRequired { get; set; }

        [JsonProperty("type", NullValueHandling = NullValueHandling.Ignore)]
        public TypeEnum? Type { get; set; }
    }

    public partial class ArgminDefProperties
    {
        [JsonProperty("argmin", NullValueHandling = NullValueHandling.Ignore)]
        public Element Argmin { get; set; }
    }

    public partial class AutoSizeParams
    {
        [JsonProperty("additionalProperties", NullValueHandling = NullValueHandling.Ignore)]
        public bool? AdditionalProperties { get; set; }

        [JsonProperty("properties", NullValueHandling = NullValueHandling.Ignore)]
        public AutoSizeParamsProperties Properties { get; set; }

        [JsonProperty("type", NullValueHandling = NullValueHandling.Ignore)]
        public TypeEnum? Type { get; set; }
    }

    public partial class AutoSizeParamsProperties
    {
        [JsonProperty("contains", NullValueHandling = NullValueHandling.Ignore)]
        public Mark Contains { get; set; }

        [JsonProperty("resize", NullValueHandling = NullValueHandling.Ignore)]
        public Clip Resize { get; set; }

        [JsonProperty("type", NullValueHandling = NullValueHandling.Ignore)]
        public FieldDefWithoutScale Type { get; set; }
    }

    public partial class Mark
    {
        [JsonProperty("description", NullValueHandling = NullValueHandling.Ignore)]
        public string Description { get; set; }

        [JsonProperty("enum", NullValueHandling = NullValueHandling.Ignore)]
        public List<string> Enum { get; set; }

        [JsonProperty("type", NullValueHandling = NullValueHandling.Ignore)]
        public TypeEnum? Type { get; set; }

        [JsonProperty("$ref", NullValueHandling = NullValueHandling.Ignore)]
        public MarkRef? Ref { get; set; }

        [JsonProperty("items", NullValueHandling = NullValueHandling.Ignore)]
        public Element Items { get; set; }

        [JsonProperty("minimum", NullValueHandling = NullValueHandling.Ignore)]
        public long? Minimum { get; set; }

        [JsonProperty("maximum", NullValueHandling = NullValueHandling.Ignore)]
        public long? Maximum { get; set; }

        [JsonProperty("anyOf", NullValueHandling = NullValueHandling.Ignore)]
        public List<AnyOf> AnyOf { get; set; }

        [JsonProperty("const", NullValueHandling = NullValueHandling.Ignore)]
        public string Const { get; set; }
    }

    public partial class Axis
    {
        [JsonProperty("additionalProperties", NullValueHandling = NullValueHandling.Ignore)]
        public bool? AdditionalProperties { get; set; }

        [JsonProperty("properties", NullValueHandling = NullValueHandling.Ignore)]
        public AxisProperties Properties { get; set; }

        [JsonProperty("type", NullValueHandling = NullValueHandling.Ignore)]
        public TypeEnum? Type { get; set; }
    }

    public partial class AxisProperties
    {
        [JsonProperty("aria", NullValueHandling = NullValueHandling.Ignore)]
        public Aria Aria { get; set; }

        [JsonProperty("bandPosition", NullValueHandling = NullValueHandling.Ignore)]
        public Aria BandPosition { get; set; }

        [JsonProperty("description", NullValueHandling = NullValueHandling.Ignore)]
        public Aria Description { get; set; }

        [JsonProperty("domain", NullValueHandling = NullValueHandling.Ignore)]
        public Aria Domain { get; set; }

        [JsonProperty("domainCap", NullValueHandling = NullValueHandling.Ignore)]
        public BlendClass DomainCap { get; set; }

        [JsonProperty("domainColor", NullValueHandling = NullValueHandling.Ignore)]
        public Shape DomainColor { get; set; }

        [JsonProperty("domainDash", NullValueHandling = NullValueHandling.Ignore)]
        public Dash DomainDash { get; set; }

        [JsonProperty("domainDashOffset", NullValueHandling = NullValueHandling.Ignore)]
        public Aria DomainDashOffset { get; set; }

        [JsonProperty("domainOpacity", NullValueHandling = NullValueHandling.Ignore)]
        public Aria DomainOpacity { get; set; }

        [JsonProperty("domainWidth", NullValueHandling = NullValueHandling.Ignore)]
        public Aria DomainWidth { get; set; }

        [JsonProperty("format", NullValueHandling = NullValueHandling.Ignore)]
        public CornerRadiusEnd Format { get; set; }

        [JsonProperty("formatType", NullValueHandling = NullValueHandling.Ignore)]
        public Clip FormatType { get; set; }

        [JsonProperty("grid", NullValueHandling = NullValueHandling.Ignore)]
        public Clip Grid { get; set; }

        [JsonProperty("gridCap", NullValueHandling = NullValueHandling.Ignore)]
        public BlendClass GridCap { get; set; }

        [JsonProperty("gridColor", NullValueHandling = NullValueHandling.Ignore)]
        public Shape GridColor { get; set; }

        [JsonProperty("gridDash", NullValueHandling = NullValueHandling.Ignore)]
        public Dash GridDash { get; set; }

        [JsonProperty("gridDashOffset", NullValueHandling = NullValueHandling.Ignore)]
        public Aria GridDashOffset { get; set; }

        [JsonProperty("gridOpacity", NullValueHandling = NullValueHandling.Ignore)]
        public GridOpacityClass GridOpacity { get; set; }

        [JsonProperty("gridWidth", NullValueHandling = NullValueHandling.Ignore)]
        public FontSize GridWidth { get; set; }

        [JsonProperty("labelAlign", NullValueHandling = NullValueHandling.Ignore)]
        public BlendClass LabelAlign { get; set; }

        [JsonProperty("labelAngle", NullValueHandling = NullValueHandling.Ignore)]
        public GridOpacityClass LabelAngle { get; set; }

        [JsonProperty("labelBaseline", NullValueHandling = NullValueHandling.Ignore)]
        public BlendClass LabelBaseline { get; set; }

        [JsonProperty("labelBound", NullValueHandling = NullValueHandling.Ignore)]
        public LabelBound LabelBound { get; set; }

        [JsonProperty("labelColor", NullValueHandling = NullValueHandling.Ignore)]
        public Shape LabelColor { get; set; }

        [JsonProperty("labelExpr", NullValueHandling = NullValueHandling.Ignore)]
        public Clip LabelExpr { get; set; }

        [JsonProperty("labelFlush", NullValueHandling = NullValueHandling.Ignore)]
        public Order LabelFlush { get; set; }

        [JsonProperty("labelFlushOffset", NullValueHandling = NullValueHandling.Ignore)]
        public Aria LabelFlushOffset { get; set; }

        [JsonProperty("labelFont", NullValueHandling = NullValueHandling.Ignore)]
        public Aria LabelFont { get; set; }

        [JsonProperty("labelFontSize", NullValueHandling = NullValueHandling.Ignore)]
        public FontSize LabelFontSize { get; set; }

        [JsonProperty("labelFontStyle", NullValueHandling = NullValueHandling.Ignore)]
        public BlendClass LabelFontStyle { get; set; }

        [JsonProperty("labelFontWeight", NullValueHandling = NullValueHandling.Ignore)]
        public BlendClass LabelFontWeight { get; set; }

        [JsonProperty("labelLimit", NullValueHandling = NullValueHandling.Ignore)]
        public Aria LabelLimit { get; set; }

        [JsonProperty("labelLineHeight", NullValueHandling = NullValueHandling.Ignore)]
        public Aria LabelLineHeight { get; set; }

        [JsonProperty("labelOffset", NullValueHandling = NullValueHandling.Ignore)]
        public Aria LabelOffset { get; set; }

        [JsonProperty("labelOpacity", NullValueHandling = NullValueHandling.Ignore)]
        public Aria LabelOpacity { get; set; }

        [JsonProperty("labelOverlap", NullValueHandling = NullValueHandling.Ignore)]
        public NormalizedSpec LabelOverlap { get; set; }

        [JsonProperty("labelPadding", NullValueHandling = NullValueHandling.Ignore)]
        public Aria LabelPadding { get; set; }

        [JsonProperty("labelSeparation", NullValueHandling = NullValueHandling.Ignore)]
        public Aria LabelSeparation { get; set; }

        [JsonProperty("labels", NullValueHandling = NullValueHandling.Ignore)]
        public Aria Labels { get; set; }

        [JsonProperty("maxExtent", NullValueHandling = NullValueHandling.Ignore)]
        public Aria MaxExtent { get; set; }

        [JsonProperty("minExtent", NullValueHandling = NullValueHandling.Ignore)]
        public Aria MinExtent { get; set; }

        [JsonProperty("offset", NullValueHandling = NullValueHandling.Ignore)]
        public Clip Offset { get; set; }

        [JsonProperty("orient", NullValueHandling = NullValueHandling.Ignore)]
        public NormalizedSpec Orient { get; set; }

        [JsonProperty("position", NullValueHandling = NullValueHandling.Ignore)]
        public CornerRadiusEnd Position { get; set; }

        [JsonProperty("style", NullValueHandling = NullValueHandling.Ignore)]
        public Style Style { get; set; }

        [JsonProperty("tickBand", NullValueHandling = NullValueHandling.Ignore)]
        public TickBand TickBand { get; set; }

        [JsonProperty("tickCap", NullValueHandling = NullValueHandling.Ignore)]
        public BlendClass TickCap { get; set; }

        [JsonProperty("tickColor", NullValueHandling = NullValueHandling.Ignore)]
        public Shape TickColor { get; set; }

        [JsonProperty("tickCount", NullValueHandling = NullValueHandling.Ignore)]
        public Month TickCount { get; set; }

        [JsonProperty("tickDash", NullValueHandling = NullValueHandling.Ignore)]
        public Dash TickDash { get; set; }

        [JsonProperty("tickDashOffset", NullValueHandling = NullValueHandling.Ignore)]
        public Aria TickDashOffset { get; set; }

        [JsonProperty("tickExtra", NullValueHandling = NullValueHandling.Ignore)]
        public Aria TickExtra { get; set; }

        [JsonProperty("tickMinStep", NullValueHandling = NullValueHandling.Ignore)]
        public CornerRadiusEnd TickMinStep { get; set; }

        [JsonProperty("tickOffset", NullValueHandling = NullValueHandling.Ignore)]
        public Aria TickOffset { get; set; }

        [JsonProperty("tickOpacity", NullValueHandling = NullValueHandling.Ignore)]
        public Aria TickOpacity { get; set; }

        [JsonProperty("tickRound", NullValueHandling = NullValueHandling.Ignore)]
        public Aria TickRound { get; set; }

        [JsonProperty("tickSize", NullValueHandling = NullValueHandling.Ignore)]
        public FontSize TickSize { get; set; }

        [JsonProperty("tickWidth", NullValueHandling = NullValueHandling.Ignore)]
        public FontSize TickWidth { get; set; }

        [JsonProperty("ticks", NullValueHandling = NullValueHandling.Ignore)]
        public Aria Ticks { get; set; }

        [JsonProperty("title", NullValueHandling = NullValueHandling.Ignore)]
        public CornerRadiusEnd Title { get; set; }

        [JsonProperty("titleAlign", NullValueHandling = NullValueHandling.Ignore)]
        public BlendClass TitleAlign { get; set; }

        [JsonProperty("titleAnchor", NullValueHandling = NullValueHandling.Ignore)]
        public BlendClass TitleAnchor { get; set; }

        [JsonProperty("titleAngle", NullValueHandling = NullValueHandling.Ignore)]
        public Aria TitleAngle { get; set; }

        [JsonProperty("titleBaseline", NullValueHandling = NullValueHandling.Ignore)]
        public BlendClass TitleBaseline { get; set; }

        [JsonProperty("titleColor", NullValueHandling = NullValueHandling.Ignore)]
        public Shape TitleColor { get; set; }

        [JsonProperty("titleFont", NullValueHandling = NullValueHandling.Ignore)]
        public Aria TitleFont { get; set; }

        [JsonProperty("titleFontSize", NullValueHandling = NullValueHandling.Ignore)]
        public FontSize TitleFontSize { get; set; }

        [JsonProperty("titleFontStyle", NullValueHandling = NullValueHandling.Ignore)]
        public BlendClass TitleFontStyle { get; set; }

        [JsonProperty("titleFontWeight", NullValueHandling = NullValueHandling.Ignore)]
        public BlendClass TitleFontWeight { get; set; }

        [JsonProperty("titleLimit", NullValueHandling = NullValueHandling.Ignore)]
        public FontSize TitleLimit { get; set; }

        [JsonProperty("titleLineHeight", NullValueHandling = NullValueHandling.Ignore)]
        public Aria TitleLineHeight { get; set; }

        [JsonProperty("titleOpacity", NullValueHandling = NullValueHandling.Ignore)]
        public Aria TitleOpacity { get; set; }

        [JsonProperty("titlePadding", NullValueHandling = NullValueHandling.Ignore)]
        public Aria TitlePadding { get; set; }

        [JsonProperty("titleX", NullValueHandling = NullValueHandling.Ignore)]
        public Aria TitleX { get; set; }

        [JsonProperty("titleY", NullValueHandling = NullValueHandling.Ignore)]
        public Aria TitleY { get; set; }

        [JsonProperty("translate", NullValueHandling = NullValueHandling.Ignore)]
        public Aria Translate { get; set; }

        [JsonProperty("values", NullValueHandling = NullValueHandling.Ignore)]
        public Values Values { get; set; }

        [JsonProperty("zindex", NullValueHandling = NullValueHandling.Ignore)]
        public BandSize Zindex { get; set; }

        [JsonProperty("disable", NullValueHandling = NullValueHandling.Ignore)]
        public Clip Disable { get; set; }
    }

    public partial class LabelBound
    {
        [JsonProperty("anyOf", NullValueHandling = NullValueHandling.Ignore)]
        public List<LabelBoundAnyOf> AnyOf { get; set; }
    }

    public partial class LabelBoundAnyOf
    {
        [JsonProperty("description", NullValueHandling = NullValueHandling.Ignore)]
        public string Description { get; set; }

        [JsonProperty("type", NullValueHandling = NullValueHandling.Ignore)]
        public List<TypeEnum> Type { get; set; }

        [JsonProperty("$ref", NullValueHandling = NullValueHandling.Ignore)]
        public DayRef? Ref { get; set; }
    }

    public partial class TickBand
    {
        [JsonProperty("anyOf", NullValueHandling = NullValueHandling.Ignore)]
        public List<Mark> AnyOf { get; set; }
    }

    public partial class Month
    {
        [JsonProperty("anyOf", NullValueHandling = NullValueHandling.Ignore)]
        public List<AnyOf> AnyOf { get; set; }

        [JsonProperty("description", NullValueHandling = NullValueHandling.Ignore)]
        public string Description { get; set; }

        [JsonProperty("maximum", NullValueHandling = NullValueHandling.Ignore)]
        public long? Maximum { get; set; }

        [JsonProperty("minimum", NullValueHandling = NullValueHandling.Ignore)]
        public long? Minimum { get; set; }

        [JsonProperty("type", NullValueHandling = NullValueHandling.Ignore)]
        public TypeEnum? Type { get; set; }

        [JsonProperty("$ref", NullValueHandling = NullValueHandling.Ignore)]
        public MonthRef? Ref { get; set; }

        [JsonProperty("items", NullValueHandling = NullValueHandling.Ignore)]
        public Element Items { get; set; }
    }

    public partial class Values
    {
        [JsonProperty("anyOf", NullValueHandling = NullValueHandling.Ignore)]
        public List<ValuesAnyOf> AnyOf { get; set; }

        [JsonProperty("description", NullValueHandling = NullValueHandling.Ignore)]
        public string Description { get; set; }
    }

    public partial class ValuesAnyOf
    {
        [JsonProperty("items", NullValueHandling = NullValueHandling.Ignore)]
        public AnyOf Items { get; set; }

        [JsonProperty("type", NullValueHandling = NullValueHandling.Ignore)]
        public TypeEnum? Type { get; set; }

        [JsonProperty("$ref", NullValueHandling = NullValueHandling.Ignore)]
        public DayRef? Ref { get; set; }
    }

    public partial class AxisResolveMap
    {
        [JsonProperty("additionalProperties", NullValueHandling = NullValueHandling.Ignore)]
        public bool? AdditionalProperties { get; set; }

        [JsonProperty("properties", NullValueHandling = NullValueHandling.Ignore)]
        public AxisResolveMapProperties Properties { get; set; }

        [JsonProperty("type", NullValueHandling = NullValueHandling.Ignore)]
        public TypeEnum? Type { get; set; }
    }

    public partial class AxisResolveMapProperties
    {
        [JsonProperty("x", NullValueHandling = NullValueHandling.Ignore)]
        public ColorDef X { get; set; }

        [JsonProperty("y", NullValueHandling = NullValueHandling.Ignore)]
        public ColorDef Y { get; set; }
    }

    public partial class BaseTitleNoValueRefs
    {
        [JsonProperty("additionalProperties", NullValueHandling = NullValueHandling.Ignore)]
        public bool? AdditionalProperties { get; set; }

        [JsonProperty("properties", NullValueHandling = NullValueHandling.Ignore)]
        public BaseTitleNoValueRefsProperties Properties { get; set; }

        [JsonProperty("type", NullValueHandling = NullValueHandling.Ignore)]
        public TypeEnum? Type { get; set; }
    }

    public partial class BaseTitleNoValueRefsProperties
    {
        [JsonProperty("align", NullValueHandling = NullValueHandling.Ignore)]
        public FieldDefWithoutScale Align { get; set; }

        [JsonProperty("anchor", NullValueHandling = NullValueHandling.Ignore)]
        public BlendClass Anchor { get; set; }

        [JsonProperty("angle", NullValueHandling = NullValueHandling.Ignore)]
        public Aria Angle { get; set; }

        [JsonProperty("aria", NullValueHandling = NullValueHandling.Ignore)]
        public Aria Aria { get; set; }

        [JsonProperty("baseline", NullValueHandling = NullValueHandling.Ignore)]
        public FieldDefWithoutScale Baseline { get; set; }

        [JsonProperty("color", NullValueHandling = NullValueHandling.Ignore)]
        public Shape Color { get; set; }

        [JsonProperty("dx", NullValueHandling = NullValueHandling.Ignore)]
        public Aria Dx { get; set; }

        [JsonProperty("dy", NullValueHandling = NullValueHandling.Ignore)]
        public Aria Dy { get; set; }

        [JsonProperty("font", NullValueHandling = NullValueHandling.Ignore)]
        public Aria Font { get; set; }

        [JsonProperty("fontSize", NullValueHandling = NullValueHandling.Ignore)]
        public FontSize FontSize { get; set; }

        [JsonProperty("fontStyle", NullValueHandling = NullValueHandling.Ignore)]
        public BlendClass FontStyle { get; set; }

        [JsonProperty("fontWeight", NullValueHandling = NullValueHandling.Ignore)]
        public BlendClass FontWeight { get; set; }

        [JsonProperty("frame", NullValueHandling = NullValueHandling.Ignore)]
        public Shape Frame { get; set; }

        [JsonProperty("limit", NullValueHandling = NullValueHandling.Ignore)]
        public FontSize Limit { get; set; }

        [JsonProperty("lineHeight", NullValueHandling = NullValueHandling.Ignore)]
        public Aria LineHeight { get; set; }

        [JsonProperty("offset", NullValueHandling = NullValueHandling.Ignore)]
        public Aria Offset { get; set; }

        [JsonProperty("orient", NullValueHandling = NullValueHandling.Ignore)]
        public BlendClass Orient { get; set; }

        [JsonProperty("subtitleColor", NullValueHandling = NullValueHandling.Ignore)]
        public Shape SubtitleColor { get; set; }

        [JsonProperty("subtitleFont", NullValueHandling = NullValueHandling.Ignore)]
        public Aria SubtitleFont { get; set; }

        [JsonProperty("subtitleFontSize", NullValueHandling = NullValueHandling.Ignore)]
        public FontSize SubtitleFontSize { get; set; }

        [JsonProperty("subtitleFontStyle", NullValueHandling = NullValueHandling.Ignore)]
        public BlendClass SubtitleFontStyle { get; set; }

        [JsonProperty("subtitleFontWeight", NullValueHandling = NullValueHandling.Ignore)]
        public BlendClass SubtitleFontWeight { get; set; }

        [JsonProperty("subtitleLineHeight", NullValueHandling = NullValueHandling.Ignore)]
        public Aria SubtitleLineHeight { get; set; }

        [JsonProperty("subtitlePadding", NullValueHandling = NullValueHandling.Ignore)]
        public Aria SubtitlePadding { get; set; }

        [JsonProperty("zindex", NullValueHandling = NullValueHandling.Ignore)]
        public FontSize Zindex { get; set; }
    }

    public partial class BinExtent
    {
        [JsonProperty("anyOf", NullValueHandling = NullValueHandling.Ignore)]
        public List<Vector2Boolean> AnyOf { get; set; }
    }

    public partial class Vector2Boolean
    {
        [JsonProperty("items", NullValueHandling = NullValueHandling.Ignore)]
        public List<Element> Items { get; set; }

        [JsonProperty("maxItems", NullValueHandling = NullValueHandling.Ignore)]
        public long? MaxItems { get; set; }

        [JsonProperty("minItems", NullValueHandling = NullValueHandling.Ignore)]
        public long? MinItems { get; set; }

        [JsonProperty("type", NullValueHandling = NullValueHandling.Ignore)]
        public TypeEnum? Type { get; set; }

        [JsonProperty("$ref", NullValueHandling = NullValueHandling.Ignore)]
        public string Ref { get; set; }

        [JsonProperty("description", NullValueHandling = NullValueHandling.Ignore)]
        public string Description { get; set; }
    }

    public partial class BinParams
    {
        [JsonProperty("additionalProperties", NullValueHandling = NullValueHandling.Ignore)]
        public bool? AdditionalProperties { get; set; }

        [JsonProperty("description", NullValueHandling = NullValueHandling.Ignore)]
        public string Description { get; set; }

        [JsonProperty("properties", NullValueHandling = NullValueHandling.Ignore)]
        public BinParamsProperties Properties { get; set; }

        [JsonProperty("type", NullValueHandling = NullValueHandling.Ignore)]
        public TypeEnum? Type { get; set; }
    }

    public partial class BinParamsProperties
    {
        [JsonProperty("anchor", NullValueHandling = NullValueHandling.Ignore)]
        public Clip Anchor { get; set; }

        [JsonProperty("base", NullValueHandling = NullValueHandling.Ignore)]
        public Clip Base { get; set; }

        [JsonProperty("binned", NullValueHandling = NullValueHandling.Ignore)]
        public Clip Binned { get; set; }

        [JsonProperty("divide", NullValueHandling = NullValueHandling.Ignore)]
        public Vector2Boolean Divide { get; set; }

        [JsonProperty("extent", NullValueHandling = NullValueHandling.Ignore)]
        public FieldDefWithoutScale Extent { get; set; }

        [JsonProperty("maxbins", NullValueHandling = NullValueHandling.Ignore)]
        public Day Maxbins { get; set; }

        [JsonProperty("minstep", NullValueHandling = NullValueHandling.Ignore)]
        public Clip Minstep { get; set; }

        [JsonProperty("nice", NullValueHandling = NullValueHandling.Ignore)]
        public Clip Nice { get; set; }

        [JsonProperty("step", NullValueHandling = NullValueHandling.Ignore)]
        public Clip Step { get; set; }

        [JsonProperty("steps", NullValueHandling = NullValueHandling.Ignore)]
        public Day Steps { get; set; }
    }

    public partial class Day
    {
        [JsonProperty("description", NullValueHandling = NullValueHandling.Ignore)]
        public string Description { get; set; }

        [JsonProperty("type", NullValueHandling = NullValueHandling.Ignore)]
        public TypeEnum? Type { get; set; }

        [JsonProperty("$ref", NullValueHandling = NullValueHandling.Ignore)]
        public DayRef? Ref { get; set; }

        [JsonProperty("minimum", NullValueHandling = NullValueHandling.Ignore)]
        public long? Minimum { get; set; }

        [JsonProperty("items", NullValueHandling = NullValueHandling.Ignore)]
        public Element Items { get; set; }

        [JsonProperty("maximum", NullValueHandling = NullValueHandling.Ignore)]
        public long? Maximum { get; set; }

        [JsonProperty("minItems", NullValueHandling = NullValueHandling.Ignore)]
        public long? MinItems { get; set; }

        [JsonProperty("anyOf", NullValueHandling = NullValueHandling.Ignore)]
        public List<AnyOf> AnyOf { get; set; }
    }

    public partial class BinTransform
    {
        [JsonProperty("additionalProperties", NullValueHandling = NullValueHandling.Ignore)]
        public bool? AdditionalProperties { get; set; }

        [JsonProperty("properties", NullValueHandling = NullValueHandling.Ignore)]
        public BinTransformProperties Properties { get; set; }

        [JsonProperty("required", NullValueHandling = NullValueHandling.Ignore)]
        public List<string> BinTransformRequired { get; set; }

        [JsonProperty("type", NullValueHandling = NullValueHandling.Ignore)]
        public TypeEnum? Type { get; set; }
    }

    public partial class BinTransformProperties
    {
        [JsonProperty("as", NullValueHandling = NullValueHandling.Ignore)]
        public AsElement As { get; set; }

        [JsonProperty("bin", NullValueHandling = NullValueHandling.Ignore)]
        public Bin Bin { get; set; }

        [JsonProperty("field", NullValueHandling = NullValueHandling.Ignore)]
        public FieldDefWithoutScale Field { get; set; }
    }

    public partial class AsElement
    {
        [JsonProperty("anyOf", NullValueHandling = NullValueHandling.Ignore)]
        public List<AsAnyOf> AnyOf { get; set; }

        [JsonProperty("description", NullValueHandling = NullValueHandling.Ignore)]
        public string Description { get; set; }
    }

    public partial class AsAnyOf
    {
        [JsonProperty("$ref", NullValueHandling = NullValueHandling.Ignore)]
        public string Ref { get; set; }

        [JsonProperty("items", NullValueHandling = NullValueHandling.Ignore)]
        public ColorDef Items { get; set; }

        [JsonProperty("type", NullValueHandling = NullValueHandling.Ignore)]
        public TypeEnum? Type { get; set; }
    }

    public partial class Bin
    {
        [JsonProperty("anyOf", NullValueHandling = NullValueHandling.Ignore)]
        public List<GraticuleAnyOf> AnyOf { get; set; }

        [JsonProperty("description", NullValueHandling = NullValueHandling.Ignore)]
        public string Description { get; set; }
    }

    public partial class GraticuleAnyOf
    {
        [JsonProperty("const", NullValueHandling = NullValueHandling.Ignore)]
        public bool? Const { get; set; }

        [JsonProperty("type", NullValueHandling = NullValueHandling.Ignore)]
        public TypeEnum? Type { get; set; }

        [JsonProperty("$ref", NullValueHandling = NullValueHandling.Ignore)]
        public string Ref { get; set; }
    }

    public partial class BindCheckbox
    {
        [JsonProperty("additionalProperties", NullValueHandling = NullValueHandling.Ignore)]
        public bool? AdditionalProperties { get; set; }

        [JsonProperty("properties", NullValueHandling = NullValueHandling.Ignore)]
        public BindCheckboxProperties Properties { get; set; }

        [JsonProperty("required", NullValueHandling = NullValueHandling.Ignore)]
        public List<string> BindCheckboxRequired { get; set; }

        [JsonProperty("type", NullValueHandling = NullValueHandling.Ignore)]
        public TypeEnum? Type { get; set; }
    }

    public partial class BindCheckboxProperties
    {
        [JsonProperty("debounce", NullValueHandling = NullValueHandling.Ignore)]
        public Element Debounce { get; set; }

        [JsonProperty("element", NullValueHandling = NullValueHandling.Ignore)]
        public ColorDef Element { get; set; }

        [JsonProperty("input", NullValueHandling = NullValueHandling.Ignore)]
        public BoxPlot Input { get; set; }

        [JsonProperty("name", NullValueHandling = NullValueHandling.Ignore)]
        public Element Name { get; set; }

        [JsonProperty("type", NullValueHandling = NullValueHandling.Ignore)]
        public Element Type { get; set; }
    }

    public partial class BoxPlot
    {
        [JsonProperty("const", NullValueHandling = NullValueHandling.Ignore)]
        public string Const { get; set; }

        [JsonProperty("type", NullValueHandling = NullValueHandling.Ignore)]
        public TypeEnum? Type { get; set; }
    }

    public partial class BindRadioSelect
    {
        [JsonProperty("additionalProperties", NullValueHandling = NullValueHandling.Ignore)]
        public bool? AdditionalProperties { get; set; }

        [JsonProperty("properties", NullValueHandling = NullValueHandling.Ignore)]
        public BindRadioSelectProperties Properties { get; set; }

        [JsonProperty("required", NullValueHandling = NullValueHandling.Ignore)]
        public List<string> BindRadioSelectRequired { get; set; }

        [JsonProperty("type", NullValueHandling = NullValueHandling.Ignore)]
        public TypeEnum? Type { get; set; }
    }

    public partial class BindRadioSelectProperties
    {
        [JsonProperty("debounce", NullValueHandling = NullValueHandling.Ignore)]
        public Element Debounce { get; set; }

        [JsonProperty("element", NullValueHandling = NullValueHandling.Ignore)]
        public ColorDef Element { get; set; }

        [JsonProperty("input", NullValueHandling = NullValueHandling.Ignore)]
        public AggregateOp Input { get; set; }

        [JsonProperty("labels", NullValueHandling = NullValueHandling.Ignore)]
        public RangeRawArray Labels { get; set; }

        [JsonProperty("name", NullValueHandling = NullValueHandling.Ignore)]
        public Element Name { get; set; }

        [JsonProperty("options", NullValueHandling = NullValueHandling.Ignore)]
        public Options Options { get; set; }

        [JsonProperty("type", NullValueHandling = NullValueHandling.Ignore)]
        public Element Type { get; set; }
    }

    public partial class Options
    {
        [JsonProperty("items", NullValueHandling = NullValueHandling.Ignore)]
        public GeoJsonFeature Items { get; set; }

        [JsonProperty("type", NullValueHandling = NullValueHandling.Ignore)]
        public TypeEnum? Type { get; set; }
    }

    public partial class GeoJsonFeature
    {
    }

    public partial class BindRange
    {
        [JsonProperty("additionalProperties", NullValueHandling = NullValueHandling.Ignore)]
        public bool? AdditionalProperties { get; set; }

        [JsonProperty("properties", NullValueHandling = NullValueHandling.Ignore)]
        public BindRangeProperties Properties { get; set; }

        [JsonProperty("required", NullValueHandling = NullValueHandling.Ignore)]
        public List<string> BindRangeRequired { get; set; }

        [JsonProperty("type", NullValueHandling = NullValueHandling.Ignore)]
        public TypeEnum? Type { get; set; }
    }

    public partial class BindRangeProperties
    {
        [JsonProperty("debounce", NullValueHandling = NullValueHandling.Ignore)]
        public Element Debounce { get; set; }

        [JsonProperty("element", NullValueHandling = NullValueHandling.Ignore)]
        public ColorDef Element { get; set; }

        [JsonProperty("input", NullValueHandling = NullValueHandling.Ignore)]
        public BoxPlot Input { get; set; }

        [JsonProperty("max", NullValueHandling = NullValueHandling.Ignore)]
        public Element Max { get; set; }

        [JsonProperty("min", NullValueHandling = NullValueHandling.Ignore)]
        public Element Min { get; set; }

        [JsonProperty("name", NullValueHandling = NullValueHandling.Ignore)]
        public Element Name { get; set; }

        [JsonProperty("step", NullValueHandling = NullValueHandling.Ignore)]
        public Element Step { get; set; }

        [JsonProperty("type", NullValueHandling = NullValueHandling.Ignore)]
        public Element Type { get; set; }
    }

    public partial class TitleAnchorClass
    {
        [JsonProperty("enum", NullValueHandling = NullValueHandling.Ignore)]
        public List<string> Enum { get; set; }

        [JsonProperty("type", NullValueHandling = NullValueHandling.Ignore)]
        public List<TypeEnum> Type { get; set; }
    }

    public partial class BoxPlotConfig
    {
        [JsonProperty("additionalProperties", NullValueHandling = NullValueHandling.Ignore)]
        public bool? AdditionalProperties { get; set; }

        [JsonProperty("properties", NullValueHandling = NullValueHandling.Ignore)]
        public BoxPlotConfigProperties Properties { get; set; }

        [JsonProperty("type", NullValueHandling = NullValueHandling.Ignore)]
        public TypeEnum? Type { get; set; }
    }

    public partial class BoxPlotConfigProperties
    {
        [JsonProperty("box", NullValueHandling = NullValueHandling.Ignore)]
        public Color Box { get; set; }

        [JsonProperty("extent", NullValueHandling = NullValueHandling.Ignore)]
        public Extent Extent { get; set; }

        [JsonProperty("median", NullValueHandling = NullValueHandling.Ignore)]
        public Color Median { get; set; }

        [JsonProperty("outliers", NullValueHandling = NullValueHandling.Ignore)]
        public Color Outliers { get; set; }

        [JsonProperty("rule", NullValueHandling = NullValueHandling.Ignore)]
        public Color Rule { get; set; }

        [JsonProperty("size", NullValueHandling = NullValueHandling.Ignore)]
        public Clip Size { get; set; }

        [JsonProperty("ticks", NullValueHandling = NullValueHandling.Ignore)]
        public Color Ticks { get; set; }
    }

    public partial class Color
    {
        [JsonProperty("anyOf", NullValueHandling = NullValueHandling.Ignore)]
        public List<AnyOf> AnyOf { get; set; }
    }

    public partial class Extent
    {
        [JsonProperty("anyOf", NullValueHandling = NullValueHandling.Ignore)]
        public List<BoxPlot> AnyOf { get; set; }

        [JsonProperty("description", NullValueHandling = NullValueHandling.Ignore)]
        public string Description { get; set; }
    }

    public partial class BoxPlotDef
    {
        [JsonProperty("additionalProperties", NullValueHandling = NullValueHandling.Ignore)]
        public bool? AdditionalProperties { get; set; }

        [JsonProperty("properties", NullValueHandling = NullValueHandling.Ignore)]
        public BoxPlotDefProperties Properties { get; set; }

        [JsonProperty("required", NullValueHandling = NullValueHandling.Ignore)]
        public List<string> BoxPlotDefRequired { get; set; }

        [JsonProperty("type", NullValueHandling = NullValueHandling.Ignore)]
        public TypeEnum? Type { get; set; }
    }

    public partial class BoxPlotDefProperties
    {
        [JsonProperty("box", NullValueHandling = NullValueHandling.Ignore)]
        public Color Box { get; set; }

        [JsonProperty("clip", NullValueHandling = NullValueHandling.Ignore)]
        public Clip Clip { get; set; }

        [JsonProperty("color", NullValueHandling = NullValueHandling.Ignore)]
        public NormalizedSpec Color { get; set; }

        [JsonProperty("extent", NullValueHandling = NullValueHandling.Ignore)]
        public Extent Extent { get; set; }

        [JsonProperty("median", NullValueHandling = NullValueHandling.Ignore)]
        public Color Median { get; set; }

        [JsonProperty("opacity", NullValueHandling = NullValueHandling.Ignore)]
        public Clip Opacity { get; set; }

        [JsonProperty("orient", NullValueHandling = NullValueHandling.Ignore)]
        public FieldDefWithoutScale Orient { get; set; }

        [JsonProperty("outliers", NullValueHandling = NullValueHandling.Ignore)]
        public Color Outliers { get; set; }

        [JsonProperty("rule", NullValueHandling = NullValueHandling.Ignore)]
        public Color Rule { get; set; }

        [JsonProperty("size", NullValueHandling = NullValueHandling.Ignore)]
        public Clip Size { get; set; }

        [JsonProperty("ticks", NullValueHandling = NullValueHandling.Ignore)]
        public Color Ticks { get; set; }

        [JsonProperty("type", NullValueHandling = NullValueHandling.Ignore)]
        public FieldDefWithoutScale Type { get; set; }
    }

    public partial class BrushConfig
    {
        [JsonProperty("additionalProperties", NullValueHandling = NullValueHandling.Ignore)]
        public bool? AdditionalProperties { get; set; }

        [JsonProperty("properties", NullValueHandling = NullValueHandling.Ignore)]
        public BrushConfigProperties Properties { get; set; }

        [JsonProperty("type", NullValueHandling = NullValueHandling.Ignore)]
        public TypeEnum? Type { get; set; }
    }

    public partial class BrushConfigProperties
    {
        [JsonProperty("cursor", NullValueHandling = NullValueHandling.Ignore)]
        public FieldDefWithoutScale Cursor { get; set; }

        [JsonProperty("fill", NullValueHandling = NullValueHandling.Ignore)]
        public FieldDefWithoutScale Fill { get; set; }

        [JsonProperty("fillOpacity", NullValueHandling = NullValueHandling.Ignore)]
        public Clip FillOpacity { get; set; }

        [JsonProperty("stroke", NullValueHandling = NullValueHandling.Ignore)]
        public FieldDefWithoutScale Stroke { get; set; }

        [JsonProperty("strokeDash", NullValueHandling = NullValueHandling.Ignore)]
        public Day StrokeDash { get; set; }

        [JsonProperty("strokeDashOffset", NullValueHandling = NullValueHandling.Ignore)]
        public Clip StrokeDashOffset { get; set; }

        [JsonProperty("strokeOpacity", NullValueHandling = NullValueHandling.Ignore)]
        public Clip StrokeOpacity { get; set; }

        [JsonProperty("strokeWidth", NullValueHandling = NullValueHandling.Ignore)]
        public Clip StrokeWidth { get; set; }
    }

    public partial class CalculateTransform
    {
        [JsonProperty("additionalProperties", NullValueHandling = NullValueHandling.Ignore)]
        public bool? AdditionalProperties { get; set; }

        [JsonProperty("properties", NullValueHandling = NullValueHandling.Ignore)]
        public CalculateTransformProperties Properties { get; set; }

        [JsonProperty("required", NullValueHandling = NullValueHandling.Ignore)]
        public List<string> CalculateTransformRequired { get; set; }

        [JsonProperty("type", NullValueHandling = NullValueHandling.Ignore)]
        public TypeEnum? Type { get; set; }
    }

    public partial class CalculateTransformProperties
    {
        [JsonProperty("as", NullValueHandling = NullValueHandling.Ignore)]
        public FieldDefWithoutScale As { get; set; }

        [JsonProperty("calculate", NullValueHandling = NullValueHandling.Ignore)]
        public Clip Calculate { get; set; }
    }

    public partial class CompositionConfig
    {
        [JsonProperty("additionalProperties", NullValueHandling = NullValueHandling.Ignore)]
        public bool? AdditionalProperties { get; set; }

        [JsonProperty("properties", NullValueHandling = NullValueHandling.Ignore)]
        public CompositionConfigProperties Properties { get; set; }

        [JsonProperty("type", NullValueHandling = NullValueHandling.Ignore)]
        public TypeEnum? Type { get; set; }
    }

    public partial class CompositionConfigProperties
    {
        [JsonProperty("columns", NullValueHandling = NullValueHandling.Ignore)]
        public Clip Columns { get; set; }

        [JsonProperty("spacing", NullValueHandling = NullValueHandling.Ignore)]
        public Clip Spacing { get; set; }
    }

    public partial class Spec
    {
        [JsonProperty("additionalProperties", NullValueHandling = NullValueHandling.Ignore)]
        public bool? AdditionalProperties { get; set; }

        [JsonProperty("description", NullValueHandling = NullValueHandling.Ignore)]
        public string Description { get; set; }

        [JsonProperty("properties", NullValueHandling = NullValueHandling.Ignore)]
        public ConcatSpecGenericSpecProperties Properties { get; set; }

        [JsonProperty("required", NullValueHandling = NullValueHandling.Ignore)]
        public List<string> SpecRequired { get; set; }

        [JsonProperty("type", NullValueHandling = NullValueHandling.Ignore)]
        public TypeEnum? Type { get; set; }
    }

    public partial class ConcatSpecGenericSpecProperties
    {
        [JsonProperty("align", NullValueHandling = NullValueHandling.Ignore)]
        public NormalizedSpec Align { get; set; }

        [JsonProperty("bounds", NullValueHandling = NullValueHandling.Ignore)]
        public Mark Bounds { get; set; }

        [JsonProperty("center", NullValueHandling = NullValueHandling.Ignore)]
        public CornerRadiusEnd Center { get; set; }

        [JsonProperty("columns", NullValueHandling = NullValueHandling.Ignore)]
        public Clip Columns { get; set; }

        [JsonProperty("concat", NullValueHandling = NullValueHandling.Ignore)]
        public GroupbyClass Concat { get; set; }

        [JsonProperty("data", NullValueHandling = NullValueHandling.Ignore)]
        public CornerRadiusEnd Data { get; set; }

        [JsonProperty("description", NullValueHandling = NullValueHandling.Ignore)]
        public Clip Description { get; set; }

        [JsonProperty("name", NullValueHandling = NullValueHandling.Ignore)]
        public Clip Name { get; set; }

        [JsonProperty("resolve", NullValueHandling = NullValueHandling.Ignore)]
        public FieldDefWithoutScale Resolve { get; set; }

        [JsonProperty("spacing", NullValueHandling = NullValueHandling.Ignore)]
        public CornerRadiusEnd Spacing { get; set; }

        [JsonProperty("title", NullValueHandling = NullValueHandling.Ignore)]
        public NormalizedSpec Title { get; set; }

        [JsonProperty("transform", NullValueHandling = NullValueHandling.Ignore)]
        public GroupbyClass Transform { get; set; }

        [JsonProperty("facet", NullValueHandling = NullValueHandling.Ignore)]
        public NormalizedSpec Facet { get; set; }

        [JsonProperty("spec", NullValueHandling = NullValueHandling.Ignore)]
        public SpecClass Spec { get; set; }

        [JsonProperty("repeat", NullValueHandling = NullValueHandling.Ignore)]
        public Repeat Repeat { get; set; }
    }

    public partial class Repeat
    {
        [JsonProperty("$ref", NullValueHandling = NullValueHandling.Ignore)]
        public string Ref { get; set; }

        [JsonProperty("description", NullValueHandling = NullValueHandling.Ignore)]
        public string Description { get; set; }

        [JsonProperty("anyOf", NullValueHandling = NullValueHandling.Ignore)]
        public List<Mark> AnyOf { get; set; }
    }

    public partial class SpecClass
    {
        [JsonProperty("anyOf", NullValueHandling = NullValueHandling.Ignore)]
        public List<ColorDef> AnyOf { get; set; }

        [JsonProperty("description", NullValueHandling = NullValueHandling.Ignore)]
        public string Description { get; set; }

        [JsonProperty("$ref", NullValueHandling = NullValueHandling.Ignore)]
        public string Ref { get; set; }
    }

    public partial class ConditionalAxisPropertyAlignNullClass
    {
        [JsonProperty("anyOf", NullValueHandling = NullValueHandling.Ignore)]
        public List<ConditionalAxisPropertyAlignNullAnyOf> AnyOf { get; set; }
    }

    public partial class ConditionalAxisPropertyAlignNullAnyOf
    {
        [JsonProperty("additionalProperties", NullValueHandling = NullValueHandling.Ignore)]
        public bool? AdditionalProperties { get; set; }

        [JsonProperty("properties", NullValueHandling = NullValueHandling.Ignore)]
        public PurpleProperties Properties { get; set; }

        [JsonProperty("required", NullValueHandling = NullValueHandling.Ignore)]
        public List<ExprRefRequired> AnyOfRequired { get; set; }

        [JsonProperty("type", NullValueHandling = NullValueHandling.Ignore)]
        public TypeEnum? Type { get; set; }
    }

    public partial class PurpleProperties
    {
        [JsonProperty("condition", NullValueHandling = NullValueHandling.Ignore)]
        public Fit Condition { get; set; }

        [JsonProperty("value", NullValueHandling = NullValueHandling.Ignore)]
        public CornerRadiusEnd Value { get; set; }

        [JsonProperty("expr", NullValueHandling = NullValueHandling.Ignore)]
        public Clip Expr { get; set; }
    }

    public partial class Fit
    {
        [JsonProperty("anyOf", NullValueHandling = NullValueHandling.Ignore)]
        public List<AsAnyOf> AnyOf { get; set; }
    }

    public partial class ConditionalAxisPropertyNumberNull
    {
        [JsonProperty("anyOf", NullValueHandling = NullValueHandling.Ignore)]
        public List<ConditionalAxisPropertyNumberNullAnyOf> AnyOf { get; set; }
    }

    public partial class ConditionalAxisPropertyNumberNullAnyOf
    {
        [JsonProperty("additionalProperties", NullValueHandling = NullValueHandling.Ignore)]
        public bool? AdditionalProperties { get; set; }

        [JsonProperty("properties", NullValueHandling = NullValueHandling.Ignore)]
        public FluffyProperties Properties { get; set; }

        [JsonProperty("required", NullValueHandling = NullValueHandling.Ignore)]
        public List<ExprRefRequired> AnyOfRequired { get; set; }

        [JsonProperty("type", NullValueHandling = NullValueHandling.Ignore)]
        public TypeEnum? Type { get; set; }
    }

    public partial class FluffyProperties
    {
        [JsonProperty("condition", NullValueHandling = NullValueHandling.Ignore)]
        public Fit Condition { get; set; }

        [JsonProperty("value", NullValueHandling = NullValueHandling.Ignore)]
        public Style Value { get; set; }

        [JsonProperty("expr", NullValueHandling = NullValueHandling.Ignore)]
        public Clip Expr { get; set; }
    }

    public partial class ConditionalAxisPropertyNumberNullClass
    {
        [JsonProperty("anyOf", NullValueHandling = NullValueHandling.Ignore)]
        public List<ConditionalAxisPropertyStringNullAnyOf> AnyOf { get; set; }
    }

    public partial class ConditionalAxisPropertyStringNullAnyOf
    {
        [JsonProperty("additionalProperties", NullValueHandling = NullValueHandling.Ignore)]
        public bool? AdditionalProperties { get; set; }

        [JsonProperty("properties", NullValueHandling = NullValueHandling.Ignore)]
        public TentacledProperties Properties { get; set; }

        [JsonProperty("required", NullValueHandling = NullValueHandling.Ignore)]
        public List<ExprRefRequired> AnyOfRequired { get; set; }

        [JsonProperty("type", NullValueHandling = NullValueHandling.Ignore)]
        public TypeEnum? Type { get; set; }
    }

    public partial class TentacledProperties
    {
        [JsonProperty("condition", NullValueHandling = NullValueHandling.Ignore)]
        public Fit Condition { get; set; }

        [JsonProperty("value", NullValueHandling = NullValueHandling.Ignore)]
        public Order Value { get; set; }

        [JsonProperty("expr", NullValueHandling = NullValueHandling.Ignore)]
        public Clip Expr { get; set; }
    }

    public partial class Conditional
    {
        [JsonProperty("anyOf", NullValueHandling = NullValueHandling.Ignore)]
        public List<ConditionalPredicateMarkPropFieldOrDatumDefTypeForShapeAnyOf> AnyOf { get; set; }
    }

    public partial class ConditionalPredicateMarkPropFieldOrDatumDefTypeForShapeAnyOf
    {
        [JsonProperty("additionalProperties", NullValueHandling = NullValueHandling.Ignore)]
        public bool? AdditionalProperties { get; set; }

        [JsonProperty("properties", NullValueHandling = NullValueHandling.Ignore)]
        public FieldOrDatumDefWithConditionMarkPropFieldDefGradientStringNullProperties Properties { get; set; }

        [JsonProperty("required", NullValueHandling = NullValueHandling.Ignore)]
        public List<string> AnyOfRequired { get; set; }

        [JsonProperty("type", NullValueHandling = NullValueHandling.Ignore)]
        public TypeEnum? Type { get; set; }
    }

    public partial class FieldOrDatumDefWithConditionMarkPropFieldDefGradientStringNullProperties
    {
        [JsonProperty("aggregate", NullValueHandling = NullValueHandling.Ignore)]
        public FieldDefWithoutScale Aggregate { get; set; }

        [JsonProperty("band", NullValueHandling = NullValueHandling.Ignore)]
        public Band Band { get; set; }

        [JsonProperty("bin", NullValueHandling = NullValueHandling.Ignore)]
        public CornerRadiusEnd Bin { get; set; }

        [JsonProperty("field", NullValueHandling = NullValueHandling.Ignore)]
        public FieldDefWithoutScale Field { get; set; }

        [JsonProperty("legend", NullValueHandling = NullValueHandling.Ignore)]
        public CornerRadiusEnd Legend { get; set; }

        [JsonProperty("scale", NullValueHandling = NullValueHandling.Ignore)]
        public CornerRadiusEnd Scale { get; set; }

        [JsonProperty("sort", NullValueHandling = NullValueHandling.Ignore)]
        public FieldDefWithoutScale Sort { get; set; }

        [JsonProperty("test", NullValueHandling = NullValueHandling.Ignore)]
        public FieldDefWithoutScale Test { get; set; }

        [JsonProperty("timeUnit", NullValueHandling = NullValueHandling.Ignore)]
        public NormalizedSpec TimeUnit { get; set; }

        [JsonProperty("title", NullValueHandling = NullValueHandling.Ignore)]
        public CornerRadiusEnd Title { get; set; }

        [JsonProperty("type", NullValueHandling = NullValueHandling.Ignore)]
        public FieldDefWithoutScale Type { get; set; }

        [JsonProperty("datum", NullValueHandling = NullValueHandling.Ignore)]
        public NormalizedSpec Datum { get; set; }

        [JsonProperty("selection", NullValueHandling = NullValueHandling.Ignore)]
        public FieldDefWithoutScale Selection { get; set; }

        [JsonProperty("condition", NullValueHandling = NullValueHandling.Ignore)]
        public AsElement Condition { get; set; }
    }

    public partial class Band
    {
        [JsonProperty("description", NullValueHandling = NullValueHandling.Ignore)]
        public string Description { get; set; }

        [JsonProperty("maximum", NullValueHandling = NullValueHandling.Ignore)]
        public long? Maximum { get; set; }

        [JsonProperty("minimum", NullValueHandling = NullValueHandling.Ignore)]
        public long? Minimum { get; set; }

        [JsonProperty("type", NullValueHandling = NullValueHandling.Ignore)]
        public TypeEnum? Type { get; set; }
    }

    public partial class ConditionalStringFieldDef
    {
        [JsonProperty("additionalProperties", NullValueHandling = NullValueHandling.Ignore)]
        public bool? AdditionalProperties { get; set; }

        [JsonProperty("properties", NullValueHandling = NullValueHandling.Ignore)]
        public ConditionalPredicateStringFieldDefProperties Properties { get; set; }

        [JsonProperty("required", NullValueHandling = NullValueHandling.Ignore)]
        public List<string> ConditionalStringFieldDefRequired { get; set; }

        [JsonProperty("type", NullValueHandling = NullValueHandling.Ignore)]
        public TypeEnum? Type { get; set; }
    }

    public partial class ConditionalPredicateStringFieldDefProperties
    {
        [JsonProperty("aggregate", NullValueHandling = NullValueHandling.Ignore)]
        public FieldDefWithoutScale Aggregate { get; set; }

        [JsonProperty("band", NullValueHandling = NullValueHandling.Ignore)]
        public Band Band { get; set; }

        [JsonProperty("bin", NullValueHandling = NullValueHandling.Ignore)]
        public Point Bin { get; set; }

        [JsonProperty("field", NullValueHandling = NullValueHandling.Ignore)]
        public FieldDefWithoutScale Field { get; set; }

        [JsonProperty("format", NullValueHandling = NullValueHandling.Ignore)]
        public CornerRadiusEnd Format { get; set; }

        [JsonProperty("formatType", NullValueHandling = NullValueHandling.Ignore)]
        public Clip FormatType { get; set; }

        [JsonProperty("labelExpr", NullValueHandling = NullValueHandling.Ignore)]
        public Clip LabelExpr { get; set; }

        [JsonProperty("test", NullValueHandling = NullValueHandling.Ignore)]
        public FieldDefWithoutScale Test { get; set; }

        [JsonProperty("timeUnit", NullValueHandling = NullValueHandling.Ignore)]
        public NormalizedSpec TimeUnit { get; set; }

        [JsonProperty("title", NullValueHandling = NullValueHandling.Ignore)]
        public CornerRadiusEnd Title { get; set; }

        [JsonProperty("type", NullValueHandling = NullValueHandling.Ignore)]
        public FieldDefWithoutScale Type { get; set; }

        [JsonProperty("selection", NullValueHandling = NullValueHandling.Ignore)]
        public FieldDefWithoutScale Selection { get; set; }

        [JsonProperty("condition", NullValueHandling = NullValueHandling.Ignore)]
        public PurpleCondition Condition { get; set; }

        [JsonProperty("value", NullValueHandling = NullValueHandling.Ignore)]
        public CornerRadiusEnd Value { get; set; }
    }

    public partial class PurpleCondition
    {
        [JsonProperty("anyOf", NullValueHandling = NullValueHandling.Ignore)]
        public List<PurpleAnyOf> AnyOf { get; set; }

        [JsonProperty("description", NullValueHandling = NullValueHandling.Ignore)]
        public string Description { get; set; }
    }

    public partial class PurpleAnyOf
    {
        [JsonProperty("$ref", NullValueHandling = NullValueHandling.Ignore)]
        public string Ref { get; set; }

        [JsonProperty("items", NullValueHandling = NullValueHandling.Ignore)]
        public ColorDef Items { get; set; }

        [JsonProperty("type", NullValueHandling = NullValueHandling.Ignore)]
        public TypeEnum? Type { get; set; }

        [JsonProperty("anyOf", NullValueHandling = NullValueHandling.Ignore)]
        public List<AsAnyOf> AnyOf { get; set; }

        [JsonProperty("description", NullValueHandling = NullValueHandling.Ignore)]
        public string Description { get; set; }
    }

    public partial class ConditionalPredicateValueDefAlignNullExprRefClass
    {
        [JsonProperty("anyOf", NullValueHandling = NullValueHandling.Ignore)]
        public List<ConditionalPredicateValueDefAlignNullExprRefAnyOf> AnyOf { get; set; }
    }

    public partial class ConditionalPredicateValueDefAlignNullExprRefAnyOf
    {
        [JsonProperty("additionalProperties", NullValueHandling = NullValueHandling.Ignore)]
        public bool? AdditionalProperties { get; set; }

        [JsonProperty("properties", NullValueHandling = NullValueHandling.Ignore)]
        public StickyProperties Properties { get; set; }

        [JsonProperty("required", NullValueHandling = NullValueHandling.Ignore)]
        public List<ConditionalPredicateValueDefGradientStringNullExprRefRequired> AnyOfRequired { get; set; }

        [JsonProperty("type", NullValueHandling = NullValueHandling.Ignore)]
        public TypeEnum? Type { get; set; }
    }

    public partial class StickyProperties
    {
        [JsonProperty("test", NullValueHandling = NullValueHandling.Ignore)]
        public FieldDefWithoutScale Test { get; set; }

        [JsonProperty("value", NullValueHandling = NullValueHandling.Ignore)]
        public CornerRadiusEnd Value { get; set; }

        [JsonProperty("expr", NullValueHandling = NullValueHandling.Ignore)]
        public Clip Expr { get; set; }
    }

    public partial class ConditionalPredicateValueDefExprRef
    {
        [JsonProperty("additionalProperties", NullValueHandling = NullValueHandling.Ignore)]
        public bool? AdditionalProperties { get; set; }

        [JsonProperty("properties", NullValueHandling = NullValueHandling.Ignore)]
        public ConditionalPredicateValueDefGradientStringNullExprRefProperties Properties { get; set; }

        [JsonProperty("required", NullValueHandling = NullValueHandling.Ignore)]
        public List<ConditionalPredicateValueDefGradientStringNullExprRefRequired> ConditionalPredicateValueDefExprRefRequired { get; set; }

        [JsonProperty("type", NullValueHandling = NullValueHandling.Ignore)]
        public TypeEnum? Type { get; set; }
    }

    public partial class ConditionalPredicateValueDefGradientStringNullExprRefProperties
    {
        [JsonProperty("test", NullValueHandling = NullValueHandling.Ignore)]
        public FieldDefWithoutScale Test { get; set; }

        [JsonProperty("value", NullValueHandling = NullValueHandling.Ignore)]
        public CornerRadiusEnd Value { get; set; }
    }

    public partial class ConditionalPredicateValueDefNumber
    {
        [JsonProperty("additionalProperties", NullValueHandling = NullValueHandling.Ignore)]
        public bool? AdditionalProperties { get; set; }

        [JsonProperty("properties", NullValueHandling = NullValueHandling.Ignore)]
        public ConditionalPredicateValueDefNumberProperties Properties { get; set; }

        [JsonProperty("required", NullValueHandling = NullValueHandling.Ignore)]
        public List<ConditionalPredicateValueDefGradientStringNullExprRefRequired> ConditionalPredicateValueDefNumberRequired { get; set; }

        [JsonProperty("type", NullValueHandling = NullValueHandling.Ignore)]
        public TypeEnum? Type { get; set; }
    }

    public partial class ConditionalPredicateValueDefNumberProperties
    {
        [JsonProperty("test", NullValueHandling = NullValueHandling.Ignore)]
        public FieldDefWithoutScale Test { get; set; }

        [JsonProperty("value", NullValueHandling = NullValueHandling.Ignore)]
        public Clip Value { get; set; }
    }

    public partial class ConditionalPredicateValueDefNumberExprRef
    {
        [JsonProperty("additionalProperties", NullValueHandling = NullValueHandling.Ignore)]
        public bool? AdditionalProperties { get; set; }

        [JsonProperty("properties", NullValueHandling = NullValueHandling.Ignore)]
        public ConditionalPredicateValueDefNumberExprRefProperties Properties { get; set; }

        [JsonProperty("required", NullValueHandling = NullValueHandling.Ignore)]
        public List<ConditionalPredicateValueDefGradientStringNullExprRefRequired> ConditionalPredicateValueDefNumberExprRefRequired { get; set; }

        [JsonProperty("type", NullValueHandling = NullValueHandling.Ignore)]
        public TypeEnum? Type { get; set; }
    }

    public partial class ConditionalPredicateValueDefNumberExprRefProperties
    {
        [JsonProperty("test", NullValueHandling = NullValueHandling.Ignore)]
        public FieldDefWithoutScale Test { get; set; }

        [JsonProperty("value", NullValueHandling = NullValueHandling.Ignore)]
        public PurpleValue Value { get; set; }
    }

    public partial class PurpleValue
    {
        [JsonProperty("anyOf", NullValueHandling = NullValueHandling.Ignore)]
        public List<ScaleBinsAnyOf> AnyOf { get; set; }

        [JsonProperty("description", NullValueHandling = NullValueHandling.Ignore)]
        public string Description { get; set; }
    }

    public partial class ScaleBinsAnyOf
    {
        [JsonProperty("items", NullValueHandling = NullValueHandling.Ignore)]
        public Element Items { get; set; }

        [JsonProperty("type", NullValueHandling = NullValueHandling.Ignore)]
        public TypeEnum? Type { get; set; }

        [JsonProperty("$ref", NullValueHandling = NullValueHandling.Ignore)]
        public string Ref { get; set; }
    }

    public partial class ConditionalPredicateValueDefNumberNullExprRef
    {
        [JsonProperty("anyOf", NullValueHandling = NullValueHandling.Ignore)]
        public List<ConditionalPredicateValueDefNumberNullExprRefAnyOf> AnyOf { get; set; }
    }

    public partial class ConditionalPredicateValueDefNumberNullExprRefAnyOf
    {
        [JsonProperty("additionalProperties", NullValueHandling = NullValueHandling.Ignore)]
        public bool? AdditionalProperties { get; set; }

        [JsonProperty("properties", NullValueHandling = NullValueHandling.Ignore)]
        public IndigoProperties Properties { get; set; }

        [JsonProperty("required", NullValueHandling = NullValueHandling.Ignore)]
        public List<ConditionalPredicateValueDefGradientStringNullExprRefRequired> AnyOfRequired { get; set; }

        [JsonProperty("type", NullValueHandling = NullValueHandling.Ignore)]
        public TypeEnum? Type { get; set; }
    }

    public partial class IndigoProperties
    {
        [JsonProperty("test", NullValueHandling = NullValueHandling.Ignore)]
        public FieldDefWithoutScale Test { get; set; }

        [JsonProperty("value", NullValueHandling = NullValueHandling.Ignore)]
        public Style Value { get; set; }

        [JsonProperty("expr", NullValueHandling = NullValueHandling.Ignore)]
        public Clip Expr { get; set; }
    }

    public partial class ConditionalPredicateValueDefNumberNullExprRefClass
    {
        [JsonProperty("anyOf", NullValueHandling = NullValueHandling.Ignore)]
        public List<ConditionalPredicateValueDefStringNullExprRefAnyOf> AnyOf { get; set; }
    }

    public partial class ConditionalPredicateValueDefStringNullExprRefAnyOf
    {
        [JsonProperty("additionalProperties", NullValueHandling = NullValueHandling.Ignore)]
        public bool? AdditionalProperties { get; set; }

        [JsonProperty("properties", NullValueHandling = NullValueHandling.Ignore)]
        public IndecentProperties Properties { get; set; }

        [JsonProperty("required", NullValueHandling = NullValueHandling.Ignore)]
        public List<ConditionalPredicateValueDefGradientStringNullExprRefRequired> AnyOfRequired { get; set; }

        [JsonProperty("type", NullValueHandling = NullValueHandling.Ignore)]
        public TypeEnum? Type { get; set; }
    }

    public partial class IndecentProperties
    {
        [JsonProperty("test", NullValueHandling = NullValueHandling.Ignore)]
        public FieldDefWithoutScale Test { get; set; }

        [JsonProperty("value", NullValueHandling = NullValueHandling.Ignore)]
        public Order Value { get; set; }

        [JsonProperty("expr", NullValueHandling = NullValueHandling.Ignore)]
        public Clip Expr { get; set; }
    }

    public partial class ConditionalPredicateValueDefTextExprRef
    {
        [JsonProperty("additionalProperties", NullValueHandling = NullValueHandling.Ignore)]
        public bool? AdditionalProperties { get; set; }

        [JsonProperty("properties", NullValueHandling = NullValueHandling.Ignore)]
        public ConditionalPredicateValueDefTextExprRefProperties Properties { get; set; }

        [JsonProperty("required", NullValueHandling = NullValueHandling.Ignore)]
        public List<ConditionalPredicateValueDefGradientStringNullExprRefRequired> ConditionalPredicateValueDefTextExprRefRequired { get; set; }

        [JsonProperty("type", NullValueHandling = NullValueHandling.Ignore)]
        public TypeEnum? Type { get; set; }
    }

    public partial class ConditionalPredicateValueDefTextExprRefProperties
    {
        [JsonProperty("test", NullValueHandling = NullValueHandling.Ignore)]
        public FieldDefWithoutScale Test { get; set; }

        [JsonProperty("value", NullValueHandling = NullValueHandling.Ignore)]
        public NormalizedSpec Value { get; set; }
    }

    public partial class ConditionalSelectionValueDefExprRef
    {
        [JsonProperty("additionalProperties", NullValueHandling = NullValueHandling.Ignore)]
        public bool? AdditionalProperties { get; set; }

        [JsonProperty("properties", NullValueHandling = NullValueHandling.Ignore)]
        public ConditionalSelectionValueDefGradientStringNullExprRefProperties Properties { get; set; }

        [JsonProperty("required", NullValueHandling = NullValueHandling.Ignore)]
        public List<string> ConditionalSelectionValueDefExprRefRequired { get; set; }

        [JsonProperty("type", NullValueHandling = NullValueHandling.Ignore)]
        public TypeEnum? Type { get; set; }
    }

    public partial class ConditionalSelectionValueDefGradientStringNullExprRefProperties
    {
        [JsonProperty("selection", NullValueHandling = NullValueHandling.Ignore)]
        public FieldDefWithoutScale Selection { get; set; }

        [JsonProperty("value", NullValueHandling = NullValueHandling.Ignore)]
        public CornerRadiusEnd Value { get; set; }
    }

    public partial class ConditionalSelectionValueDefNumber
    {
        [JsonProperty("additionalProperties", NullValueHandling = NullValueHandling.Ignore)]
        public bool? AdditionalProperties { get; set; }

        [JsonProperty("properties", NullValueHandling = NullValueHandling.Ignore)]
        public ConditionalSelectionValueDefNumberProperties Properties { get; set; }

        [JsonProperty("required", NullValueHandling = NullValueHandling.Ignore)]
        public List<string> ConditionalSelectionValueDefNumberRequired { get; set; }

        [JsonProperty("type", NullValueHandling = NullValueHandling.Ignore)]
        public TypeEnum? Type { get; set; }
    }

    public partial class ConditionalSelectionValueDefNumberProperties
    {
        [JsonProperty("selection", NullValueHandling = NullValueHandling.Ignore)]
        public FieldDefWithoutScale Selection { get; set; }

        [JsonProperty("value", NullValueHandling = NullValueHandling.Ignore)]
        public Clip Value { get; set; }
    }

    public partial class ConditionalSelectionValueDefNumberExprRef
    {
        [JsonProperty("additionalProperties", NullValueHandling = NullValueHandling.Ignore)]
        public bool? AdditionalProperties { get; set; }

        [JsonProperty("properties", NullValueHandling = NullValueHandling.Ignore)]
        public ConditionalSelectionValueDefNumberExprRefProperties Properties { get; set; }

        [JsonProperty("required", NullValueHandling = NullValueHandling.Ignore)]
        public List<string> ConditionalSelectionValueDefNumberExprRefRequired { get; set; }

        [JsonProperty("type", NullValueHandling = NullValueHandling.Ignore)]
        public TypeEnum? Type { get; set; }
    }

    public partial class ConditionalSelectionValueDefNumberExprRefProperties
    {
        [JsonProperty("selection", NullValueHandling = NullValueHandling.Ignore)]
        public FieldDefWithoutScale Selection { get; set; }

        [JsonProperty("value", NullValueHandling = NullValueHandling.Ignore)]
        public PurpleValue Value { get; set; }
    }

    public partial class ConditionalSelectionValueDefTextExprRef
    {
        [JsonProperty("additionalProperties", NullValueHandling = NullValueHandling.Ignore)]
        public bool? AdditionalProperties { get; set; }

        [JsonProperty("properties", NullValueHandling = NullValueHandling.Ignore)]
        public ConditionalSelectionValueDefTextExprRefProperties Properties { get; set; }

        [JsonProperty("required", NullValueHandling = NullValueHandling.Ignore)]
        public List<string> ConditionalSelectionValueDefTextExprRefRequired { get; set; }

        [JsonProperty("type", NullValueHandling = NullValueHandling.Ignore)]
        public TypeEnum? Type { get; set; }
    }

    public partial class ConditionalSelectionValueDefTextExprRefProperties
    {
        [JsonProperty("selection", NullValueHandling = NullValueHandling.Ignore)]
        public FieldDefWithoutScale Selection { get; set; }

        [JsonProperty("value", NullValueHandling = NullValueHandling.Ignore)]
        public NormalizedSpec Value { get; set; }
    }

    public partial class Config
    {
        [JsonProperty("additionalProperties", NullValueHandling = NullValueHandling.Ignore)]
        public bool? AdditionalProperties { get; set; }

        [JsonProperty("properties", NullValueHandling = NullValueHandling.Ignore)]
        public ConfigProperties Properties { get; set; }

        [JsonProperty("type", NullValueHandling = NullValueHandling.Ignore)]
        public TypeEnum? Type { get; set; }
    }

    public partial class ConfigProperties
    {
        [JsonProperty("arc", NullValueHandling = NullValueHandling.Ignore)]
        public FieldDefWithoutScale Arc { get; set; }

        [JsonProperty("area", NullValueHandling = NullValueHandling.Ignore)]
        public FieldDefWithoutScale Area { get; set; }

        [JsonProperty("aria", NullValueHandling = NullValueHandling.Ignore)]
        public Clip Aria { get; set; }

        [JsonProperty("autosize", NullValueHandling = NullValueHandling.Ignore)]
        public NormalizedSpec Autosize { get; set; }

        [JsonProperty("axis", NullValueHandling = NullValueHandling.Ignore)]
        public FieldDefWithoutScale Axis { get; set; }

        [JsonProperty("axisBand", NullValueHandling = NullValueHandling.Ignore)]
        public FieldDefWithoutScale AxisBand { get; set; }

        [JsonProperty("axisBottom", NullValueHandling = NullValueHandling.Ignore)]
        public FieldDefWithoutScale AxisBottom { get; set; }

        [JsonProperty("axisDiscrete", NullValueHandling = NullValueHandling.Ignore)]
        public FieldDefWithoutScale AxisDiscrete { get; set; }

        [JsonProperty("axisLeft", NullValueHandling = NullValueHandling.Ignore)]
        public FieldDefWithoutScale AxisLeft { get; set; }

        [JsonProperty("axisPoint", NullValueHandling = NullValueHandling.Ignore)]
        public FieldDefWithoutScale AxisPoint { get; set; }

        [JsonProperty("axisQuantitative", NullValueHandling = NullValueHandling.Ignore)]
        public FieldDefWithoutScale AxisQuantitative { get; set; }

        [JsonProperty("axisRight", NullValueHandling = NullValueHandling.Ignore)]
        public FieldDefWithoutScale AxisRight { get; set; }

        [JsonProperty("axisTemporal", NullValueHandling = NullValueHandling.Ignore)]
        public FieldDefWithoutScale AxisTemporal { get; set; }

        [JsonProperty("axisTop", NullValueHandling = NullValueHandling.Ignore)]
        public FieldDefWithoutScale AxisTop { get; set; }

        [JsonProperty("axisX", NullValueHandling = NullValueHandling.Ignore)]
        public FieldDefWithoutScale AxisX { get; set; }

        [JsonProperty("axisXBand", NullValueHandling = NullValueHandling.Ignore)]
        public FieldDefWithoutScale AxisXBand { get; set; }

        [JsonProperty("axisXDiscrete", NullValueHandling = NullValueHandling.Ignore)]
        public FieldDefWithoutScale AxisXDiscrete { get; set; }

        [JsonProperty("axisXPoint", NullValueHandling = NullValueHandling.Ignore)]
        public FieldDefWithoutScale AxisXPoint { get; set; }

        [JsonProperty("axisXQuantitative", NullValueHandling = NullValueHandling.Ignore)]
        public FieldDefWithoutScale AxisXQuantitative { get; set; }

        [JsonProperty("axisXTemporal", NullValueHandling = NullValueHandling.Ignore)]
        public FieldDefWithoutScale AxisXTemporal { get; set; }

        [JsonProperty("axisY", NullValueHandling = NullValueHandling.Ignore)]
        public FieldDefWithoutScale AxisY { get; set; }

        [JsonProperty("axisYBand", NullValueHandling = NullValueHandling.Ignore)]
        public FieldDefWithoutScale AxisYBand { get; set; }

        [JsonProperty("axisYDiscrete", NullValueHandling = NullValueHandling.Ignore)]
        public FieldDefWithoutScale AxisYDiscrete { get; set; }

        [JsonProperty("axisYPoint", NullValueHandling = NullValueHandling.Ignore)]
        public FieldDefWithoutScale AxisYPoint { get; set; }

        [JsonProperty("axisYQuantitative", NullValueHandling = NullValueHandling.Ignore)]
        public FieldDefWithoutScale AxisYQuantitative { get; set; }

        [JsonProperty("axisYTemporal", NullValueHandling = NullValueHandling.Ignore)]
        public FieldDefWithoutScale AxisYTemporal { get; set; }

        [JsonProperty("background", NullValueHandling = NullValueHandling.Ignore)]
        public NormalizedSpec Background { get; set; }

        [JsonProperty("bar", NullValueHandling = NullValueHandling.Ignore)]
        public FieldDefWithoutScale Bar { get; set; }

        [JsonProperty("boxplot", NullValueHandling = NullValueHandling.Ignore)]
        public FieldDefWithoutScale Boxplot { get; set; }

        [JsonProperty("circle", NullValueHandling = NullValueHandling.Ignore)]
        public FieldDefWithoutScale Circle { get; set; }

        [JsonProperty("concat", NullValueHandling = NullValueHandling.Ignore)]
        public FieldDefWithoutScale Concat { get; set; }

        [JsonProperty("countTitle", NullValueHandling = NullValueHandling.Ignore)]
        public Clip CountTitle { get; set; }

        [JsonProperty("customFormatTypes", NullValueHandling = NullValueHandling.Ignore)]
        public Clip CustomFormatTypes { get; set; }

        [JsonProperty("errorband", NullValueHandling = NullValueHandling.Ignore)]
        public FieldDefWithoutScale Errorband { get; set; }

        [JsonProperty("errorbar", NullValueHandling = NullValueHandling.Ignore)]
        public FieldDefWithoutScale Errorbar { get; set; }

        [JsonProperty("facet", NullValueHandling = NullValueHandling.Ignore)]
        public FieldDefWithoutScale Facet { get; set; }

        [JsonProperty("fieldTitle", NullValueHandling = NullValueHandling.Ignore)]
        public Mark FieldTitle { get; set; }

        [JsonProperty("font", NullValueHandling = NullValueHandling.Ignore)]
        public Clip Font { get; set; }

        [JsonProperty("geoshape", NullValueHandling = NullValueHandling.Ignore)]
        public FieldDefWithoutScale Geoshape { get; set; }

        [JsonProperty("header", NullValueHandling = NullValueHandling.Ignore)]
        public FieldDefWithoutScale Header { get; set; }

        [JsonProperty("headerColumn", NullValueHandling = NullValueHandling.Ignore)]
        public FieldDefWithoutScale HeaderColumn { get; set; }

        [JsonProperty("headerFacet", NullValueHandling = NullValueHandling.Ignore)]
        public FieldDefWithoutScale HeaderFacet { get; set; }

        [JsonProperty("headerRow", NullValueHandling = NullValueHandling.Ignore)]
        public FieldDefWithoutScale HeaderRow { get; set; }

        [JsonProperty("image", NullValueHandling = NullValueHandling.Ignore)]
        public FieldDefWithoutScale Image { get; set; }

        [JsonProperty("legend", NullValueHandling = NullValueHandling.Ignore)]
        public FieldDefWithoutScale Legend { get; set; }

        [JsonProperty("line", NullValueHandling = NullValueHandling.Ignore)]
        public FieldDefWithoutScale Line { get; set; }

        [JsonProperty("lineBreak", NullValueHandling = NullValueHandling.Ignore)]
        public CornerRadiusEnd LineBreak { get; set; }

        [JsonProperty("mark", NullValueHandling = NullValueHandling.Ignore)]
        public FieldDefWithoutScale Mark { get; set; }

        [JsonProperty("numberFormat", NullValueHandling = NullValueHandling.Ignore)]
        public Clip NumberFormat { get; set; }

        [JsonProperty("padding", NullValueHandling = NullValueHandling.Ignore)]
        public NormalizedSpec Padding { get; set; }

        [JsonProperty("params", NullValueHandling = NullValueHandling.Ignore)]
        public GroupbyClass Params { get; set; }

        [JsonProperty("point", NullValueHandling = NullValueHandling.Ignore)]
        public FieldDefWithoutScale Point { get; set; }

        [JsonProperty("projection", NullValueHandling = NullValueHandling.Ignore)]
        public FieldDefWithoutScale Projection { get; set; }

        [JsonProperty("range", NullValueHandling = NullValueHandling.Ignore)]
        public FieldDefWithoutScale Range { get; set; }

        [JsonProperty("rect", NullValueHandling = NullValueHandling.Ignore)]
        public FieldDefWithoutScale Rect { get; set; }

        [JsonProperty("rule", NullValueHandling = NullValueHandling.Ignore)]
        public FieldDefWithoutScale Rule { get; set; }

        [JsonProperty("scale", NullValueHandling = NullValueHandling.Ignore)]
        public FieldDefWithoutScale Scale { get; set; }

        [JsonProperty("selection", NullValueHandling = NullValueHandling.Ignore)]
        public FieldDefWithoutScale Selection { get; set; }

        [JsonProperty("square", NullValueHandling = NullValueHandling.Ignore)]
        public FieldDefWithoutScale Square { get; set; }

        [JsonProperty("style", NullValueHandling = NullValueHandling.Ignore)]
        public FieldDefWithoutScale Style { get; set; }

        [JsonProperty("text", NullValueHandling = NullValueHandling.Ignore)]
        public FieldDefWithoutScale Text { get; set; }

        [JsonProperty("tick", NullValueHandling = NullValueHandling.Ignore)]
        public FieldDefWithoutScale Tick { get; set; }

        [JsonProperty("timeFormat", NullValueHandling = NullValueHandling.Ignore)]
        public Clip TimeFormat { get; set; }

        [JsonProperty("title", NullValueHandling = NullValueHandling.Ignore)]
        public FieldDefWithoutScale Title { get; set; }

        [JsonProperty("trail", NullValueHandling = NullValueHandling.Ignore)]
        public FieldDefWithoutScale Trail { get; set; }

        [JsonProperty("view", NullValueHandling = NullValueHandling.Ignore)]
        public FieldDefWithoutScale View { get; set; }
    }

    public partial class CsvDataFormat
    {
        [JsonProperty("additionalProperties", NullValueHandling = NullValueHandling.Ignore)]
        public bool? AdditionalProperties { get; set; }

        [JsonProperty("properties", NullValueHandling = NullValueHandling.Ignore)]
        public CsvDataFormatProperties Properties { get; set; }

        [JsonProperty("type", NullValueHandling = NullValueHandling.Ignore)]
        public TypeEnum? Type { get; set; }
    }

    public partial class CsvDataFormatProperties
    {
        [JsonProperty("parse", NullValueHandling = NullValueHandling.Ignore)]
        public CornerRadiusEnd Parse { get; set; }

        [JsonProperty("type", NullValueHandling = NullValueHandling.Ignore)]
        public Mark Type { get; set; }
    }

    public partial class DateTime
    {
        [JsonProperty("additionalProperties", NullValueHandling = NullValueHandling.Ignore)]
        public bool? AdditionalProperties { get; set; }

        [JsonProperty("description", NullValueHandling = NullValueHandling.Ignore)]
        public string Description { get; set; }

        [JsonProperty("properties", NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeProperties Properties { get; set; }

        [JsonProperty("type", NullValueHandling = NullValueHandling.Ignore)]
        public TypeEnum? Type { get; set; }
    }

    public partial class DateTimeProperties
    {
        [JsonProperty("date", NullValueHandling = NullValueHandling.Ignore)]
        public Mark Date { get; set; }

        [JsonProperty("day", NullValueHandling = NullValueHandling.Ignore)]
        public CornerRadiusEnd Day { get; set; }

        [JsonProperty("hours", NullValueHandling = NullValueHandling.Ignore)]
        public Mark Hours { get; set; }

        [JsonProperty("milliseconds", NullValueHandling = NullValueHandling.Ignore)]
        public Mark Milliseconds { get; set; }

        [JsonProperty("minutes", NullValueHandling = NullValueHandling.Ignore)]
        public Mark Minutes { get; set; }

        [JsonProperty("month", NullValueHandling = NullValueHandling.Ignore)]
        public CornerRadiusEnd Month { get; set; }

        [JsonProperty("quarter", NullValueHandling = NullValueHandling.Ignore)]
        public Mark Quarter { get; set; }

        [JsonProperty("seconds", NullValueHandling = NullValueHandling.Ignore)]
        public Mark Seconds { get; set; }

        [JsonProperty("utc", NullValueHandling = NullValueHandling.Ignore)]
        public Clip Utc { get; set; }

        [JsonProperty("year", NullValueHandling = NullValueHandling.Ignore)]
        public Clip Year { get; set; }
    }

    public partial class DatumDef
    {
        [JsonProperty("additionalProperties", NullValueHandling = NullValueHandling.Ignore)]
        public bool? AdditionalProperties { get; set; }

        [JsonProperty("properties", NullValueHandling = NullValueHandling.Ignore)]
        public DatumDefProperties Properties { get; set; }

        [JsonProperty("type", NullValueHandling = NullValueHandling.Ignore)]
        public TypeEnum? Type { get; set; }
    }

    public partial class DatumDefProperties
    {
        [JsonProperty("band", NullValueHandling = NullValueHandling.Ignore)]
        public Band Band { get; set; }

        [JsonProperty("datum", NullValueHandling = NullValueHandling.Ignore)]
        public NormalizedSpec Datum { get; set; }

        [JsonProperty("type", NullValueHandling = NullValueHandling.Ignore)]
        public FieldDefWithoutScale Type { get; set; }

        [JsonProperty("condition", NullValueHandling = NullValueHandling.Ignore)]
        public AsElement Condition { get; set; }
    }

    public partial class FieldOrDatumDefWithConditionDatumDef
    {
        [JsonProperty("additionalProperties", NullValueHandling = NullValueHandling.Ignore)]
        public bool? AdditionalProperties { get; set; }

        [JsonProperty("description", NullValueHandling = NullValueHandling.Ignore)]
        public string Description { get; set; }

        [JsonProperty("properties", NullValueHandling = NullValueHandling.Ignore)]
        public DatumDefProperties Properties { get; set; }

        [JsonProperty("type", NullValueHandling = NullValueHandling.Ignore)]
        public TypeEnum? Type { get; set; }
    }

    public partial class FieldOrDatumDefWithConditionMarkPropFieldDef
    {
        [JsonProperty("additionalProperties", NullValueHandling = NullValueHandling.Ignore)]
        public bool? AdditionalProperties { get; set; }

        [JsonProperty("description", NullValueHandling = NullValueHandling.Ignore)]
        public string Description { get; set; }

        [JsonProperty("properties", NullValueHandling = NullValueHandling.Ignore)]
        public FieldOrDatumDefWithConditionMarkPropFieldDefGradientStringNullProperties Properties { get; set; }

        [JsonProperty("type", NullValueHandling = NullValueHandling.Ignore)]
        public TypeEnum? Type { get; set; }
    }

    public partial class MarkConfig
    {
        [JsonProperty("additionalProperties", NullValueHandling = NullValueHandling.Ignore)]
        public bool? AdditionalProperties { get; set; }

        [JsonProperty("properties", NullValueHandling = NullValueHandling.Ignore)]
        public MarkConfigProperties Properties { get; set; }

        [JsonProperty("type", NullValueHandling = NullValueHandling.Ignore)]
        public TypeEnum? Type { get; set; }
    }

    public partial class MarkConfigProperties
    {
        [JsonProperty("align", NullValueHandling = NullValueHandling.Ignore)]
        public FieldDefWithoutScale Align { get; set; }

        [JsonProperty("angle", NullValueHandling = NullValueHandling.Ignore)]
        public Month Angle { get; set; }

        [JsonProperty("aria", NullValueHandling = NullValueHandling.Ignore)]
        public Clip Aria { get; set; }

        [JsonProperty("ariaRole", NullValueHandling = NullValueHandling.Ignore)]
        public Clip AriaRole { get; set; }

        [JsonProperty("ariaRoleDescription", NullValueHandling = NullValueHandling.Ignore)]
        public Clip AriaRoleDescription { get; set; }

        [JsonProperty("aspect", NullValueHandling = NullValueHandling.Ignore)]
        public Clip Aspect { get; set; }

        [JsonProperty("baseline", NullValueHandling = NullValueHandling.Ignore)]
        public FieldDefWithoutScale Baseline { get; set; }

        [JsonProperty("blend", NullValueHandling = NullValueHandling.Ignore)]
        public FieldDefWithoutScale Blend { get; set; }

        [JsonProperty("color", NullValueHandling = NullValueHandling.Ignore)]
        public NormalizedSpec Color { get; set; }

        [JsonProperty("cornerRadius", NullValueHandling = NullValueHandling.Ignore)]
        public Clip CornerRadius { get; set; }

        [JsonProperty("cornerRadiusBottomLeft", NullValueHandling = NullValueHandling.Ignore)]
        public Clip CornerRadiusBottomLeft { get; set; }

        [JsonProperty("cornerRadiusBottomRight", NullValueHandling = NullValueHandling.Ignore)]
        public Clip CornerRadiusBottomRight { get; set; }

        [JsonProperty("cornerRadiusTopLeft", NullValueHandling = NullValueHandling.Ignore)]
        public Clip CornerRadiusTopLeft { get; set; }

        [JsonProperty("cornerRadiusTopRight", NullValueHandling = NullValueHandling.Ignore)]
        public Clip CornerRadiusTopRight { get; set; }

        [JsonProperty("cursor", NullValueHandling = NullValueHandling.Ignore)]
        public FieldDefWithoutScale Cursor { get; set; }

        [JsonProperty("description", NullValueHandling = NullValueHandling.Ignore)]
        public Clip Description { get; set; }

        [JsonProperty("dir", NullValueHandling = NullValueHandling.Ignore)]
        public FieldDefWithoutScale Dir { get; set; }

        [JsonProperty("dx", NullValueHandling = NullValueHandling.Ignore)]
        public Clip Dx { get; set; }

        [JsonProperty("dy", NullValueHandling = NullValueHandling.Ignore)]
        public Clip Dy { get; set; }

        [JsonProperty("ellipsis", NullValueHandling = NullValueHandling.Ignore)]
        public Clip Ellipsis { get; set; }

        [JsonProperty("endAngle", NullValueHandling = NullValueHandling.Ignore)]
        public Clip EndAngle { get; set; }

        [JsonProperty("fill", NullValueHandling = NullValueHandling.Ignore)]
        public CornerRadiusEnd Fill { get; set; }

        [JsonProperty("fillOpacity", NullValueHandling = NullValueHandling.Ignore)]
        public Month FillOpacity { get; set; }

        [JsonProperty("filled", NullValueHandling = NullValueHandling.Ignore)]
        public Clip Filled { get; set; }

        [JsonProperty("font", NullValueHandling = NullValueHandling.Ignore)]
        public Clip Font { get; set; }

        [JsonProperty("fontSize", NullValueHandling = NullValueHandling.Ignore)]
        public Month FontSize { get; set; }

        [JsonProperty("fontStyle", NullValueHandling = NullValueHandling.Ignore)]
        public FieldDefWithoutScale FontStyle { get; set; }

        [JsonProperty("fontWeight", NullValueHandling = NullValueHandling.Ignore)]
        public FieldDefWithoutScale FontWeight { get; set; }

        [JsonProperty("height", NullValueHandling = NullValueHandling.Ignore)]
        public Clip Height { get; set; }

        [JsonProperty("href", NullValueHandling = NullValueHandling.Ignore)]
        public FieldDefWithoutScale Href { get; set; }

        [JsonProperty("innerRadius", NullValueHandling = NullValueHandling.Ignore)]
        public Clip InnerRadius { get; set; }

        [JsonProperty("interpolate", NullValueHandling = NullValueHandling.Ignore)]
        public FieldDefWithoutScale Interpolate { get; set; }

        [JsonProperty("invalid", NullValueHandling = NullValueHandling.Ignore)]
        public Invalid Invalid { get; set; }

        [JsonProperty("limit", NullValueHandling = NullValueHandling.Ignore)]
        public Clip Limit { get; set; }

        [JsonProperty("lineBreak", NullValueHandling = NullValueHandling.Ignore)]
        public Clip LineBreak { get; set; }

        [JsonProperty("lineHeight", NullValueHandling = NullValueHandling.Ignore)]
        public Clip LineHeight { get; set; }

        [JsonProperty("opacity", NullValueHandling = NullValueHandling.Ignore)]
        public Month Opacity { get; set; }

        [JsonProperty("order", NullValueHandling = NullValueHandling.Ignore)]
        public Order Order { get; set; }

        [JsonProperty("orient", NullValueHandling = NullValueHandling.Ignore)]
        public FieldDefWithoutScale Orient { get; set; }

        [JsonProperty("outerRadius", NullValueHandling = NullValueHandling.Ignore)]
        public Clip OuterRadius { get; set; }

        [JsonProperty("padAngle", NullValueHandling = NullValueHandling.Ignore)]
        public Clip PadAngle { get; set; }

        [JsonProperty("radius", NullValueHandling = NullValueHandling.Ignore)]
        public Clip Radius { get; set; }

        [JsonProperty("radius2", NullValueHandling = NullValueHandling.Ignore)]
        public Clip Radius2 { get; set; }

        [JsonProperty("shape", NullValueHandling = NullValueHandling.Ignore)]
        public CornerRadiusEnd Shape { get; set; }

        [JsonProperty("size", NullValueHandling = NullValueHandling.Ignore)]
        public Month Size { get; set; }

        [JsonProperty("smooth", NullValueHandling = NullValueHandling.Ignore)]
        public Clip Smooth { get; set; }

        [JsonProperty("startAngle", NullValueHandling = NullValueHandling.Ignore)]
        public Clip StartAngle { get; set; }

        [JsonProperty("stroke", NullValueHandling = NullValueHandling.Ignore)]
        public CornerRadiusEnd Stroke { get; set; }

        [JsonProperty("strokeCap", NullValueHandling = NullValueHandling.Ignore)]
        public FieldDefWithoutScale StrokeCap { get; set; }

        [JsonProperty("strokeDash", NullValueHandling = NullValueHandling.Ignore)]
        public Month StrokeDash { get; set; }

        [JsonProperty("strokeDashOffset", NullValueHandling = NullValueHandling.Ignore)]
        public Clip StrokeDashOffset { get; set; }

        [JsonProperty("strokeJoin", NullValueHandling = NullValueHandling.Ignore)]
        public FieldDefWithoutScale StrokeJoin { get; set; }

        [JsonProperty("strokeMiterLimit", NullValueHandling = NullValueHandling.Ignore)]
        public Clip StrokeMiterLimit { get; set; }

        [JsonProperty("strokeOffset", NullValueHandling = NullValueHandling.Ignore)]
        public Clip StrokeOffset { get; set; }

        [JsonProperty("strokeOpacity", NullValueHandling = NullValueHandling.Ignore)]
        public Month StrokeOpacity { get; set; }

        [JsonProperty("strokeWidth", NullValueHandling = NullValueHandling.Ignore)]
        public Month StrokeWidth { get; set; }

        [JsonProperty("tension", NullValueHandling = NullValueHandling.Ignore)]
        public Clip Tension { get; set; }

        [JsonProperty("text", NullValueHandling = NullValueHandling.Ignore)]
        public FieldDefWithoutScale Text { get; set; }

        [JsonProperty("theta", NullValueHandling = NullValueHandling.Ignore)]
        public Month Theta { get; set; }

        [JsonProperty("theta2", NullValueHandling = NullValueHandling.Ignore)]
        public Clip Theta2 { get; set; }

        [JsonProperty("timeUnitBand", NullValueHandling = NullValueHandling.Ignore)]
        public Clip TimeUnitBand { get; set; }

        [JsonProperty("timeUnitBandPosition", NullValueHandling = NullValueHandling.Ignore)]
        public Clip TimeUnitBandPosition { get; set; }

        [JsonProperty("tooltip", NullValueHandling = NullValueHandling.Ignore)]
        public CornerRadiusEnd Tooltip { get; set; }

        [JsonProperty("url", NullValueHandling = NullValueHandling.Ignore)]
        public FieldDefWithoutScale Url { get; set; }

        [JsonProperty("width", NullValueHandling = NullValueHandling.Ignore)]
        public Clip Width { get; set; }

        [JsonProperty("x", NullValueHandling = NullValueHandling.Ignore)]
        public Extent X { get; set; }

        [JsonProperty("x2", NullValueHandling = NullValueHandling.Ignore)]
        public Extent X2 { get; set; }

        [JsonProperty("y", NullValueHandling = NullValueHandling.Ignore)]
        public Extent Y { get; set; }

        [JsonProperty("y2", NullValueHandling = NullValueHandling.Ignore)]
        public Extent Y2 { get; set; }
    }

    public partial class ValueDefWithConditionMarkPropFieldOrDatumDefNumber
    {
        [JsonProperty("additionalProperties", NullValueHandling = NullValueHandling.Ignore)]
        public bool? AdditionalProperties { get; set; }

        [JsonProperty("minProperties", NullValueHandling = NullValueHandling.Ignore)]
        public long? MinProperties { get; set; }

        [JsonProperty("properties", NullValueHandling = NullValueHandling.Ignore)]
        public ValueDefWithConditionMarkPropFieldOrDatumDefNumberProperties Properties { get; set; }

        [JsonProperty("type", NullValueHandling = NullValueHandling.Ignore)]
        public TypeEnum? Type { get; set; }
    }

    public partial class ValueDefWithConditionMarkPropFieldOrDatumDefNumberProperties
    {
        [JsonProperty("condition", NullValueHandling = NullValueHandling.Ignore)]
        public AsElement Condition { get; set; }

        [JsonProperty("value", NullValueHandling = NullValueHandling.Ignore)]
        public PurpleValue Value { get; set; }
    }

    public partial class DensityTransform
    {
        [JsonProperty("additionalProperties", NullValueHandling = NullValueHandling.Ignore)]
        public bool? AdditionalProperties { get; set; }

        [JsonProperty("properties", NullValueHandling = NullValueHandling.Ignore)]
        public DensityTransformProperties Properties { get; set; }

        [JsonProperty("required", NullValueHandling = NullValueHandling.Ignore)]
        public List<string> DensityTransformRequired { get; set; }

        [JsonProperty("type", NullValueHandling = NullValueHandling.Ignore)]
        public TypeEnum? Type { get; set; }
    }

    public partial class DensityTransformProperties
    {
        [JsonProperty("as", NullValueHandling = NullValueHandling.Ignore)]
        public Vector2DateTime As { get; set; }

        [JsonProperty("bandwidth", NullValueHandling = NullValueHandling.Ignore)]
        public Clip Bandwidth { get; set; }

        [JsonProperty("counts", NullValueHandling = NullValueHandling.Ignore)]
        public Clip Counts { get; set; }

        [JsonProperty("cumulative", NullValueHandling = NullValueHandling.Ignore)]
        public Clip Cumulative { get; set; }

        [JsonProperty("density", NullValueHandling = NullValueHandling.Ignore)]
        public FieldDefWithoutScale Density { get; set; }

        [JsonProperty("extent", NullValueHandling = NullValueHandling.Ignore)]
        public Vector2Boolean Extent { get; set; }

        [JsonProperty("groupby", NullValueHandling = NullValueHandling.Ignore)]
        public GroupbyClass Groupby { get; set; }

        [JsonProperty("maxsteps", NullValueHandling = NullValueHandling.Ignore)]
        public Clip Maxsteps { get; set; }

        [JsonProperty("minsteps", NullValueHandling = NullValueHandling.Ignore)]
        public Clip Minsteps { get; set; }

        [JsonProperty("steps", NullValueHandling = NullValueHandling.Ignore)]
        public Clip Steps { get; set; }
    }

    public partial class Vector2DateTime
    {
        [JsonProperty("description", NullValueHandling = NullValueHandling.Ignore)]
        public string Description { get; set; }

        [JsonProperty("items", NullValueHandling = NullValueHandling.Ignore)]
        public List<ColorDef> Items { get; set; }

        [JsonProperty("maxItems", NullValueHandling = NullValueHandling.Ignore)]
        public long? MaxItems { get; set; }

        [JsonProperty("minItems", NullValueHandling = NullValueHandling.Ignore)]
        public long? MinItems { get; set; }

        [JsonProperty("type", NullValueHandling = NullValueHandling.Ignore)]
        public TypeEnum? Type { get; set; }

        [JsonProperty("$ref", NullValueHandling = NullValueHandling.Ignore)]
        public string Ref { get; set; }
    }

    public partial class DerivedStream
    {
        [JsonProperty("additionalProperties", NullValueHandling = NullValueHandling.Ignore)]
        public bool? AdditionalProperties { get; set; }

        [JsonProperty("properties", NullValueHandling = NullValueHandling.Ignore)]
        public DerivedStreamProperties Properties { get; set; }

        [JsonProperty("required", NullValueHandling = NullValueHandling.Ignore)]
        public List<string> DerivedStreamRequired { get; set; }

        [JsonProperty("type", NullValueHandling = NullValueHandling.Ignore)]
        public TypeEnum? Type { get; set; }
    }

    public partial class DerivedStreamProperties
    {
        [JsonProperty("between", NullValueHandling = NullValueHandling.Ignore)]
        public Between Between { get; set; }

        [JsonProperty("consume", NullValueHandling = NullValueHandling.Ignore)]
        public Element Consume { get; set; }

        [JsonProperty("debounce", NullValueHandling = NullValueHandling.Ignore)]
        public Element Debounce { get; set; }

        [JsonProperty("filter", NullValueHandling = NullValueHandling.Ignore)]
        public Fit Filter { get; set; }

        [JsonProperty("markname", NullValueHandling = NullValueHandling.Ignore)]
        public Element Markname { get; set; }

        [JsonProperty("marktype", NullValueHandling = NullValueHandling.Ignore)]
        public ColorDef Marktype { get; set; }

        [JsonProperty("stream", NullValueHandling = NullValueHandling.Ignore)]
        public ColorDef Stream { get; set; }

        [JsonProperty("throttle", NullValueHandling = NullValueHandling.Ignore)]
        public Element Throttle { get; set; }

        [JsonProperty("source", NullValueHandling = NullValueHandling.Ignore)]
        public Source Source { get; set; }

        [JsonProperty("type", NullValueHandling = NullValueHandling.Ignore)]
        public ColorDef Type { get; set; }

        [JsonProperty("merge", NullValueHandling = NullValueHandling.Ignore)]
        public Between Merge { get; set; }
    }

    public partial class Between
    {
        [JsonProperty("items", NullValueHandling = NullValueHandling.Ignore)]
        public ColorDef Items { get; set; }

        [JsonProperty("type", NullValueHandling = NullValueHandling.Ignore)]
        public TypeEnum? Type { get; set; }
    }

    public partial class Source
    {
        [JsonProperty("enum", NullValueHandling = NullValueHandling.Ignore)]
        public List<string> Enum { get; set; }

        [JsonProperty("type", NullValueHandling = NullValueHandling.Ignore)]
        public TypeEnum? Type { get; set; }

        [JsonProperty("const", NullValueHandling = NullValueHandling.Ignore)]
        public string Const { get; set; }
    }

    public partial class DictInlineDataset
    {
        [JsonProperty("additionalProperties", NullValueHandling = NullValueHandling.Ignore)]
        public ColorDef AdditionalProperties { get; set; }

        [JsonProperty("type", NullValueHandling = NullValueHandling.Ignore)]
        public TypeEnum? Type { get; set; }
    }

    public partial class DictUnknown
    {
        [JsonProperty("additionalProperties", NullValueHandling = NullValueHandling.Ignore)]
        public GeoJsonFeature AdditionalProperties { get; set; }

        [JsonProperty("type", NullValueHandling = NullValueHandling.Ignore)]
        public TypeEnum? Type { get; set; }
    }

    public partial class DomainUnionWith
    {
        [JsonProperty("additionalProperties", NullValueHandling = NullValueHandling.Ignore)]
        public bool? AdditionalProperties { get; set; }

        [JsonProperty("properties", NullValueHandling = NullValueHandling.Ignore)]
        public DomainUnionWithProperties Properties { get; set; }

        [JsonProperty("required", NullValueHandling = NullValueHandling.Ignore)]
        public List<string> DomainUnionWithRequired { get; set; }

        [JsonProperty("type", NullValueHandling = NullValueHandling.Ignore)]
        public TypeEnum? Type { get; set; }
    }

    public partial class DomainUnionWithProperties
    {
        [JsonProperty("unionWith", NullValueHandling = NullValueHandling.Ignore)]
        public UnionWith UnionWith { get; set; }
    }

    public partial class UnionWith
    {
        [JsonProperty("anyOf", NullValueHandling = NullValueHandling.Ignore)]
        public List<UnionWithAnyOf> AnyOf { get; set; }

        [JsonProperty("description", NullValueHandling = NullValueHandling.Ignore)]
        public string Description { get; set; }
    }

    public partial class UnionWithAnyOf
    {
        [JsonProperty("items", NullValueHandling = NullValueHandling.Ignore)]
        public AnyOf Items { get; set; }

        [JsonProperty("type", NullValueHandling = NullValueHandling.Ignore)]
        public TypeEnum? Type { get; set; }
    }

    public partial class DsvDataFormat
    {
        [JsonProperty("additionalProperties", NullValueHandling = NullValueHandling.Ignore)]
        public bool? AdditionalProperties { get; set; }

        [JsonProperty("properties", NullValueHandling = NullValueHandling.Ignore)]
        public DsvDataFormatProperties Properties { get; set; }

        [JsonProperty("required", NullValueHandling = NullValueHandling.Ignore)]
        public List<string> DsvDataFormatRequired { get; set; }

        [JsonProperty("type", NullValueHandling = NullValueHandling.Ignore)]
        public TypeEnum? Type { get; set; }
    }

    public partial class DsvDataFormatProperties
    {
        [JsonProperty("delimiter", NullValueHandling = NullValueHandling.Ignore)]
        public Delimiter Delimiter { get; set; }

        [JsonProperty("parse", NullValueHandling = NullValueHandling.Ignore)]
        public CornerRadiusEnd Parse { get; set; }

        [JsonProperty("type", NullValueHandling = NullValueHandling.Ignore)]
        public BindElement Type { get; set; }
    }

    public partial class Delimiter
    {
        [JsonProperty("description", NullValueHandling = NullValueHandling.Ignore)]
        public string Description { get; set; }

        [JsonProperty("maxLength", NullValueHandling = NullValueHandling.Ignore)]
        public long? MaxLength { get; set; }

        [JsonProperty("minLength", NullValueHandling = NullValueHandling.Ignore)]
        public long? MinLength { get; set; }

        [JsonProperty("type", NullValueHandling = NullValueHandling.Ignore)]
        public TypeEnum? Type { get; set; }
    }

    public partial class BindElement
    {
        [JsonProperty("const", NullValueHandling = NullValueHandling.Ignore)]
        public string Const { get; set; }

        [JsonProperty("description", NullValueHandling = NullValueHandling.Ignore)]
        public string Description { get; set; }

        [JsonProperty("type", NullValueHandling = NullValueHandling.Ignore)]
        public TypeEnum? Type { get; set; }

        [JsonProperty("$ref", NullValueHandling = NullValueHandling.Ignore)]
        public MarkRef? Ref { get; set; }
    }

    public partial class Encoding
    {
        [JsonProperty("additionalProperties", NullValueHandling = NullValueHandling.Ignore)]
        public bool? AdditionalProperties { get; set; }

        [JsonProperty("properties", NullValueHandling = NullValueHandling.Ignore)]
        public EncodingProperties Properties { get; set; }

        [JsonProperty("type", NullValueHandling = NullValueHandling.Ignore)]
        public TypeEnum? Type { get; set; }
    }

    public partial class EncodingProperties
    {
        [JsonProperty("angle", NullValueHandling = NullValueHandling.Ignore)]
        public FieldDefWithoutScale Angle { get; set; }

        [JsonProperty("color", NullValueHandling = NullValueHandling.Ignore)]
        public FieldDefWithoutScale Color { get; set; }

        [JsonProperty("description", NullValueHandling = NullValueHandling.Ignore)]
        public NormalizedSpec Description { get; set; }

        [JsonProperty("detail", NullValueHandling = NullValueHandling.Ignore)]
        public AsElement Detail { get; set; }

        [JsonProperty("fill", NullValueHandling = NullValueHandling.Ignore)]
        public FieldDefWithoutScale Fill { get; set; }

        [JsonProperty("fillOpacity", NullValueHandling = NullValueHandling.Ignore)]
        public FieldDefWithoutScale FillOpacity { get; set; }

        [JsonProperty("href", NullValueHandling = NullValueHandling.Ignore)]
        public NormalizedSpec Href { get; set; }

        [JsonProperty("key", NullValueHandling = NullValueHandling.Ignore)]
        public FieldDefWithoutScale Key { get; set; }

        [JsonProperty("latitude", NullValueHandling = NullValueHandling.Ignore)]
        public FieldDefWithoutScale Latitude { get; set; }

        [JsonProperty("latitude2", NullValueHandling = NullValueHandling.Ignore)]
        public FieldDefWithoutScale Latitude2 { get; set; }

        [JsonProperty("longitude", NullValueHandling = NullValueHandling.Ignore)]
        public FieldDefWithoutScale Longitude { get; set; }

        [JsonProperty("longitude2", NullValueHandling = NullValueHandling.Ignore)]
        public FieldDefWithoutScale Longitude2 { get; set; }

        [JsonProperty("opacity", NullValueHandling = NullValueHandling.Ignore)]
        public FieldDefWithoutScale Opacity { get; set; }

        [JsonProperty("order", NullValueHandling = NullValueHandling.Ignore)]
        public AsElement Order { get; set; }

        [JsonProperty("radius", NullValueHandling = NullValueHandling.Ignore)]
        public FieldDefWithoutScale Radius { get; set; }

        [JsonProperty("radius2", NullValueHandling = NullValueHandling.Ignore)]
        public FieldDefWithoutScale Radius2 { get; set; }

        [JsonProperty("shape", NullValueHandling = NullValueHandling.Ignore)]
        public FieldDefWithoutScale Shape { get; set; }

        [JsonProperty("size", NullValueHandling = NullValueHandling.Ignore)]
        public FieldDefWithoutScale Size { get; set; }

        [JsonProperty("stroke", NullValueHandling = NullValueHandling.Ignore)]
        public FieldDefWithoutScale Stroke { get; set; }

        [JsonProperty("strokeDash", NullValueHandling = NullValueHandling.Ignore)]
        public FieldDefWithoutScale StrokeDash { get; set; }

        [JsonProperty("strokeOpacity", NullValueHandling = NullValueHandling.Ignore)]
        public FieldDefWithoutScale StrokeOpacity { get; set; }

        [JsonProperty("strokeWidth", NullValueHandling = NullValueHandling.Ignore)]
        public FieldDefWithoutScale StrokeWidth { get; set; }

        [JsonProperty("text", NullValueHandling = NullValueHandling.Ignore)]
        public FieldDefWithoutScale Text { get; set; }

        [JsonProperty("theta", NullValueHandling = NullValueHandling.Ignore)]
        public FieldDefWithoutScale Theta { get; set; }

        [JsonProperty("theta2", NullValueHandling = NullValueHandling.Ignore)]
        public FieldDefWithoutScale Theta2 { get; set; }

        [JsonProperty("tooltip", NullValueHandling = NullValueHandling.Ignore)]
        public AsElement Tooltip { get; set; }

        [JsonProperty("url", NullValueHandling = NullValueHandling.Ignore)]
        public NormalizedSpec Url { get; set; }

        [JsonProperty("x", NullValueHandling = NullValueHandling.Ignore)]
        public FieldDefWithoutScale X { get; set; }

        [JsonProperty("x2", NullValueHandling = NullValueHandling.Ignore)]
        public FieldDefWithoutScale X2 { get; set; }

        [JsonProperty("xError", NullValueHandling = NullValueHandling.Ignore)]
        public NormalizedSpec XError { get; set; }

        [JsonProperty("xError2", NullValueHandling = NullValueHandling.Ignore)]
        public NormalizedSpec XError2 { get; set; }

        [JsonProperty("y", NullValueHandling = NullValueHandling.Ignore)]
        public FieldDefWithoutScale Y { get; set; }

        [JsonProperty("y2", NullValueHandling = NullValueHandling.Ignore)]
        public FieldDefWithoutScale Y2 { get; set; }

        [JsonProperty("yError", NullValueHandling = NullValueHandling.Ignore)]
        public NormalizedSpec YError { get; set; }

        [JsonProperty("yError2", NullValueHandling = NullValueHandling.Ignore)]
        public NormalizedSpec YError2 { get; set; }

        [JsonProperty("column", NullValueHandling = NullValueHandling.Ignore)]
        public FieldDefWithoutScale Column { get; set; }

        [JsonProperty("facet", NullValueHandling = NullValueHandling.Ignore)]
        public FieldDefWithoutScale Facet { get; set; }

        [JsonProperty("row", NullValueHandling = NullValueHandling.Ignore)]
        public FieldDefWithoutScale Row { get; set; }
    }

    public partial class EncodingSortField
    {
        [JsonProperty("additionalProperties", NullValueHandling = NullValueHandling.Ignore)]
        public bool? AdditionalProperties { get; set; }

        [JsonProperty("description", NullValueHandling = NullValueHandling.Ignore)]
        public string Description { get; set; }

        [JsonProperty("properties", NullValueHandling = NullValueHandling.Ignore)]
        public EncodingSortFieldProperties Properties { get; set; }

        [JsonProperty("type", NullValueHandling = NullValueHandling.Ignore)]
        public TypeEnum? Type { get; set; }
    }

    public partial class EncodingSortFieldProperties
    {
        [JsonProperty("field", NullValueHandling = NullValueHandling.Ignore)]
        public FieldDefWithoutScale Field { get; set; }

        [JsonProperty("op", NullValueHandling = NullValueHandling.Ignore)]
        public FieldDefWithoutScale Op { get; set; }

        [JsonProperty("order", NullValueHandling = NullValueHandling.Ignore)]
        public CornerRadiusEnd Order { get; set; }
    }

    public partial class ErrorBandConfig
    {
        [JsonProperty("additionalProperties", NullValueHandling = NullValueHandling.Ignore)]
        public bool? AdditionalProperties { get; set; }

        [JsonProperty("properties", NullValueHandling = NullValueHandling.Ignore)]
        public ErrorBandConfigProperties Properties { get; set; }

        [JsonProperty("type", NullValueHandling = NullValueHandling.Ignore)]
        public TypeEnum? Type { get; set; }
    }

    public partial class ErrorBandConfigProperties
    {
        [JsonProperty("band", NullValueHandling = NullValueHandling.Ignore)]
        public Color Band { get; set; }

        [JsonProperty("borders", NullValueHandling = NullValueHandling.Ignore)]
        public Color Borders { get; set; }

        [JsonProperty("extent", NullValueHandling = NullValueHandling.Ignore)]
        public FieldDefWithoutScale Extent { get; set; }

        [JsonProperty("interpolate", NullValueHandling = NullValueHandling.Ignore)]
        public FieldDefWithoutScale Interpolate { get; set; }

        [JsonProperty("tension", NullValueHandling = NullValueHandling.Ignore)]
        public Interpolate Tension { get; set; }
    }

    public partial class Interpolate
    {
        [JsonProperty("description", NullValueHandling = NullValueHandling.Ignore)]
        public string Description { get; set; }

        [JsonProperty("maximum", NullValueHandling = NullValueHandling.Ignore)]
        public long? Maximum { get; set; }

        [JsonProperty("minimum", NullValueHandling = NullValueHandling.Ignore)]
        public long? Minimum { get; set; }

        [JsonProperty("type", NullValueHandling = NullValueHandling.Ignore)]
        public TypeEnum? Type { get; set; }

        [JsonProperty("$ref", NullValueHandling = NullValueHandling.Ignore)]
        public DayRef? Ref { get; set; }

        [JsonProperty("items", NullValueHandling = NullValueHandling.Ignore)]
        public Element Items { get; set; }

        [JsonProperty("enum", NullValueHandling = NullValueHandling.Ignore)]
        public List<string> Enum { get; set; }

        [JsonProperty("anyOf", NullValueHandling = NullValueHandling.Ignore)]
        public List<AnyOf> AnyOf { get; set; }
    }

    public partial class ErrorBandDef
    {
        [JsonProperty("additionalProperties", NullValueHandling = NullValueHandling.Ignore)]
        public bool? AdditionalProperties { get; set; }

        [JsonProperty("properties", NullValueHandling = NullValueHandling.Ignore)]
        public ErrorBandDefProperties Properties { get; set; }

        [JsonProperty("required", NullValueHandling = NullValueHandling.Ignore)]
        public List<string> ErrorBandDefRequired { get; set; }

        [JsonProperty("type", NullValueHandling = NullValueHandling.Ignore)]
        public TypeEnum? Type { get; set; }
    }

    public partial class ErrorBandDefProperties
    {
        [JsonProperty("band", NullValueHandling = NullValueHandling.Ignore)]
        public Color Band { get; set; }

        [JsonProperty("borders", NullValueHandling = NullValueHandling.Ignore)]
        public Color Borders { get; set; }

        [JsonProperty("clip", NullValueHandling = NullValueHandling.Ignore)]
        public Clip Clip { get; set; }

        [JsonProperty("color", NullValueHandling = NullValueHandling.Ignore)]
        public NormalizedSpec Color { get; set; }

        [JsonProperty("extent", NullValueHandling = NullValueHandling.Ignore)]
        public FieldDefWithoutScale Extent { get; set; }

        [JsonProperty("interpolate", NullValueHandling = NullValueHandling.Ignore)]
        public FieldDefWithoutScale Interpolate { get; set; }

        [JsonProperty("opacity", NullValueHandling = NullValueHandling.Ignore)]
        public Clip Opacity { get; set; }

        [JsonProperty("orient", NullValueHandling = NullValueHandling.Ignore)]
        public FieldDefWithoutScale Orient { get; set; }

        [JsonProperty("tension", NullValueHandling = NullValueHandling.Ignore)]
        public Month Tension { get; set; }

        [JsonProperty("type", NullValueHandling = NullValueHandling.Ignore)]
        public FieldDefWithoutScale Type { get; set; }
    }

    public partial class ErrorBarConfig
    {
        [JsonProperty("additionalProperties", NullValueHandling = NullValueHandling.Ignore)]
        public bool? AdditionalProperties { get; set; }

        [JsonProperty("properties", NullValueHandling = NullValueHandling.Ignore)]
        public ErrorBarConfigProperties Properties { get; set; }

        [JsonProperty("type", NullValueHandling = NullValueHandling.Ignore)]
        public TypeEnum? Type { get; set; }
    }

    public partial class ErrorBarConfigProperties
    {
        [JsonProperty("extent", NullValueHandling = NullValueHandling.Ignore)]
        public FieldDefWithoutScale Extent { get; set; }

        [JsonProperty("rule", NullValueHandling = NullValueHandling.Ignore)]
        public Color Rule { get; set; }

        [JsonProperty("size", NullValueHandling = NullValueHandling.Ignore)]
        public Clip Size { get; set; }

        [JsonProperty("thickness", NullValueHandling = NullValueHandling.Ignore)]
        public Clip Thickness { get; set; }

        [JsonProperty("ticks", NullValueHandling = NullValueHandling.Ignore)]
        public Color Ticks { get; set; }
    }

    public partial class ErrorBarDef
    {
        [JsonProperty("additionalProperties", NullValueHandling = NullValueHandling.Ignore)]
        public bool? AdditionalProperties { get; set; }

        [JsonProperty("properties", NullValueHandling = NullValueHandling.Ignore)]
        public ErrorBarDefProperties Properties { get; set; }

        [JsonProperty("required", NullValueHandling = NullValueHandling.Ignore)]
        public List<string> ErrorBarDefRequired { get; set; }

        [JsonProperty("type", NullValueHandling = NullValueHandling.Ignore)]
        public TypeEnum? Type { get; set; }
    }

    public partial class ErrorBarDefProperties
    {
        [JsonProperty("clip", NullValueHandling = NullValueHandling.Ignore)]
        public Clip Clip { get; set; }

        [JsonProperty("color", NullValueHandling = NullValueHandling.Ignore)]
        public NormalizedSpec Color { get; set; }

        [JsonProperty("extent", NullValueHandling = NullValueHandling.Ignore)]
        public FieldDefWithoutScale Extent { get; set; }

        [JsonProperty("opacity", NullValueHandling = NullValueHandling.Ignore)]
        public Clip Opacity { get; set; }

        [JsonProperty("orient", NullValueHandling = NullValueHandling.Ignore)]
        public FieldDefWithoutScale Orient { get; set; }

        [JsonProperty("rule", NullValueHandling = NullValueHandling.Ignore)]
        public Color Rule { get; set; }

        [JsonProperty("size", NullValueHandling = NullValueHandling.Ignore)]
        public Clip Size { get; set; }

        [JsonProperty("thickness", NullValueHandling = NullValueHandling.Ignore)]
        public Clip Thickness { get; set; }

        [JsonProperty("ticks", NullValueHandling = NullValueHandling.Ignore)]
        public Color Ticks { get; set; }

        [JsonProperty("type", NullValueHandling = NullValueHandling.Ignore)]
        public FieldDefWithoutScale Type { get; set; }
    }

    public partial class EventStream
    {
        [JsonProperty("anyOf", NullValueHandling = NullValueHandling.Ignore)]
        public List<DerivedStream> AnyOf { get; set; }
    }

    public partial class ExprRef
    {
        [JsonProperty("additionalProperties", NullValueHandling = NullValueHandling.Ignore)]
        public bool? AdditionalProperties { get; set; }

        [JsonProperty("properties", NullValueHandling = NullValueHandling.Ignore)]
        public ExprRefProperties Properties { get; set; }

        [JsonProperty("required", NullValueHandling = NullValueHandling.Ignore)]
        public List<ExprRefRequired> ExprRefRequired { get; set; }

        [JsonProperty("type", NullValueHandling = NullValueHandling.Ignore)]
        public TypeEnum? Type { get; set; }
    }

    public partial class ExprRefProperties
    {
        [JsonProperty("expr", NullValueHandling = NullValueHandling.Ignore)]
        public Clip Expr { get; set; }
    }

    public partial class FacetEncodingFieldDef
    {
        [JsonProperty("additionalProperties", NullValueHandling = NullValueHandling.Ignore)]
        public bool? AdditionalProperties { get; set; }

        [JsonProperty("properties", NullValueHandling = NullValueHandling.Ignore)]
        public FacetEncodingFieldDefProperties Properties { get; set; }

        [JsonProperty("type", NullValueHandling = NullValueHandling.Ignore)]
        public TypeEnum? Type { get; set; }
    }

    public partial class FacetEncodingFieldDefProperties
    {
        [JsonProperty("aggregate", NullValueHandling = NullValueHandling.Ignore)]
        public FieldDefWithoutScale Aggregate { get; set; }

        [JsonProperty("align", NullValueHandling = NullValueHandling.Ignore)]
        public NormalizedSpec Align { get; set; }

        [JsonProperty("band", NullValueHandling = NullValueHandling.Ignore)]
        public Month Band { get; set; }

        [JsonProperty("bin", NullValueHandling = NullValueHandling.Ignore)]
        public CornerRadiusEnd Bin { get; set; }

        [JsonProperty("bounds", NullValueHandling = NullValueHandling.Ignore)]
        public Mark Bounds { get; set; }

        [JsonProperty("center", NullValueHandling = NullValueHandling.Ignore)]
        public CornerRadiusEnd Center { get; set; }

        [JsonProperty("columns", NullValueHandling = NullValueHandling.Ignore)]
        public Clip Columns { get; set; }

        [JsonProperty("field", NullValueHandling = NullValueHandling.Ignore)]
        public FieldDefWithoutScale Field { get; set; }

        [JsonProperty("header", NullValueHandling = NullValueHandling.Ignore)]
        public FieldDefWithoutScale Header { get; set; }

        [JsonProperty("sort", NullValueHandling = NullValueHandling.Ignore)]
        public CornerRadiusEnd Sort { get; set; }

        [JsonProperty("spacing", NullValueHandling = NullValueHandling.Ignore)]
        public CornerRadiusEnd Spacing { get; set; }

        [JsonProperty("timeUnit", NullValueHandling = NullValueHandling.Ignore)]
        public NormalizedSpec TimeUnit { get; set; }

        [JsonProperty("title", NullValueHandling = NullValueHandling.Ignore)]
        public CornerRadiusEnd Title { get; set; }

        [JsonProperty("type", NullValueHandling = NullValueHandling.Ignore)]
        public FieldDefWithoutScale Type { get; set; }
    }

    public partial class FacetFieldDef
    {
        [JsonProperty("additionalProperties", NullValueHandling = NullValueHandling.Ignore)]
        public bool? AdditionalProperties { get; set; }

        [JsonProperty("properties", NullValueHandling = NullValueHandling.Ignore)]
        public FacetFieldDefProperties Properties { get; set; }

        [JsonProperty("type", NullValueHandling = NullValueHandling.Ignore)]
        public TypeEnum? Type { get; set; }
    }

    public partial class FacetFieldDefProperties
    {
        [JsonProperty("aggregate", NullValueHandling = NullValueHandling.Ignore)]
        public FieldDefWithoutScale Aggregate { get; set; }

        [JsonProperty("band", NullValueHandling = NullValueHandling.Ignore)]
        public Band Band { get; set; }

        [JsonProperty("bin", NullValueHandling = NullValueHandling.Ignore)]
        public CornerRadiusEnd Bin { get; set; }

        [JsonProperty("field", NullValueHandling = NullValueHandling.Ignore)]
        public FieldDefWithoutScale Field { get; set; }

        [JsonProperty("header", NullValueHandling = NullValueHandling.Ignore)]
        public FieldDefWithoutScale Header { get; set; }

        [JsonProperty("sort", NullValueHandling = NullValueHandling.Ignore)]
        public CornerRadiusEnd Sort { get; set; }

        [JsonProperty("timeUnit", NullValueHandling = NullValueHandling.Ignore)]
        public NormalizedSpec TimeUnit { get; set; }

        [JsonProperty("title", NullValueHandling = NullValueHandling.Ignore)]
        public CornerRadiusEnd Title { get; set; }

        [JsonProperty("type", NullValueHandling = NullValueHandling.Ignore)]
        public FieldDefWithoutScale Type { get; set; }

        [JsonProperty("align", NullValueHandling = NullValueHandling.Ignore)]
        public FieldDefWithoutScale Align { get; set; }

        [JsonProperty("center", NullValueHandling = NullValueHandling.Ignore)]
        public Clip Center { get; set; }

        [JsonProperty("spacing", NullValueHandling = NullValueHandling.Ignore)]
        public Clip Spacing { get; set; }
    }

    public partial class FacetMapping
    {
        [JsonProperty("additionalProperties", NullValueHandling = NullValueHandling.Ignore)]
        public bool? AdditionalProperties { get; set; }

        [JsonProperty("properties", NullValueHandling = NullValueHandling.Ignore)]
        public FacetMappingProperties Properties { get; set; }

        [JsonProperty("type", NullValueHandling = NullValueHandling.Ignore)]
        public TypeEnum? Type { get; set; }
    }

    public partial class FacetMappingProperties
    {
        [JsonProperty("column", NullValueHandling = NullValueHandling.Ignore)]
        public FieldDefWithoutScale Column { get; set; }

        [JsonProperty("row", NullValueHandling = NullValueHandling.Ignore)]
        public FieldDefWithoutScale Row { get; set; }
    }

    public partial class FacetedUnitSpec
    {
        [JsonProperty("additionalProperties", NullValueHandling = NullValueHandling.Ignore)]
        public bool? AdditionalProperties { get; set; }

        [JsonProperty("description", NullValueHandling = NullValueHandling.Ignore)]
        public string Description { get; set; }

        [JsonProperty("properties", NullValueHandling = NullValueHandling.Ignore)]
        public FacetedUnitSpecProperties Properties { get; set; }

        [JsonProperty("required", NullValueHandling = NullValueHandling.Ignore)]
        public List<string> FacetedUnitSpecRequired { get; set; }

        [JsonProperty("type", NullValueHandling = NullValueHandling.Ignore)]
        public TypeEnum? Type { get; set; }
    }

    public partial class FacetedUnitSpecProperties
    {
        [JsonProperty("align", NullValueHandling = NullValueHandling.Ignore)]
        public NormalizedSpec Align { get; set; }

        [JsonProperty("bounds", NullValueHandling = NullValueHandling.Ignore)]
        public Mark Bounds { get; set; }

        [JsonProperty("center", NullValueHandling = NullValueHandling.Ignore)]
        public CornerRadiusEnd Center { get; set; }

        [JsonProperty("data", NullValueHandling = NullValueHandling.Ignore)]
        public CornerRadiusEnd Data { get; set; }

        [JsonProperty("description", NullValueHandling = NullValueHandling.Ignore)]
        public Clip Description { get; set; }

        [JsonProperty("encoding", NullValueHandling = NullValueHandling.Ignore)]
        public FieldDefWithoutScale Encoding { get; set; }

        [JsonProperty("height", NullValueHandling = NullValueHandling.Ignore)]
        public Point Height { get; set; }

        [JsonProperty("mark", NullValueHandling = NullValueHandling.Ignore)]
        public FieldDefWithoutScale Mark { get; set; }

        [JsonProperty("name", NullValueHandling = NullValueHandling.Ignore)]
        public Clip Name { get; set; }

        [JsonProperty("projection", NullValueHandling = NullValueHandling.Ignore)]
        public FieldDefWithoutScale Projection { get; set; }

        [JsonProperty("resolve", NullValueHandling = NullValueHandling.Ignore)]
        public FieldDefWithoutScale Resolve { get; set; }

        [JsonProperty("selection", NullValueHandling = NullValueHandling.Ignore)]
        public Selection Selection { get; set; }

        [JsonProperty("spacing", NullValueHandling = NullValueHandling.Ignore)]
        public CornerRadiusEnd Spacing { get; set; }

        [JsonProperty("title", NullValueHandling = NullValueHandling.Ignore)]
        public NormalizedSpec Title { get; set; }

        [JsonProperty("transform", NullValueHandling = NullValueHandling.Ignore)]
        public GroupbyClass Transform { get; set; }

        [JsonProperty("view", NullValueHandling = NullValueHandling.Ignore)]
        public FieldDefWithoutScale View { get; set; }

        [JsonProperty("width", NullValueHandling = NullValueHandling.Ignore)]
        public Point Width { get; set; }
    }

    public partial class Selection
    {
        [JsonProperty("additionalProperties", NullValueHandling = NullValueHandling.Ignore)]
        public ColorDef AdditionalProperties { get; set; }

        [JsonProperty("description", NullValueHandling = NullValueHandling.Ignore)]
        public string Description { get; set; }

        [JsonProperty("type", NullValueHandling = NullValueHandling.Ignore)]
        public TypeEnum? Type { get; set; }
    }

    public partial class FieldEqualPredicate
    {
        [JsonProperty("additionalProperties", NullValueHandling = NullValueHandling.Ignore)]
        public bool? AdditionalProperties { get; set; }

        [JsonProperty("properties", NullValueHandling = NullValueHandling.Ignore)]
        public FieldEqualPredicateProperties Properties { get; set; }

        [JsonProperty("required", NullValueHandling = NullValueHandling.Ignore)]
        public List<string> FieldEqualPredicateRequired { get; set; }

        [JsonProperty("type", NullValueHandling = NullValueHandling.Ignore)]
        public TypeEnum? Type { get; set; }
    }

    public partial class FieldEqualPredicateProperties
    {
        [JsonProperty("equal", NullValueHandling = NullValueHandling.Ignore)]
        public CornerRadiusEnd Equal { get; set; }

        [JsonProperty("field", NullValueHandling = NullValueHandling.Ignore)]
        public FieldDefWithoutScale Field { get; set; }

        [JsonProperty("timeUnit", NullValueHandling = NullValueHandling.Ignore)]
        public NormalizedSpec TimeUnit { get; set; }
    }

    public partial class FieldGtPredicate
    {
        [JsonProperty("additionalProperties", NullValueHandling = NullValueHandling.Ignore)]
        public bool? AdditionalProperties { get; set; }

        [JsonProperty("properties", NullValueHandling = NullValueHandling.Ignore)]
        public FieldGtPredicateProperties Properties { get; set; }

        [JsonProperty("required", NullValueHandling = NullValueHandling.Ignore)]
        public List<string> FieldGtPredicateRequired { get; set; }

        [JsonProperty("type", NullValueHandling = NullValueHandling.Ignore)]
        public TypeEnum? Type { get; set; }
    }

    public partial class FieldGtPredicateProperties
    {
        [JsonProperty("field", NullValueHandling = NullValueHandling.Ignore)]
        public FieldDefWithoutScale Field { get; set; }

        [JsonProperty("gt", NullValueHandling = NullValueHandling.Ignore)]
        public CornerRadiusEnd Gt { get; set; }

        [JsonProperty("timeUnit", NullValueHandling = NullValueHandling.Ignore)]
        public NormalizedSpec TimeUnit { get; set; }
    }

    public partial class FieldGtePredicate
    {
        [JsonProperty("additionalProperties", NullValueHandling = NullValueHandling.Ignore)]
        public bool? AdditionalProperties { get; set; }

        [JsonProperty("properties", NullValueHandling = NullValueHandling.Ignore)]
        public FieldGtePredicateProperties Properties { get; set; }

        [JsonProperty("required", NullValueHandling = NullValueHandling.Ignore)]
        public List<string> FieldGtePredicateRequired { get; set; }

        [JsonProperty("type", NullValueHandling = NullValueHandling.Ignore)]
        public TypeEnum? Type { get; set; }
    }

    public partial class FieldGtePredicateProperties
    {
        [JsonProperty("field", NullValueHandling = NullValueHandling.Ignore)]
        public FieldDefWithoutScale Field { get; set; }

        [JsonProperty("gte", NullValueHandling = NullValueHandling.Ignore)]
        public CornerRadiusEnd Gte { get; set; }

        [JsonProperty("timeUnit", NullValueHandling = NullValueHandling.Ignore)]
        public NormalizedSpec TimeUnit { get; set; }
    }

    public partial class FieldLtPredicate
    {
        [JsonProperty("additionalProperties", NullValueHandling = NullValueHandling.Ignore)]
        public bool? AdditionalProperties { get; set; }

        [JsonProperty("properties", NullValueHandling = NullValueHandling.Ignore)]
        public FieldLtPredicateProperties Properties { get; set; }

        [JsonProperty("required", NullValueHandling = NullValueHandling.Ignore)]
        public List<string> FieldLtPredicateRequired { get; set; }

        [JsonProperty("type", NullValueHandling = NullValueHandling.Ignore)]
        public TypeEnum? Type { get; set; }
    }

    public partial class FieldLtPredicateProperties
    {
        [JsonProperty("field", NullValueHandling = NullValueHandling.Ignore)]
        public FieldDefWithoutScale Field { get; set; }

        [JsonProperty("lt", NullValueHandling = NullValueHandling.Ignore)]
        public CornerRadiusEnd Lt { get; set; }

        [JsonProperty("timeUnit", NullValueHandling = NullValueHandling.Ignore)]
        public NormalizedSpec TimeUnit { get; set; }
    }

    public partial class FieldLtePredicate
    {
        [JsonProperty("additionalProperties", NullValueHandling = NullValueHandling.Ignore)]
        public bool? AdditionalProperties { get; set; }

        [JsonProperty("properties", NullValueHandling = NullValueHandling.Ignore)]
        public FieldLtePredicateProperties Properties { get; set; }

        [JsonProperty("required", NullValueHandling = NullValueHandling.Ignore)]
        public List<string> FieldLtePredicateRequired { get; set; }

        [JsonProperty("type", NullValueHandling = NullValueHandling.Ignore)]
        public TypeEnum? Type { get; set; }
    }

    public partial class FieldLtePredicateProperties
    {
        [JsonProperty("field", NullValueHandling = NullValueHandling.Ignore)]
        public FieldDefWithoutScale Field { get; set; }

        [JsonProperty("lte", NullValueHandling = NullValueHandling.Ignore)]
        public CornerRadiusEnd Lte { get; set; }

        [JsonProperty("timeUnit", NullValueHandling = NullValueHandling.Ignore)]
        public NormalizedSpec TimeUnit { get; set; }
    }

    public partial class FieldOneOfPredicate
    {
        [JsonProperty("additionalProperties", NullValueHandling = NullValueHandling.Ignore)]
        public bool? AdditionalProperties { get; set; }

        [JsonProperty("properties", NullValueHandling = NullValueHandling.Ignore)]
        public FieldOneOfPredicateProperties Properties { get; set; }

        [JsonProperty("required", NullValueHandling = NullValueHandling.Ignore)]
        public List<string> FieldOneOfPredicateRequired { get; set; }

        [JsonProperty("type", NullValueHandling = NullValueHandling.Ignore)]
        public TypeEnum? Type { get; set; }
    }

    public partial class FieldOneOfPredicateProperties
    {
        [JsonProperty("field", NullValueHandling = NullValueHandling.Ignore)]
        public FieldDefWithoutScale Field { get; set; }

        [JsonProperty("oneOf", NullValueHandling = NullValueHandling.Ignore)]
        public UnionWith OneOf { get; set; }

        [JsonProperty("timeUnit", NullValueHandling = NullValueHandling.Ignore)]
        public NormalizedSpec TimeUnit { get; set; }
    }

    public partial class FieldOrDatumDefWithConditionStringDatumDefText
    {
        [JsonProperty("additionalProperties", NullValueHandling = NullValueHandling.Ignore)]
        public bool? AdditionalProperties { get; set; }

        [JsonProperty("description", NullValueHandling = NullValueHandling.Ignore)]
        public string Description { get; set; }

        [JsonProperty("properties", NullValueHandling = NullValueHandling.Ignore)]
        public FieldOrDatumDefWithConditionStringDatumDefTextProperties Properties { get; set; }

        [JsonProperty("type", NullValueHandling = NullValueHandling.Ignore)]
        public TypeEnum? Type { get; set; }
    }

    public partial class FieldOrDatumDefWithConditionStringDatumDefTextProperties
    {
        [JsonProperty("band", NullValueHandling = NullValueHandling.Ignore)]
        public Day Band { get; set; }

        [JsonProperty("condition", NullValueHandling = NullValueHandling.Ignore)]
        public AsElement Condition { get; set; }

        [JsonProperty("datum", NullValueHandling = NullValueHandling.Ignore)]
        public NormalizedSpec Datum { get; set; }

        [JsonProperty("format", NullValueHandling = NullValueHandling.Ignore)]
        public CornerRadiusEnd Format { get; set; }

        [JsonProperty("formatType", NullValueHandling = NullValueHandling.Ignore)]
        public Clip FormatType { get; set; }

        [JsonProperty("labelExpr", NullValueHandling = NullValueHandling.Ignore)]
        public Clip LabelExpr { get; set; }

        [JsonProperty("type", NullValueHandling = NullValueHandling.Ignore)]
        public FieldDefWithoutScale Type { get; set; }
    }

    public partial class FieldOrDatumDefWithConditionStringFieldDef
    {
        [JsonProperty("additionalProperties", NullValueHandling = NullValueHandling.Ignore)]
        public bool? AdditionalProperties { get; set; }

        [JsonProperty("description", NullValueHandling = NullValueHandling.Ignore)]
        public string Description { get; set; }

        [JsonProperty("properties", NullValueHandling = NullValueHandling.Ignore)]
        public ConditionalPredicateStringFieldDefProperties Properties { get; set; }

        [JsonProperty("type", NullValueHandling = NullValueHandling.Ignore)]
        public TypeEnum? Type { get; set; }
    }

    public partial class FieldRangePredicate
    {
        [JsonProperty("additionalProperties", NullValueHandling = NullValueHandling.Ignore)]
        public bool? AdditionalProperties { get; set; }

        [JsonProperty("properties", NullValueHandling = NullValueHandling.Ignore)]
        public FieldRangePredicateProperties Properties { get; set; }

        [JsonProperty("required", NullValueHandling = NullValueHandling.Ignore)]
        public List<string> FieldRangePredicateRequired { get; set; }

        [JsonProperty("type", NullValueHandling = NullValueHandling.Ignore)]
        public TypeEnum? Type { get; set; }
    }

    public partial class FieldRangePredicateProperties
    {
        [JsonProperty("field", NullValueHandling = NullValueHandling.Ignore)]
        public FieldDefWithoutScale Field { get; set; }

        [JsonProperty("range", NullValueHandling = NullValueHandling.Ignore)]
        public PurpleRange Range { get; set; }

        [JsonProperty("timeUnit", NullValueHandling = NullValueHandling.Ignore)]
        public NormalizedSpec TimeUnit { get; set; }
    }

    public partial class PurpleRange
    {
        [JsonProperty("anyOf", NullValueHandling = NullValueHandling.Ignore)]
        public List<FluffyAnyOf> AnyOf { get; set; }

        [JsonProperty("description", NullValueHandling = NullValueHandling.Ignore)]
        public string Description { get; set; }

        [JsonProperty("maxItems", NullValueHandling = NullValueHandling.Ignore)]
        public long? MaxItems { get; set; }

        [JsonProperty("minItems", NullValueHandling = NullValueHandling.Ignore)]
        public long? MinItems { get; set; }
    }

    public partial class FluffyAnyOf
    {
        [JsonProperty("items", NullValueHandling = NullValueHandling.Ignore)]
        public Color Items { get; set; }

        [JsonProperty("type", NullValueHandling = NullValueHandling.Ignore)]
        public TypeEnum? Type { get; set; }

        [JsonProperty("$ref", NullValueHandling = NullValueHandling.Ignore)]
        public string Ref { get; set; }

        [JsonProperty("const", NullValueHandling = NullValueHandling.Ignore)]
        public ConstElement? Const { get; set; }
    }

    public partial class FieldValidPredicate
    {
        [JsonProperty("additionalProperties", NullValueHandling = NullValueHandling.Ignore)]
        public bool? AdditionalProperties { get; set; }

        [JsonProperty("properties", NullValueHandling = NullValueHandling.Ignore)]
        public FieldValidPredicateProperties Properties { get; set; }

        [JsonProperty("required", NullValueHandling = NullValueHandling.Ignore)]
        public List<string> FieldValidPredicateRequired { get; set; }

        [JsonProperty("type", NullValueHandling = NullValueHandling.Ignore)]
        public TypeEnum? Type { get; set; }
    }

    public partial class FieldValidPredicateProperties
    {
        [JsonProperty("field", NullValueHandling = NullValueHandling.Ignore)]
        public FieldDefWithoutScale Field { get; set; }

        [JsonProperty("timeUnit", NullValueHandling = NullValueHandling.Ignore)]
        public NormalizedSpec TimeUnit { get; set; }

        [JsonProperty("valid", NullValueHandling = NullValueHandling.Ignore)]
        public Clip Valid { get; set; }
    }

    public partial class FilterTransform
    {
        [JsonProperty("additionalProperties", NullValueHandling = NullValueHandling.Ignore)]
        public bool? AdditionalProperties { get; set; }

        [JsonProperty("properties", NullValueHandling = NullValueHandling.Ignore)]
        public FilterTransformProperties Properties { get; set; }

        [JsonProperty("required", NullValueHandling = NullValueHandling.Ignore)]
        public List<EnumElement> FilterTransformRequired { get; set; }

        [JsonProperty("type", NullValueHandling = NullValueHandling.Ignore)]
        public TypeEnum? Type { get; set; }
    }

    public partial class FilterTransformProperties
    {
        [JsonProperty("filter", NullValueHandling = NullValueHandling.Ignore)]
        public FieldDefWithoutScale Filter { get; set; }
    }

    public partial class FlattenTransform
    {
        [JsonProperty("additionalProperties", NullValueHandling = NullValueHandling.Ignore)]
        public bool? AdditionalProperties { get; set; }

        [JsonProperty("properties", NullValueHandling = NullValueHandling.Ignore)]
        public FlattenTransformProperties Properties { get; set; }

        [JsonProperty("required", NullValueHandling = NullValueHandling.Ignore)]
        public List<string> FlattenTransformRequired { get; set; }

        [JsonProperty("type", NullValueHandling = NullValueHandling.Ignore)]
        public TypeEnum? Type { get; set; }
    }

    public partial class FlattenTransformProperties
    {
        [JsonProperty("as", NullValueHandling = NullValueHandling.Ignore)]
        public GroupbyClass As { get; set; }

        [JsonProperty("flatten", NullValueHandling = NullValueHandling.Ignore)]
        public GroupbyClass Flatten { get; set; }
    }

    public partial class FoldTransform
    {
        [JsonProperty("additionalProperties", NullValueHandling = NullValueHandling.Ignore)]
        public bool? AdditionalProperties { get; set; }

        [JsonProperty("properties", NullValueHandling = NullValueHandling.Ignore)]
        public FoldTransformProperties Properties { get; set; }

        [JsonProperty("required", NullValueHandling = NullValueHandling.Ignore)]
        public List<string> FoldTransformRequired { get; set; }

        [JsonProperty("type", NullValueHandling = NullValueHandling.Ignore)]
        public TypeEnum? Type { get; set; }
    }

    public partial class FoldTransformProperties
    {
        [JsonProperty("as", NullValueHandling = NullValueHandling.Ignore)]
        public Vector2DateTime As { get; set; }

        [JsonProperty("fold", NullValueHandling = NullValueHandling.Ignore)]
        public GroupbyClass Fold { get; set; }
    }

    public partial class FontWeight
    {
        [JsonProperty("enum", NullValueHandling = NullValueHandling.Ignore)]
        public List<Enum> Enum { get; set; }

        [JsonProperty("type", NullValueHandling = NullValueHandling.Ignore)]
        public List<TypeEnum> Type { get; set; }
    }

    public partial class GradientStop
    {
        [JsonProperty("additionalProperties", NullValueHandling = NullValueHandling.Ignore)]
        public bool? AdditionalProperties { get; set; }

        [JsonProperty("properties", NullValueHandling = NullValueHandling.Ignore)]
        public GradientStopProperties Properties { get; set; }

        [JsonProperty("required", NullValueHandling = NullValueHandling.Ignore)]
        public List<string> GradientStopRequired { get; set; }

        [JsonProperty("type", NullValueHandling = NullValueHandling.Ignore)]
        public TypeEnum? Type { get; set; }
    }

    public partial class GradientStopProperties
    {
        [JsonProperty("color", NullValueHandling = NullValueHandling.Ignore)]
        public FieldDefWithoutScale Color { get; set; }

        [JsonProperty("offset", NullValueHandling = NullValueHandling.Ignore)]
        public Clip Offset { get; set; }
    }

    public partial class GraticuleGenerator
    {
        [JsonProperty("additionalProperties", NullValueHandling = NullValueHandling.Ignore)]
        public bool? AdditionalProperties { get; set; }

        [JsonProperty("properties", NullValueHandling = NullValueHandling.Ignore)]
        public GraticuleGeneratorProperties Properties { get; set; }

        [JsonProperty("required", NullValueHandling = NullValueHandling.Ignore)]
        public List<string> GraticuleGeneratorRequired { get; set; }

        [JsonProperty("type", NullValueHandling = NullValueHandling.Ignore)]
        public TypeEnum? Type { get; set; }
    }

    public partial class GraticuleGeneratorProperties
    {
        [JsonProperty("graticule", NullValueHandling = NullValueHandling.Ignore)]
        public Bin Graticule { get; set; }

        [JsonProperty("name", NullValueHandling = NullValueHandling.Ignore)]
        public Clip Name { get; set; }
    }

    public partial class GraticuleParams
    {
        [JsonProperty("additionalProperties", NullValueHandling = NullValueHandling.Ignore)]
        public bool? AdditionalProperties { get; set; }

        [JsonProperty("properties", NullValueHandling = NullValueHandling.Ignore)]
        public GraticuleParamsProperties Properties { get; set; }

        [JsonProperty("type", NullValueHandling = NullValueHandling.Ignore)]
        public TypeEnum? Type { get; set; }
    }

    public partial class GraticuleParamsProperties
    {
        [JsonProperty("extent", NullValueHandling = NullValueHandling.Ignore)]
        public FieldDefWithoutScale Extent { get; set; }

        [JsonProperty("extentMajor", NullValueHandling = NullValueHandling.Ignore)]
        public FieldDefWithoutScale ExtentMajor { get; set; }

        [JsonProperty("extentMinor", NullValueHandling = NullValueHandling.Ignore)]
        public FieldDefWithoutScale ExtentMinor { get; set; }

        [JsonProperty("precision", NullValueHandling = NullValueHandling.Ignore)]
        public Clip Precision { get; set; }

        [JsonProperty("step", NullValueHandling = NullValueHandling.Ignore)]
        public FieldDefWithoutScale Step { get; set; }

        [JsonProperty("stepMajor", NullValueHandling = NullValueHandling.Ignore)]
        public FieldDefWithoutScale StepMajor { get; set; }

        [JsonProperty("stepMinor", NullValueHandling = NullValueHandling.Ignore)]
        public FieldDefWithoutScale StepMinor { get; set; }
    }

    public partial class ConcatSpecGenericSpec
    {
        [JsonProperty("additionalProperties", NullValueHandling = NullValueHandling.Ignore)]
        public bool? AdditionalProperties { get; set; }

        [JsonProperty("description", NullValueHandling = NullValueHandling.Ignore)]
        public string Description { get; set; }

        [JsonProperty("properties", NullValueHandling = NullValueHandling.Ignore)]
        public HConcatSpecGenericSpecProperties Properties { get; set; }

        [JsonProperty("required", NullValueHandling = NullValueHandling.Ignore)]
        public List<string> ConcatSpecGenericSpecRequired { get; set; }

        [JsonProperty("type", NullValueHandling = NullValueHandling.Ignore)]
        public TypeEnum? Type { get; set; }
    }

    public partial class HConcatSpecGenericSpecProperties
    {
        [JsonProperty("bounds", NullValueHandling = NullValueHandling.Ignore)]
        public Mark Bounds { get; set; }

        [JsonProperty("center", NullValueHandling = NullValueHandling.Ignore)]
        public Clip Center { get; set; }

        [JsonProperty("data", NullValueHandling = NullValueHandling.Ignore)]
        public CornerRadiusEnd Data { get; set; }

        [JsonProperty("description", NullValueHandling = NullValueHandling.Ignore)]
        public Clip Description { get; set; }

        [JsonProperty("hconcat", NullValueHandling = NullValueHandling.Ignore)]
        public GroupbyClass Hconcat { get; set; }

        [JsonProperty("name", NullValueHandling = NullValueHandling.Ignore)]
        public Clip Name { get; set; }

        [JsonProperty("resolve", NullValueHandling = NullValueHandling.Ignore)]
        public FieldDefWithoutScale Resolve { get; set; }

        [JsonProperty("spacing", NullValueHandling = NullValueHandling.Ignore)]
        public Clip Spacing { get; set; }

        [JsonProperty("title", NullValueHandling = NullValueHandling.Ignore)]
        public NormalizedSpec Title { get; set; }

        [JsonProperty("transform", NullValueHandling = NullValueHandling.Ignore)]
        public GroupbyClass Transform { get; set; }

        [JsonProperty("vconcat", NullValueHandling = NullValueHandling.Ignore)]
        public GroupbyClass Vconcat { get; set; }
    }

    public partial class Header
    {
        [JsonProperty("additionalProperties", NullValueHandling = NullValueHandling.Ignore)]
        public bool? AdditionalProperties { get; set; }

        [JsonProperty("description", NullValueHandling = NullValueHandling.Ignore)]
        public string Description { get; set; }

        [JsonProperty("properties", NullValueHandling = NullValueHandling.Ignore)]
        public HeaderProperties Properties { get; set; }

        [JsonProperty("type", NullValueHandling = NullValueHandling.Ignore)]
        public TypeEnum? Type { get; set; }
    }

    public partial class HeaderProperties
    {
        [JsonProperty("format", NullValueHandling = NullValueHandling.Ignore)]
        public CornerRadiusEnd Format { get; set; }

        [JsonProperty("formatType", NullValueHandling = NullValueHandling.Ignore)]
        public Clip FormatType { get; set; }

        [JsonProperty("labelAlign", NullValueHandling = NullValueHandling.Ignore)]
        public NormalizedSpec LabelAlign { get; set; }

        [JsonProperty("labelAnchor", NullValueHandling = NullValueHandling.Ignore)]
        public FieldDefWithoutScale LabelAnchor { get; set; }

        [JsonProperty("labelAngle", NullValueHandling = NullValueHandling.Ignore)]
        public Day LabelAngle { get; set; }

        [JsonProperty("labelBaseline", NullValueHandling = NullValueHandling.Ignore)]
        public NormalizedSpec LabelBaseline { get; set; }

        [JsonProperty("labelColor", NullValueHandling = NullValueHandling.Ignore)]
        public NormalizedSpec LabelColor { get; set; }

        [JsonProperty("labelExpr", NullValueHandling = NullValueHandling.Ignore)]
        public Clip LabelExpr { get; set; }

        [JsonProperty("labelFont", NullValueHandling = NullValueHandling.Ignore)]
        public CornerRadiusEnd LabelFont { get; set; }

        [JsonProperty("labelFontSize", NullValueHandling = NullValueHandling.Ignore)]
        public Month LabelFontSize { get; set; }

        [JsonProperty("labelFontStyle", NullValueHandling = NullValueHandling.Ignore)]
        public NormalizedSpec LabelFontStyle { get; set; }

        [JsonProperty("labelFontWeight", NullValueHandling = NullValueHandling.Ignore)]
        public NormalizedSpec LabelFontWeight { get; set; }

        [JsonProperty("labelLimit", NullValueHandling = NullValueHandling.Ignore)]
        public CornerRadiusEnd LabelLimit { get; set; }

        [JsonProperty("labelLineHeight", NullValueHandling = NullValueHandling.Ignore)]
        public CornerRadiusEnd LabelLineHeight { get; set; }

        [JsonProperty("labelOrient", NullValueHandling = NullValueHandling.Ignore)]
        public FieldDefWithoutScale LabelOrient { get; set; }

        [JsonProperty("labelPadding", NullValueHandling = NullValueHandling.Ignore)]
        public CornerRadiusEnd LabelPadding { get; set; }

        [JsonProperty("labels", NullValueHandling = NullValueHandling.Ignore)]
        public Clip Labels { get; set; }

        [JsonProperty("orient", NullValueHandling = NullValueHandling.Ignore)]
        public FieldDefWithoutScale Orient { get; set; }

        [JsonProperty("title", NullValueHandling = NullValueHandling.Ignore)]
        public CornerRadiusEnd Title { get; set; }

        [JsonProperty("titleAlign", NullValueHandling = NullValueHandling.Ignore)]
        public NormalizedSpec TitleAlign { get; set; }

        [JsonProperty("titleAnchor", NullValueHandling = NullValueHandling.Ignore)]
        public FieldDefWithoutScale TitleAnchor { get; set; }

        [JsonProperty("titleAngle", NullValueHandling = NullValueHandling.Ignore)]
        public Month TitleAngle { get; set; }

        [JsonProperty("titleBaseline", NullValueHandling = NullValueHandling.Ignore)]
        public NormalizedSpec TitleBaseline { get; set; }

        [JsonProperty("titleColor", NullValueHandling = NullValueHandling.Ignore)]
        public NormalizedSpec TitleColor { get; set; }

        [JsonProperty("titleFont", NullValueHandling = NullValueHandling.Ignore)]
        public CornerRadiusEnd TitleFont { get; set; }

        [JsonProperty("titleFontSize", NullValueHandling = NullValueHandling.Ignore)]
        public Month TitleFontSize { get; set; }

        [JsonProperty("titleFontStyle", NullValueHandling = NullValueHandling.Ignore)]
        public NormalizedSpec TitleFontStyle { get; set; }

        [JsonProperty("titleFontWeight", NullValueHandling = NullValueHandling.Ignore)]
        public NormalizedSpec TitleFontWeight { get; set; }

        [JsonProperty("titleLimit", NullValueHandling = NullValueHandling.Ignore)]
        public CornerRadiusEnd TitleLimit { get; set; }

        [JsonProperty("titleLineHeight", NullValueHandling = NullValueHandling.Ignore)]
        public CornerRadiusEnd TitleLineHeight { get; set; }

        [JsonProperty("titleOrient", NullValueHandling = NullValueHandling.Ignore)]
        public FieldDefWithoutScale TitleOrient { get; set; }

        [JsonProperty("titlePadding", NullValueHandling = NullValueHandling.Ignore)]
        public CornerRadiusEnd TitlePadding { get; set; }
    }

    public partial class HeaderConfig
    {
        [JsonProperty("additionalProperties", NullValueHandling = NullValueHandling.Ignore)]
        public bool? AdditionalProperties { get; set; }

        [JsonProperty("properties", NullValueHandling = NullValueHandling.Ignore)]
        public HeaderConfigProperties Properties { get; set; }

        [JsonProperty("type", NullValueHandling = NullValueHandling.Ignore)]
        public TypeEnum? Type { get; set; }
    }

    public partial class HeaderConfigProperties
    {
        [JsonProperty("format", NullValueHandling = NullValueHandling.Ignore)]
        public CornerRadiusEnd Format { get; set; }

        [JsonProperty("formatType", NullValueHandling = NullValueHandling.Ignore)]
        public Clip FormatType { get; set; }

        [JsonProperty("labelAlign", NullValueHandling = NullValueHandling.Ignore)]
        public NormalizedSpec LabelAlign { get; set; }

        [JsonProperty("labelAnchor", NullValueHandling = NullValueHandling.Ignore)]
        public FieldDefWithoutScale LabelAnchor { get; set; }

        [JsonProperty("labelAngle", NullValueHandling = NullValueHandling.Ignore)]
        public Interpolate LabelAngle { get; set; }

        [JsonProperty("labelBaseline", NullValueHandling = NullValueHandling.Ignore)]
        public NormalizedSpec LabelBaseline { get; set; }

        [JsonProperty("labelColor", NullValueHandling = NullValueHandling.Ignore)]
        public NormalizedSpec LabelColor { get; set; }

        [JsonProperty("labelExpr", NullValueHandling = NullValueHandling.Ignore)]
        public Clip LabelExpr { get; set; }

        [JsonProperty("labelFont", NullValueHandling = NullValueHandling.Ignore)]
        public CornerRadiusEnd LabelFont { get; set; }

        [JsonProperty("labelFontSize", NullValueHandling = NullValueHandling.Ignore)]
        public Month LabelFontSize { get; set; }

        [JsonProperty("labelFontStyle", NullValueHandling = NullValueHandling.Ignore)]
        public NormalizedSpec LabelFontStyle { get; set; }

        [JsonProperty("labelFontWeight", NullValueHandling = NullValueHandling.Ignore)]
        public NormalizedSpec LabelFontWeight { get; set; }

        [JsonProperty("labelLimit", NullValueHandling = NullValueHandling.Ignore)]
        public CornerRadiusEnd LabelLimit { get; set; }

        [JsonProperty("labelLineHeight", NullValueHandling = NullValueHandling.Ignore)]
        public CornerRadiusEnd LabelLineHeight { get; set; }

        [JsonProperty("labelOrient", NullValueHandling = NullValueHandling.Ignore)]
        public FieldDefWithoutScale LabelOrient { get; set; }

        [JsonProperty("labelPadding", NullValueHandling = NullValueHandling.Ignore)]
        public CornerRadiusEnd LabelPadding { get; set; }

        [JsonProperty("labels", NullValueHandling = NullValueHandling.Ignore)]
        public Clip Labels { get; set; }

        [JsonProperty("orient", NullValueHandling = NullValueHandling.Ignore)]
        public FieldDefWithoutScale Orient { get; set; }

        [JsonProperty("title", NullValueHandling = NullValueHandling.Ignore)]
        public Clip Title { get; set; }

        [JsonProperty("titleAlign", NullValueHandling = NullValueHandling.Ignore)]
        public NormalizedSpec TitleAlign { get; set; }

        [JsonProperty("titleAnchor", NullValueHandling = NullValueHandling.Ignore)]
        public FieldDefWithoutScale TitleAnchor { get; set; }

        [JsonProperty("titleAngle", NullValueHandling = NullValueHandling.Ignore)]
        public Month TitleAngle { get; set; }

        [JsonProperty("titleBaseline", NullValueHandling = NullValueHandling.Ignore)]
        public NormalizedSpec TitleBaseline { get; set; }

        [JsonProperty("titleColor", NullValueHandling = NullValueHandling.Ignore)]
        public NormalizedSpec TitleColor { get; set; }

        [JsonProperty("titleFont", NullValueHandling = NullValueHandling.Ignore)]
        public CornerRadiusEnd TitleFont { get; set; }

        [JsonProperty("titleFontSize", NullValueHandling = NullValueHandling.Ignore)]
        public Month TitleFontSize { get; set; }

        [JsonProperty("titleFontStyle", NullValueHandling = NullValueHandling.Ignore)]
        public NormalizedSpec TitleFontStyle { get; set; }

        [JsonProperty("titleFontWeight", NullValueHandling = NullValueHandling.Ignore)]
        public NormalizedSpec TitleFontWeight { get; set; }

        [JsonProperty("titleLimit", NullValueHandling = NullValueHandling.Ignore)]
        public CornerRadiusEnd TitleLimit { get; set; }

        [JsonProperty("titleLineHeight", NullValueHandling = NullValueHandling.Ignore)]
        public CornerRadiusEnd TitleLineHeight { get; set; }

        [JsonProperty("titleOrient", NullValueHandling = NullValueHandling.Ignore)]
        public FieldDefWithoutScale TitleOrient { get; set; }

        [JsonProperty("titlePadding", NullValueHandling = NullValueHandling.Ignore)]
        public CornerRadiusEnd TitlePadding { get; set; }
    }

    public partial class HexColor
    {
        [JsonProperty("format", NullValueHandling = NullValueHandling.Ignore)]
        public string Format { get; set; }

        [JsonProperty("type", NullValueHandling = NullValueHandling.Ignore)]
        public TypeEnum? Type { get; set; }
    }

    public partial class ImputeParams
    {
        [JsonProperty("additionalProperties", NullValueHandling = NullValueHandling.Ignore)]
        public bool? AdditionalProperties { get; set; }

        [JsonProperty("properties", NullValueHandling = NullValueHandling.Ignore)]
        public ImputeParamsProperties Properties { get; set; }

        [JsonProperty("type", NullValueHandling = NullValueHandling.Ignore)]
        public TypeEnum? Type { get; set; }
    }

    public partial class ImputeParamsProperties
    {
        [JsonProperty("frame", NullValueHandling = NullValueHandling.Ignore)]
        public PurpleFrame Frame { get; set; }

        [JsonProperty("keyvals", NullValueHandling = NullValueHandling.Ignore)]
        public Keyvals Keyvals { get; set; }

        [JsonProperty("method", NullValueHandling = NullValueHandling.Ignore)]
        public FieldDefWithoutScale Method { get; set; }

        [JsonProperty("value", NullValueHandling = NullValueHandling.Ignore)]
        public FluffyValue Value { get; set; }
    }

    public partial class PurpleFrame
    {
        [JsonProperty("description", NullValueHandling = NullValueHandling.Ignore)]
        public string Description { get; set; }

        [JsonProperty("items", NullValueHandling = NullValueHandling.Ignore)]
        public List<PrimitiveValue> Items { get; set; }

        [JsonProperty("maxItems", NullValueHandling = NullValueHandling.Ignore)]
        public long? MaxItems { get; set; }

        [JsonProperty("minItems", NullValueHandling = NullValueHandling.Ignore)]
        public long? MinItems { get; set; }

        [JsonProperty("type", NullValueHandling = NullValueHandling.Ignore)]
        public TypeEnum? Type { get; set; }
    }

    public partial class PrimitiveValue
    {
        [JsonProperty("type", NullValueHandling = NullValueHandling.Ignore)]
        public List<TypeEnum> Type { get; set; }
    }

    public partial class Keyvals
    {
        [JsonProperty("anyOf", NullValueHandling = NullValueHandling.Ignore)]
        public List<KeyvalsAnyOf> AnyOf { get; set; }

        [JsonProperty("description", NullValueHandling = NullValueHandling.Ignore)]
        public string Description { get; set; }
    }

    public partial class KeyvalsAnyOf
    {
        [JsonProperty("items", NullValueHandling = NullValueHandling.Ignore)]
        public GeoJsonFeature Items { get; set; }

        [JsonProperty("type", NullValueHandling = NullValueHandling.Ignore)]
        public TypeEnum? Type { get; set; }

        [JsonProperty("$ref", NullValueHandling = NullValueHandling.Ignore)]
        public string Ref { get; set; }
    }

    public partial class FluffyValue
    {
        [JsonProperty("description", NullValueHandling = NullValueHandling.Ignore)]
        public string Description { get; set; }
    }

    public partial class ImputeSequence
    {
        [JsonProperty("additionalProperties", NullValueHandling = NullValueHandling.Ignore)]
        public bool? AdditionalProperties { get; set; }

        [JsonProperty("properties", NullValueHandling = NullValueHandling.Ignore)]
        public ImputeSequenceProperties Properties { get; set; }

        [JsonProperty("required", NullValueHandling = NullValueHandling.Ignore)]
        public List<string> ImputeSequenceRequired { get; set; }

        [JsonProperty("type", NullValueHandling = NullValueHandling.Ignore)]
        public TypeEnum? Type { get; set; }
    }

    public partial class ImputeSequenceProperties
    {
        [JsonProperty("start", NullValueHandling = NullValueHandling.Ignore)]
        public Clip Start { get; set; }

        [JsonProperty("step", NullValueHandling = NullValueHandling.Ignore)]
        public Clip Step { get; set; }

        [JsonProperty("stop", NullValueHandling = NullValueHandling.Ignore)]
        public Clip Stop { get; set; }

        [JsonProperty("as", NullValueHandling = NullValueHandling.Ignore)]
        public FieldDefWithoutScale As { get; set; }
    }

    public partial class ImputeTransform
    {
        [JsonProperty("additionalProperties", NullValueHandling = NullValueHandling.Ignore)]
        public bool? AdditionalProperties { get; set; }

        [JsonProperty("properties", NullValueHandling = NullValueHandling.Ignore)]
        public ImputeTransformProperties Properties { get; set; }

        [JsonProperty("required", NullValueHandling = NullValueHandling.Ignore)]
        public List<string> ImputeTransformRequired { get; set; }

        [JsonProperty("type", NullValueHandling = NullValueHandling.Ignore)]
        public TypeEnum? Type { get; set; }
    }

    public partial class ImputeTransformProperties
    {
        [JsonProperty("frame", NullValueHandling = NullValueHandling.Ignore)]
        public PurpleFrame Frame { get; set; }

        [JsonProperty("groupby", NullValueHandling = NullValueHandling.Ignore)]
        public GroupbyClass Groupby { get; set; }

        [JsonProperty("impute", NullValueHandling = NullValueHandling.Ignore)]
        public FieldDefWithoutScale Impute { get; set; }

        [JsonProperty("key", NullValueHandling = NullValueHandling.Ignore)]
        public FieldDefWithoutScale Key { get; set; }

        [JsonProperty("keyvals", NullValueHandling = NullValueHandling.Ignore)]
        public Keyvals Keyvals { get; set; }

        [JsonProperty("method", NullValueHandling = NullValueHandling.Ignore)]
        public FieldDefWithoutScale Method { get; set; }

        [JsonProperty("value", NullValueHandling = NullValueHandling.Ignore)]
        public FluffyValue Value { get; set; }
    }

    public partial class InlineData
    {
        [JsonProperty("additionalProperties", NullValueHandling = NullValueHandling.Ignore)]
        public bool? AdditionalProperties { get; set; }

        [JsonProperty("properties", NullValueHandling = NullValueHandling.Ignore)]
        public InlineDataProperties Properties { get; set; }

        [JsonProperty("required", NullValueHandling = NullValueHandling.Ignore)]
        public List<string> InlineDataRequired { get; set; }

        [JsonProperty("type", NullValueHandling = NullValueHandling.Ignore)]
        public TypeEnum? Type { get; set; }
    }

    public partial class InlineDataProperties
    {
        [JsonProperty("format", NullValueHandling = NullValueHandling.Ignore)]
        public FieldDefWithoutScale Format { get; set; }

        [JsonProperty("name", NullValueHandling = NullValueHandling.Ignore)]
        public Clip Name { get; set; }

        [JsonProperty("values", NullValueHandling = NullValueHandling.Ignore)]
        public FieldDefWithoutScale Values { get; set; }
    }

    public partial class InlineDataset
    {
        [JsonProperty("anyOf", NullValueHandling = NullValueHandling.Ignore)]
        public List<RangeRawArray> AnyOf { get; set; }
    }

    public partial class InputBinding
    {
        [JsonProperty("additionalProperties", NullValueHandling = NullValueHandling.Ignore)]
        public bool? AdditionalProperties { get; set; }

        [JsonProperty("properties", NullValueHandling = NullValueHandling.Ignore)]
        public InputBindingProperties Properties { get; set; }

        [JsonProperty("type", NullValueHandling = NullValueHandling.Ignore)]
        public TypeEnum? Type { get; set; }
    }

    public partial class InputBindingProperties
    {
        [JsonProperty("autocomplete", NullValueHandling = NullValueHandling.Ignore)]
        public Element Autocomplete { get; set; }

        [JsonProperty("debounce", NullValueHandling = NullValueHandling.Ignore)]
        public Element Debounce { get; set; }

        [JsonProperty("element", NullValueHandling = NullValueHandling.Ignore)]
        public ColorDef Element { get; set; }

        [JsonProperty("input", NullValueHandling = NullValueHandling.Ignore)]
        public Element Input { get; set; }

        [JsonProperty("name", NullValueHandling = NullValueHandling.Ignore)]
        public Element Name { get; set; }

        [JsonProperty("placeholder", NullValueHandling = NullValueHandling.Ignore)]
        public Element Placeholder { get; set; }

        [JsonProperty("type", NullValueHandling = NullValueHandling.Ignore)]
        public Element Type { get; set; }
    }

    public partial class IntervalSelection
    {
        [JsonProperty("additionalProperties", NullValueHandling = NullValueHandling.Ignore)]
        public bool? AdditionalProperties { get; set; }

        [JsonProperty("properties", NullValueHandling = NullValueHandling.Ignore)]
        public IntervalSelectionProperties Properties { get; set; }

        [JsonProperty("required", NullValueHandling = NullValueHandling.Ignore)]
        public List<string> IntervalSelectionRequired { get; set; }

        [JsonProperty("type", NullValueHandling = NullValueHandling.Ignore)]
        public TypeEnum? Type { get; set; }
    }

    public partial class IntervalSelectionProperties
    {
        [JsonProperty("bind", NullValueHandling = NullValueHandling.Ignore)]
        public BindElement Bind { get; set; }

        [JsonProperty("clear", NullValueHandling = NullValueHandling.Ignore)]
        public CornerRadiusEnd Clear { get; set; }

        [JsonProperty("empty", NullValueHandling = NullValueHandling.Ignore)]
        public Mark Empty { get; set; }

        [JsonProperty("encodings", NullValueHandling = NullValueHandling.Ignore)]
        public GroupbyClass Encodings { get; set; }

        [JsonProperty("fields", NullValueHandling = NullValueHandling.Ignore)]
        public GroupbyClass Fields { get; set; }

        [JsonProperty("init", NullValueHandling = NullValueHandling.Ignore)]
        public FieldDefWithoutScale Init { get; set; }

        [JsonProperty("mark", NullValueHandling = NullValueHandling.Ignore)]
        public FieldDefWithoutScale Mark { get; set; }

        [JsonProperty("on", NullValueHandling = NullValueHandling.Ignore)]
        public CornerRadiusEnd On { get; set; }

        [JsonProperty("resolve", NullValueHandling = NullValueHandling.Ignore)]
        public FieldDefWithoutScale Resolve { get; set; }

        [JsonProperty("translate", NullValueHandling = NullValueHandling.Ignore)]
        public Order Translate { get; set; }

        [JsonProperty("type", NullValueHandling = NullValueHandling.Ignore)]
        public BindElement Type { get; set; }

        [JsonProperty("zoom", NullValueHandling = NullValueHandling.Ignore)]
        public Order Zoom { get; set; }
    }

    public partial class IntervalSelectionConfig
    {
        [JsonProperty("additionalProperties", NullValueHandling = NullValueHandling.Ignore)]
        public bool? AdditionalProperties { get; set; }

        [JsonProperty("properties", NullValueHandling = NullValueHandling.Ignore)]
        public IntervalSelectionProperties Properties { get; set; }

        [JsonProperty("type", NullValueHandling = NullValueHandling.Ignore)]
        public TypeEnum? Type { get; set; }
    }

    public partial class JoinAggregateTransform
    {
        [JsonProperty("additionalProperties", NullValueHandling = NullValueHandling.Ignore)]
        public bool? AdditionalProperties { get; set; }

        [JsonProperty("properties", NullValueHandling = NullValueHandling.Ignore)]
        public JoinAggregateTransformProperties Properties { get; set; }

        [JsonProperty("required", NullValueHandling = NullValueHandling.Ignore)]
        public List<string> JoinAggregateTransformRequired { get; set; }

        [JsonProperty("type", NullValueHandling = NullValueHandling.Ignore)]
        public TypeEnum? Type { get; set; }
    }

    public partial class JoinAggregateTransformProperties
    {
        [JsonProperty("groupby", NullValueHandling = NullValueHandling.Ignore)]
        public GroupbyClass Groupby { get; set; }

        [JsonProperty("joinaggregate", NullValueHandling = NullValueHandling.Ignore)]
        public GroupbyClass Joinaggregate { get; set; }
    }

    public partial class JsonDataFormat
    {
        [JsonProperty("additionalProperties", NullValueHandling = NullValueHandling.Ignore)]
        public bool? AdditionalProperties { get; set; }

        [JsonProperty("properties", NullValueHandling = NullValueHandling.Ignore)]
        public JsonDataFormatProperties Properties { get; set; }

        [JsonProperty("type", NullValueHandling = NullValueHandling.Ignore)]
        public TypeEnum? Type { get; set; }
    }

    public partial class JsonDataFormatProperties
    {
        [JsonProperty("parse", NullValueHandling = NullValueHandling.Ignore)]
        public CornerRadiusEnd Parse { get; set; }

        [JsonProperty("property", NullValueHandling = NullValueHandling.Ignore)]
        public Clip Property { get; set; }

        [JsonProperty("type", NullValueHandling = NullValueHandling.Ignore)]
        public BindElement Type { get; set; }
    }

    public partial class LabelOverlap
    {
        [JsonProperty("anyOf", NullValueHandling = NullValueHandling.Ignore)]
        public List<BoxPlot> AnyOf { get; set; }
    }

    public partial class LatLongFieldDef
    {
        [JsonProperty("additionalProperties", NullValueHandling = NullValueHandling.Ignore)]
        public bool? AdditionalProperties { get; set; }

        [JsonProperty("properties", NullValueHandling = NullValueHandling.Ignore)]
        public LatLongFieldDefProperties Properties { get; set; }

        [JsonProperty("type", NullValueHandling = NullValueHandling.Ignore)]
        public TypeEnum? Type { get; set; }
    }

    public partial class LatLongFieldDefProperties
    {
        [JsonProperty("aggregate", NullValueHandling = NullValueHandling.Ignore)]
        public FieldDefWithoutScale Aggregate { get; set; }

        [JsonProperty("band", NullValueHandling = NullValueHandling.Ignore)]
        public Band Band { get; set; }

        [JsonProperty("bin", NullValueHandling = NullValueHandling.Ignore)]
        public Clip Bin { get; set; }

        [JsonProperty("field", NullValueHandling = NullValueHandling.Ignore)]
        public FieldDefWithoutScale Field { get; set; }

        [JsonProperty("timeUnit", NullValueHandling = NullValueHandling.Ignore)]
        public NormalizedSpec TimeUnit { get; set; }

        [JsonProperty("title", NullValueHandling = NullValueHandling.Ignore)]
        public CornerRadiusEnd Title { get; set; }

        [JsonProperty("type", NullValueHandling = NullValueHandling.Ignore)]
        public BindElement Type { get; set; }

        [JsonProperty("value", NullValueHandling = NullValueHandling.Ignore)]
        public Clip Value { get; set; }
    }

    public partial class LayerRepeatMapping
    {
        [JsonProperty("additionalProperties", NullValueHandling = NullValueHandling.Ignore)]
        public bool? AdditionalProperties { get; set; }

        [JsonProperty("properties", NullValueHandling = NullValueHandling.Ignore)]
        public LayerRepeatMappingProperties Properties { get; set; }

        [JsonProperty("required", NullValueHandling = NullValueHandling.Ignore)]
        public List<string> LayerRepeatMappingRequired { get; set; }

        [JsonProperty("type", NullValueHandling = NullValueHandling.Ignore)]
        public TypeEnum? Type { get; set; }
    }

    public partial class LayerRepeatMappingProperties
    {
        [JsonProperty("column", NullValueHandling = NullValueHandling.Ignore)]
        public Day Column { get; set; }

        [JsonProperty("layer", NullValueHandling = NullValueHandling.Ignore)]
        public Day Layer { get; set; }

        [JsonProperty("row", NullValueHandling = NullValueHandling.Ignore)]
        public Day Row { get; set; }
    }

    public partial class LayerRepeatSpec
    {
        [JsonProperty("additionalProperties", NullValueHandling = NullValueHandling.Ignore)]
        public bool? AdditionalProperties { get; set; }

        [JsonProperty("properties", NullValueHandling = NullValueHandling.Ignore)]
        public ConcatSpecGenericSpecProperties Properties { get; set; }

        [JsonProperty("required", NullValueHandling = NullValueHandling.Ignore)]
        public List<string> LayerRepeatSpecRequired { get; set; }

        [JsonProperty("type", NullValueHandling = NullValueHandling.Ignore)]
        public TypeEnum? Type { get; set; }
    }

    public partial class LayerSpec
    {
        [JsonProperty("additionalProperties", NullValueHandling = NullValueHandling.Ignore)]
        public bool? AdditionalProperties { get; set; }

        [JsonProperty("description", NullValueHandling = NullValueHandling.Ignore)]
        public string Description { get; set; }

        [JsonProperty("properties", NullValueHandling = NullValueHandling.Ignore)]
        public LayerSpecProperties Properties { get; set; }

        [JsonProperty("required", NullValueHandling = NullValueHandling.Ignore)]
        public List<string> LayerSpecRequired { get; set; }

        [JsonProperty("type", NullValueHandling = NullValueHandling.Ignore)]
        public TypeEnum? Type { get; set; }
    }

    public partial class LayerSpecProperties
    {
        [JsonProperty("data", NullValueHandling = NullValueHandling.Ignore)]
        public CornerRadiusEnd Data { get; set; }

        [JsonProperty("description", NullValueHandling = NullValueHandling.Ignore)]
        public Clip Description { get; set; }

        [JsonProperty("encoding", NullValueHandling = NullValueHandling.Ignore)]
        public FieldDefWithoutScale Encoding { get; set; }

        [JsonProperty("height", NullValueHandling = NullValueHandling.Ignore)]
        public Point Height { get; set; }

        [JsonProperty("layer", NullValueHandling = NullValueHandling.Ignore)]
        public Layer Layer { get; set; }

        [JsonProperty("name", NullValueHandling = NullValueHandling.Ignore)]
        public Clip Name { get; set; }

        [JsonProperty("projection", NullValueHandling = NullValueHandling.Ignore)]
        public FieldDefWithoutScale Projection { get; set; }

        [JsonProperty("resolve", NullValueHandling = NullValueHandling.Ignore)]
        public FieldDefWithoutScale Resolve { get; set; }

        [JsonProperty("title", NullValueHandling = NullValueHandling.Ignore)]
        public NormalizedSpec Title { get; set; }

        [JsonProperty("transform", NullValueHandling = NullValueHandling.Ignore)]
        public GroupbyClass Transform { get; set; }

        [JsonProperty("view", NullValueHandling = NullValueHandling.Ignore)]
        public FieldDefWithoutScale View { get; set; }

        [JsonProperty("width", NullValueHandling = NullValueHandling.Ignore)]
        public Point Width { get; set; }

        [JsonProperty("mark", NullValueHandling = NullValueHandling.Ignore)]
        public FieldDefWithoutScale Mark { get; set; }

        [JsonProperty("selection", NullValueHandling = NullValueHandling.Ignore)]
        public Selection Selection { get; set; }
    }

    public partial class Layer
    {
        [JsonProperty("description", NullValueHandling = NullValueHandling.Ignore)]
        public string Description { get; set; }

        [JsonProperty("items", NullValueHandling = NullValueHandling.Ignore)]
        public AggregateClass Items { get; set; }

        [JsonProperty("type", NullValueHandling = NullValueHandling.Ignore)]
        public TypeEnum? Type { get; set; }
    }

    public partial class Legend
    {
        [JsonProperty("additionalProperties", NullValueHandling = NullValueHandling.Ignore)]
        public bool? AdditionalProperties { get; set; }

        [JsonProperty("description", NullValueHandling = NullValueHandling.Ignore)]
        public string Description { get; set; }

        [JsonProperty("properties", NullValueHandling = NullValueHandling.Ignore)]
        public LegendProperties Properties { get; set; }

        [JsonProperty("type", NullValueHandling = NullValueHandling.Ignore)]
        public TypeEnum? Type { get; set; }
    }

    public partial class LegendProperties
    {
        [JsonProperty("aria", NullValueHandling = NullValueHandling.Ignore)]
        public Aria Aria { get; set; }

        [JsonProperty("clipHeight", NullValueHandling = NullValueHandling.Ignore)]
        public Aria ClipHeight { get; set; }

        [JsonProperty("columnPadding", NullValueHandling = NullValueHandling.Ignore)]
        public Aria ColumnPadding { get; set; }

        [JsonProperty("columns", NullValueHandling = NullValueHandling.Ignore)]
        public Aria Columns { get; set; }

        [JsonProperty("cornerRadius", NullValueHandling = NullValueHandling.Ignore)]
        public Aria CornerRadius { get; set; }

        [JsonProperty("description", NullValueHandling = NullValueHandling.Ignore)]
        public Aria Description { get; set; }

        [JsonProperty("direction", NullValueHandling = NullValueHandling.Ignore)]
        public FieldDefWithoutScale Direction { get; set; }

        [JsonProperty("fillColor", NullValueHandling = NullValueHandling.Ignore)]
        public Shape FillColor { get; set; }

        [JsonProperty("format", NullValueHandling = NullValueHandling.Ignore)]
        public CornerRadiusEnd Format { get; set; }

        [JsonProperty("formatType", NullValueHandling = NullValueHandling.Ignore)]
        public Clip FormatType { get; set; }

        [JsonProperty("gradientLength", NullValueHandling = NullValueHandling.Ignore)]
        public FontSize GradientLength { get; set; }

        [JsonProperty("gradientOpacity", NullValueHandling = NullValueHandling.Ignore)]
        public Aria GradientOpacity { get; set; }

        [JsonProperty("gradientStrokeColor", NullValueHandling = NullValueHandling.Ignore)]
        public Shape GradientStrokeColor { get; set; }

        [JsonProperty("gradientStrokeWidth", NullValueHandling = NullValueHandling.Ignore)]
        public FontSize GradientStrokeWidth { get; set; }

        [JsonProperty("gradientThickness", NullValueHandling = NullValueHandling.Ignore)]
        public FontSize GradientThickness { get; set; }

        [JsonProperty("gridAlign", NullValueHandling = NullValueHandling.Ignore)]
        public BlendClass GridAlign { get; set; }

        [JsonProperty("labelAlign", NullValueHandling = NullValueHandling.Ignore)]
        public BlendClass LabelAlign { get; set; }

        [JsonProperty("labelBaseline", NullValueHandling = NullValueHandling.Ignore)]
        public BlendClass LabelBaseline { get; set; }

        [JsonProperty("labelColor", NullValueHandling = NullValueHandling.Ignore)]
        public Shape LabelColor { get; set; }

        [JsonProperty("labelExpr", NullValueHandling = NullValueHandling.Ignore)]
        public Clip LabelExpr { get; set; }

        [JsonProperty("labelFont", NullValueHandling = NullValueHandling.Ignore)]
        public Aria LabelFont { get; set; }

        [JsonProperty("labelFontSize", NullValueHandling = NullValueHandling.Ignore)]
        public FontSize LabelFontSize { get; set; }

        [JsonProperty("labelFontStyle", NullValueHandling = NullValueHandling.Ignore)]
        public BlendClass LabelFontStyle { get; set; }

        [JsonProperty("labelFontWeight", NullValueHandling = NullValueHandling.Ignore)]
        public BlendClass LabelFontWeight { get; set; }

        [JsonProperty("labelLimit", NullValueHandling = NullValueHandling.Ignore)]
        public Aria LabelLimit { get; set; }

        [JsonProperty("labelOffset", NullValueHandling = NullValueHandling.Ignore)]
        public Aria LabelOffset { get; set; }

        [JsonProperty("labelOpacity", NullValueHandling = NullValueHandling.Ignore)]
        public Aria LabelOpacity { get; set; }

        [JsonProperty("labelOverlap", NullValueHandling = NullValueHandling.Ignore)]
        public BlendClass LabelOverlap { get; set; }

        [JsonProperty("labelPadding", NullValueHandling = NullValueHandling.Ignore)]
        public Aria LabelPadding { get; set; }

        [JsonProperty("labelSeparation", NullValueHandling = NullValueHandling.Ignore)]
        public Aria LabelSeparation { get; set; }

        [JsonProperty("legendX", NullValueHandling = NullValueHandling.Ignore)]
        public Aria LegendX { get; set; }

        [JsonProperty("legendY", NullValueHandling = NullValueHandling.Ignore)]
        public Aria LegendY { get; set; }

        [JsonProperty("offset", NullValueHandling = NullValueHandling.Ignore)]
        public Aria Offset { get; set; }

        [JsonProperty("orient", NullValueHandling = NullValueHandling.Ignore)]
        public FieldDefWithoutScale Orient { get; set; }

        [JsonProperty("padding", NullValueHandling = NullValueHandling.Ignore)]
        public Aria Padding { get; set; }

        [JsonProperty("rowPadding", NullValueHandling = NullValueHandling.Ignore)]
        public Aria RowPadding { get; set; }

        [JsonProperty("strokeColor", NullValueHandling = NullValueHandling.Ignore)]
        public Shape StrokeColor { get; set; }

        [JsonProperty("symbolDash", NullValueHandling = NullValueHandling.Ignore)]
        public Dash SymbolDash { get; set; }

        [JsonProperty("symbolDashOffset", NullValueHandling = NullValueHandling.Ignore)]
        public Aria SymbolDashOffset { get; set; }

        [JsonProperty("symbolFillColor", NullValueHandling = NullValueHandling.Ignore)]
        public Shape SymbolFillColor { get; set; }

        [JsonProperty("symbolLimit", NullValueHandling = NullValueHandling.Ignore)]
        public Aria SymbolLimit { get; set; }

        [JsonProperty("symbolOffset", NullValueHandling = NullValueHandling.Ignore)]
        public Aria SymbolOffset { get; set; }

        [JsonProperty("symbolOpacity", NullValueHandling = NullValueHandling.Ignore)]
        public Aria SymbolOpacity { get; set; }

        [JsonProperty("symbolSize", NullValueHandling = NullValueHandling.Ignore)]
        public FontSize SymbolSize { get; set; }

        [JsonProperty("symbolStrokeColor", NullValueHandling = NullValueHandling.Ignore)]
        public Shape SymbolStrokeColor { get; set; }

        [JsonProperty("symbolStrokeWidth", NullValueHandling = NullValueHandling.Ignore)]
        public FontSize SymbolStrokeWidth { get; set; }

        [JsonProperty("symbolType", NullValueHandling = NullValueHandling.Ignore)]
        public BlendClass SymbolType { get; set; }

        [JsonProperty("tickCount", NullValueHandling = NullValueHandling.Ignore)]
        public BlendClass TickCount { get; set; }

        [JsonProperty("tickMinStep", NullValueHandling = NullValueHandling.Ignore)]
        public CornerRadiusEnd TickMinStep { get; set; }

        [JsonProperty("title", NullValueHandling = NullValueHandling.Ignore)]
        public CornerRadiusEnd Title { get; set; }

        [JsonProperty("titleAlign", NullValueHandling = NullValueHandling.Ignore)]
        public BlendClass TitleAlign { get; set; }

        [JsonProperty("titleAnchor", NullValueHandling = NullValueHandling.Ignore)]
        public BlendClass TitleAnchor { get; set; }

        [JsonProperty("titleBaseline", NullValueHandling = NullValueHandling.Ignore)]
        public BlendClass TitleBaseline { get; set; }

        [JsonProperty("titleColor", NullValueHandling = NullValueHandling.Ignore)]
        public Shape TitleColor { get; set; }

        [JsonProperty("titleFont", NullValueHandling = NullValueHandling.Ignore)]
        public Aria TitleFont { get; set; }

        [JsonProperty("titleFontSize", NullValueHandling = NullValueHandling.Ignore)]
        public Aria TitleFontSize { get; set; }

        [JsonProperty("titleFontStyle", NullValueHandling = NullValueHandling.Ignore)]
        public BlendClass TitleFontStyle { get; set; }

        [JsonProperty("titleFontWeight", NullValueHandling = NullValueHandling.Ignore)]
        public BlendClass TitleFontWeight { get; set; }

        [JsonProperty("titleLimit", NullValueHandling = NullValueHandling.Ignore)]
        public FontSize TitleLimit { get; set; }

        [JsonProperty("titleLineHeight", NullValueHandling = NullValueHandling.Ignore)]
        public Aria TitleLineHeight { get; set; }

        [JsonProperty("titleOpacity", NullValueHandling = NullValueHandling.Ignore)]
        public Aria TitleOpacity { get; set; }

        [JsonProperty("titleOrient", NullValueHandling = NullValueHandling.Ignore)]
        public BlendClass TitleOrient { get; set; }

        [JsonProperty("titlePadding", NullValueHandling = NullValueHandling.Ignore)]
        public Aria TitlePadding { get; set; }

        [JsonProperty("type", NullValueHandling = NullValueHandling.Ignore)]
        public Mark Type { get; set; }

        [JsonProperty("values", NullValueHandling = NullValueHandling.Ignore)]
        public Values Values { get; set; }

        [JsonProperty("zindex", NullValueHandling = NullValueHandling.Ignore)]
        public Mark Zindex { get; set; }
    }

    public partial class LegendBinding
    {
        [JsonProperty("anyOf", NullValueHandling = NullValueHandling.Ignore)]
        public List<PointAnyOf> AnyOf { get; set; }
    }

    public partial class LegendConfig
    {
        [JsonProperty("additionalProperties", NullValueHandling = NullValueHandling.Ignore)]
        public bool? AdditionalProperties { get; set; }

        [JsonProperty("properties", NullValueHandling = NullValueHandling.Ignore)]
        public LegendConfigProperties Properties { get; set; }

        [JsonProperty("type", NullValueHandling = NullValueHandling.Ignore)]
        public TypeEnum? Type { get; set; }
    }

    public partial class LegendConfigProperties
    {
        [JsonProperty("aria", NullValueHandling = NullValueHandling.Ignore)]
        public Aria Aria { get; set; }

        [JsonProperty("clipHeight", NullValueHandling = NullValueHandling.Ignore)]
        public Aria ClipHeight { get; set; }

        [JsonProperty("columnPadding", NullValueHandling = NullValueHandling.Ignore)]
        public Aria ColumnPadding { get; set; }

        [JsonProperty("columns", NullValueHandling = NullValueHandling.Ignore)]
        public Aria Columns { get; set; }

        [JsonProperty("cornerRadius", NullValueHandling = NullValueHandling.Ignore)]
        public Aria CornerRadius { get; set; }

        [JsonProperty("description", NullValueHandling = NullValueHandling.Ignore)]
        public Aria Description { get; set; }

        [JsonProperty("direction", NullValueHandling = NullValueHandling.Ignore)]
        public FieldDefWithoutScale Direction { get; set; }

        [JsonProperty("disable", NullValueHandling = NullValueHandling.Ignore)]
        public Clip Disable { get; set; }

        [JsonProperty("fillColor", NullValueHandling = NullValueHandling.Ignore)]
        public Shape FillColor { get; set; }

        [JsonProperty("gradientDirection", NullValueHandling = NullValueHandling.Ignore)]
        public BlendClass GradientDirection { get; set; }

        [JsonProperty("gradientHorizontalMaxLength", NullValueHandling = NullValueHandling.Ignore)]
        public Clip GradientHorizontalMaxLength { get; set; }

        [JsonProperty("gradientHorizontalMinLength", NullValueHandling = NullValueHandling.Ignore)]
        public Clip GradientHorizontalMinLength { get; set; }

        [JsonProperty("gradientLabelLimit", NullValueHandling = NullValueHandling.Ignore)]
        public Aria GradientLabelLimit { get; set; }

        [JsonProperty("gradientLabelOffset", NullValueHandling = NullValueHandling.Ignore)]
        public Aria GradientLabelOffset { get; set; }

        [JsonProperty("gradientLength", NullValueHandling = NullValueHandling.Ignore)]
        public FontSize GradientLength { get; set; }

        [JsonProperty("gradientOpacity", NullValueHandling = NullValueHandling.Ignore)]
        public Aria GradientOpacity { get; set; }

        [JsonProperty("gradientStrokeColor", NullValueHandling = NullValueHandling.Ignore)]
        public Shape GradientStrokeColor { get; set; }

        [JsonProperty("gradientStrokeWidth", NullValueHandling = NullValueHandling.Ignore)]
        public FontSize GradientStrokeWidth { get; set; }

        [JsonProperty("gradientThickness", NullValueHandling = NullValueHandling.Ignore)]
        public FontSize GradientThickness { get; set; }

        [JsonProperty("gradientVerticalMaxLength", NullValueHandling = NullValueHandling.Ignore)]
        public Clip GradientVerticalMaxLength { get; set; }

        [JsonProperty("gradientVerticalMinLength", NullValueHandling = NullValueHandling.Ignore)]
        public Clip GradientVerticalMinLength { get; set; }

        [JsonProperty("gridAlign", NullValueHandling = NullValueHandling.Ignore)]
        public BlendClass GridAlign { get; set; }

        [JsonProperty("labelAlign", NullValueHandling = NullValueHandling.Ignore)]
        public BlendClass LabelAlign { get; set; }

        [JsonProperty("labelBaseline", NullValueHandling = NullValueHandling.Ignore)]
        public BlendClass LabelBaseline { get; set; }

        [JsonProperty("labelColor", NullValueHandling = NullValueHandling.Ignore)]
        public Shape LabelColor { get; set; }

        [JsonProperty("labelFont", NullValueHandling = NullValueHandling.Ignore)]
        public Aria LabelFont { get; set; }

        [JsonProperty("labelFontSize", NullValueHandling = NullValueHandling.Ignore)]
        public FontSize LabelFontSize { get; set; }

        [JsonProperty("labelFontStyle", NullValueHandling = NullValueHandling.Ignore)]
        public BlendClass LabelFontStyle { get; set; }

        [JsonProperty("labelFontWeight", NullValueHandling = NullValueHandling.Ignore)]
        public BlendClass LabelFontWeight { get; set; }

        [JsonProperty("labelLimit", NullValueHandling = NullValueHandling.Ignore)]
        public Aria LabelLimit { get; set; }

        [JsonProperty("labelOffset", NullValueHandling = NullValueHandling.Ignore)]
        public Aria LabelOffset { get; set; }

        [JsonProperty("labelOpacity", NullValueHandling = NullValueHandling.Ignore)]
        public Aria LabelOpacity { get; set; }

        [JsonProperty("labelOverlap", NullValueHandling = NullValueHandling.Ignore)]
        public NormalizedSpec LabelOverlap { get; set; }

        [JsonProperty("labelPadding", NullValueHandling = NullValueHandling.Ignore)]
        public Aria LabelPadding { get; set; }

        [JsonProperty("labelSeparation", NullValueHandling = NullValueHandling.Ignore)]
        public Aria LabelSeparation { get; set; }

        [JsonProperty("layout", NullValueHandling = NullValueHandling.Ignore)]
        public ColorDef Layout { get; set; }

        [JsonProperty("legendX", NullValueHandling = NullValueHandling.Ignore)]
        public Aria LegendX { get; set; }

        [JsonProperty("legendY", NullValueHandling = NullValueHandling.Ignore)]
        public Aria LegendY { get; set; }

        [JsonProperty("offset", NullValueHandling = NullValueHandling.Ignore)]
        public Aria Offset { get; set; }

        [JsonProperty("orient", NullValueHandling = NullValueHandling.Ignore)]
        public FieldDefWithoutScale Orient { get; set; }

        [JsonProperty("padding", NullValueHandling = NullValueHandling.Ignore)]
        public Aria Padding { get; set; }

        [JsonProperty("rowPadding", NullValueHandling = NullValueHandling.Ignore)]
        public Aria RowPadding { get; set; }

        [JsonProperty("strokeColor", NullValueHandling = NullValueHandling.Ignore)]
        public Shape StrokeColor { get; set; }

        [JsonProperty("strokeDash", NullValueHandling = NullValueHandling.Ignore)]
        public Dash StrokeDash { get; set; }

        [JsonProperty("strokeWidth", NullValueHandling = NullValueHandling.Ignore)]
        public Aria StrokeWidth { get; set; }

        [JsonProperty("symbolBaseFillColor", NullValueHandling = NullValueHandling.Ignore)]
        public Shape SymbolBaseFillColor { get; set; }

        [JsonProperty("symbolBaseStrokeColor", NullValueHandling = NullValueHandling.Ignore)]
        public Shape SymbolBaseStrokeColor { get; set; }

        [JsonProperty("symbolDash", NullValueHandling = NullValueHandling.Ignore)]
        public Dash SymbolDash { get; set; }

        [JsonProperty("symbolDashOffset", NullValueHandling = NullValueHandling.Ignore)]
        public Aria SymbolDashOffset { get; set; }

        [JsonProperty("symbolDirection", NullValueHandling = NullValueHandling.Ignore)]
        public BlendClass SymbolDirection { get; set; }

        [JsonProperty("symbolFillColor", NullValueHandling = NullValueHandling.Ignore)]
        public Shape SymbolFillColor { get; set; }

        [JsonProperty("symbolLimit", NullValueHandling = NullValueHandling.Ignore)]
        public Aria SymbolLimit { get; set; }

        [JsonProperty("symbolOffset", NullValueHandling = NullValueHandling.Ignore)]
        public Aria SymbolOffset { get; set; }

        [JsonProperty("symbolOpacity", NullValueHandling = NullValueHandling.Ignore)]
        public Aria SymbolOpacity { get; set; }

        [JsonProperty("symbolSize", NullValueHandling = NullValueHandling.Ignore)]
        public FontSize SymbolSize { get; set; }

        [JsonProperty("symbolStrokeColor", NullValueHandling = NullValueHandling.Ignore)]
        public Shape SymbolStrokeColor { get; set; }

        [JsonProperty("symbolStrokeWidth", NullValueHandling = NullValueHandling.Ignore)]
        public FontSize SymbolStrokeWidth { get; set; }

        [JsonProperty("symbolType", NullValueHandling = NullValueHandling.Ignore)]
        public BlendClass SymbolType { get; set; }

        [JsonProperty("tickCount", NullValueHandling = NullValueHandling.Ignore)]
        public BlendClass TickCount { get; set; }

        [JsonProperty("title", NullValueHandling = NullValueHandling.Ignore)]
        public Clip Title { get; set; }

        [JsonProperty("titleAlign", NullValueHandling = NullValueHandling.Ignore)]
        public BlendClass TitleAlign { get; set; }

        [JsonProperty("titleAnchor", NullValueHandling = NullValueHandling.Ignore)]
        public BlendClass TitleAnchor { get; set; }

        [JsonProperty("titleBaseline", NullValueHandling = NullValueHandling.Ignore)]
        public BlendClass TitleBaseline { get; set; }

        [JsonProperty("titleColor", NullValueHandling = NullValueHandling.Ignore)]
        public Shape TitleColor { get; set; }

        [JsonProperty("titleFont", NullValueHandling = NullValueHandling.Ignore)]
        public Aria TitleFont { get; set; }

        [JsonProperty("titleFontSize", NullValueHandling = NullValueHandling.Ignore)]
        public Aria TitleFontSize { get; set; }

        [JsonProperty("titleFontStyle", NullValueHandling = NullValueHandling.Ignore)]
        public BlendClass TitleFontStyle { get; set; }

        [JsonProperty("titleFontWeight", NullValueHandling = NullValueHandling.Ignore)]
        public BlendClass TitleFontWeight { get; set; }

        [JsonProperty("titleLimit", NullValueHandling = NullValueHandling.Ignore)]
        public FontSize TitleLimit { get; set; }

        [JsonProperty("titleLineHeight", NullValueHandling = NullValueHandling.Ignore)]
        public Aria TitleLineHeight { get; set; }

        [JsonProperty("titleOpacity", NullValueHandling = NullValueHandling.Ignore)]
        public Aria TitleOpacity { get; set; }

        [JsonProperty("titleOrient", NullValueHandling = NullValueHandling.Ignore)]
        public BlendClass TitleOrient { get; set; }

        [JsonProperty("titlePadding", NullValueHandling = NullValueHandling.Ignore)]
        public Aria TitlePadding { get; set; }

        [JsonProperty("unselectedOpacity", NullValueHandling = NullValueHandling.Ignore)]
        public Clip UnselectedOpacity { get; set; }

        [JsonProperty("zindex", NullValueHandling = NullValueHandling.Ignore)]
        public FontSize Zindex { get; set; }
    }

    public partial class ResolveMap
    {
        [JsonProperty("additionalProperties", NullValueHandling = NullValueHandling.Ignore)]
        public bool? AdditionalProperties { get; set; }

        [JsonProperty("properties", NullValueHandling = NullValueHandling.Ignore)]
        public Dictionary<string, ColorDef> Properties { get; set; }

        [JsonProperty("type", NullValueHandling = NullValueHandling.Ignore)]
        public TypeEnum? Type { get; set; }
    }

    public partial class LegendStreamBinding
    {
        [JsonProperty("additionalProperties", NullValueHandling = NullValueHandling.Ignore)]
        public bool? AdditionalProperties { get; set; }

        [JsonProperty("properties", NullValueHandling = NullValueHandling.Ignore)]
        public LegendStreamBindingProperties Properties { get; set; }

        [JsonProperty("required", NullValueHandling = NullValueHandling.Ignore)]
        public List<ConstElement> LegendStreamBindingRequired { get; set; }

        [JsonProperty("type", NullValueHandling = NullValueHandling.Ignore)]
        public TypeEnum? Type { get; set; }
    }

    public partial class LegendStreamBindingProperties
    {
        [JsonProperty("legend", NullValueHandling = NullValueHandling.Ignore)]
        public Color Legend { get; set; }
    }

    public partial class Gradient
    {
        [JsonProperty("additionalProperties", NullValueHandling = NullValueHandling.Ignore)]
        public bool? AdditionalProperties { get; set; }

        [JsonProperty("properties", NullValueHandling = NullValueHandling.Ignore)]
        public LinearGradientProperties Properties { get; set; }

        [JsonProperty("required", NullValueHandling = NullValueHandling.Ignore)]
        public List<string> GradientRequired { get; set; }

        [JsonProperty("type", NullValueHandling = NullValueHandling.Ignore)]
        public TypeEnum? Type { get; set; }
    }

    public partial class LinearGradientProperties
    {
        [JsonProperty("gradient", NullValueHandling = NullValueHandling.Ignore)]
        public BindElement Gradient { get; set; }

        [JsonProperty("id", NullValueHandling = NullValueHandling.Ignore)]
        public Element Id { get; set; }

        [JsonProperty("stops", NullValueHandling = NullValueHandling.Ignore)]
        public GroupbyClass Stops { get; set; }

        [JsonProperty("x1", NullValueHandling = NullValueHandling.Ignore)]
        public Clip X1 { get; set; }

        [JsonProperty("x2", NullValueHandling = NullValueHandling.Ignore)]
        public Clip X2 { get; set; }

        [JsonProperty("y1", NullValueHandling = NullValueHandling.Ignore)]
        public Clip Y1 { get; set; }

        [JsonProperty("y2", NullValueHandling = NullValueHandling.Ignore)]
        public Clip Y2 { get; set; }

        [JsonProperty("r1", NullValueHandling = NullValueHandling.Ignore)]
        public Clip R1 { get; set; }

        [JsonProperty("r2", NullValueHandling = NullValueHandling.Ignore)]
        public Clip R2 { get; set; }
    }

    public partial class LoessTransform
    {
        [JsonProperty("additionalProperties", NullValueHandling = NullValueHandling.Ignore)]
        public bool? AdditionalProperties { get; set; }

        [JsonProperty("properties", NullValueHandling = NullValueHandling.Ignore)]
        public LoessTransformProperties Properties { get; set; }

        [JsonProperty("required", NullValueHandling = NullValueHandling.Ignore)]
        public List<string> LoessTransformRequired { get; set; }

        [JsonProperty("type", NullValueHandling = NullValueHandling.Ignore)]
        public TypeEnum? Type { get; set; }
    }

    public partial class LoessTransformProperties
    {
        [JsonProperty("as", NullValueHandling = NullValueHandling.Ignore)]
        public Vector2DateTime As { get; set; }

        [JsonProperty("bandwidth", NullValueHandling = NullValueHandling.Ignore)]
        public Clip Bandwidth { get; set; }

        [JsonProperty("groupby", NullValueHandling = NullValueHandling.Ignore)]
        public GroupbyClass Groupby { get; set; }

        [JsonProperty("loess", NullValueHandling = NullValueHandling.Ignore)]
        public FieldDefWithoutScale Loess { get; set; }

        [JsonProperty("on", NullValueHandling = NullValueHandling.Ignore)]
        public FieldDefWithoutScale On { get; set; }
    }

    public partial class LogicalAndPredicate
    {
        [JsonProperty("additionalProperties", NullValueHandling = NullValueHandling.Ignore)]
        public bool? AdditionalProperties { get; set; }

        [JsonProperty("properties", NullValueHandling = NullValueHandling.Ignore)]
        public LogicalAndPredicateProperties Properties { get; set; }

        [JsonProperty("required", NullValueHandling = NullValueHandling.Ignore)]
        public List<string> LogicalAndPredicateRequired { get; set; }

        [JsonProperty("type", NullValueHandling = NullValueHandling.Ignore)]
        public TypeEnum? Type { get; set; }
    }

    public partial class LogicalAndPredicateProperties
    {
        [JsonProperty("and", NullValueHandling = NullValueHandling.Ignore)]
        public Between And { get; set; }
    }

    public partial class LogicalNotPredicate
    {
        [JsonProperty("additionalProperties", NullValueHandling = NullValueHandling.Ignore)]
        public bool? AdditionalProperties { get; set; }

        [JsonProperty("properties", NullValueHandling = NullValueHandling.Ignore)]
        public LogicalNotPredicateProperties Properties { get; set; }

        [JsonProperty("required", NullValueHandling = NullValueHandling.Ignore)]
        public List<string> LogicalNotPredicateRequired { get; set; }

        [JsonProperty("type", NullValueHandling = NullValueHandling.Ignore)]
        public TypeEnum? Type { get; set; }
    }

    public partial class LogicalNotPredicateProperties
    {
        [JsonProperty("not", NullValueHandling = NullValueHandling.Ignore)]
        public ColorDef Not { get; set; }
    }

    public partial class LogicalOrPredicate
    {
        [JsonProperty("additionalProperties", NullValueHandling = NullValueHandling.Ignore)]
        public bool? AdditionalProperties { get; set; }

        [JsonProperty("properties", NullValueHandling = NullValueHandling.Ignore)]
        public LogicalOrPredicateProperties Properties { get; set; }

        [JsonProperty("required", NullValueHandling = NullValueHandling.Ignore)]
        public List<string> LogicalOrPredicateRequired { get; set; }

        [JsonProperty("type", NullValueHandling = NullValueHandling.Ignore)]
        public TypeEnum? Type { get; set; }
    }

    public partial class LogicalOrPredicateProperties
    {
        [JsonProperty("or", NullValueHandling = NullValueHandling.Ignore)]
        public Between Or { get; set; }
    }

    public partial class LookupData
    {
        [JsonProperty("additionalProperties", NullValueHandling = NullValueHandling.Ignore)]
        public bool? AdditionalProperties { get; set; }

        [JsonProperty("properties", NullValueHandling = NullValueHandling.Ignore)]
        public LookupDataProperties Properties { get; set; }

        [JsonProperty("required", NullValueHandling = NullValueHandling.Ignore)]
        public List<string> LookupDataRequired { get; set; }

        [JsonProperty("type", NullValueHandling = NullValueHandling.Ignore)]
        public TypeEnum? Type { get; set; }
    }

    public partial class LookupDataProperties
    {
        [JsonProperty("data", NullValueHandling = NullValueHandling.Ignore)]
        public FieldDefWithoutScale Data { get; set; }

        [JsonProperty("fields", NullValueHandling = NullValueHandling.Ignore)]
        public GroupbyClass Fields { get; set; }

        [JsonProperty("key", NullValueHandling = NullValueHandling.Ignore)]
        public FieldDefWithoutScale Key { get; set; }
    }

    public partial class LookupSelection
    {
        [JsonProperty("additionalProperties", NullValueHandling = NullValueHandling.Ignore)]
        public bool? AdditionalProperties { get; set; }

        [JsonProperty("properties", NullValueHandling = NullValueHandling.Ignore)]
        public LookupSelectionProperties Properties { get; set; }

        [JsonProperty("required", NullValueHandling = NullValueHandling.Ignore)]
        public List<string> LookupSelectionRequired { get; set; }

        [JsonProperty("type", NullValueHandling = NullValueHandling.Ignore)]
        public TypeEnum? Type { get; set; }
    }

    public partial class LookupSelectionProperties
    {
        [JsonProperty("fields", NullValueHandling = NullValueHandling.Ignore)]
        public GroupbyClass Fields { get; set; }

        [JsonProperty("key", NullValueHandling = NullValueHandling.Ignore)]
        public FieldDefWithoutScale Key { get; set; }

        [JsonProperty("selection", NullValueHandling = NullValueHandling.Ignore)]
        public Clip Selection { get; set; }
    }

    public partial class LookupTransform
    {
        [JsonProperty("additionalProperties", NullValueHandling = NullValueHandling.Ignore)]
        public bool? AdditionalProperties { get; set; }

        [JsonProperty("properties", NullValueHandling = NullValueHandling.Ignore)]
        public LookupTransformProperties Properties { get; set; }

        [JsonProperty("required", NullValueHandling = NullValueHandling.Ignore)]
        public List<string> LookupTransformRequired { get; set; }

        [JsonProperty("type", NullValueHandling = NullValueHandling.Ignore)]
        public TypeEnum? Type { get; set; }
    }

    public partial class LookupTransformProperties
    {
        [JsonProperty("as", NullValueHandling = NullValueHandling.Ignore)]
        public AsElement As { get; set; }

        [JsonProperty("default", NullValueHandling = NullValueHandling.Ignore)]
        public Clip Default { get; set; }

        [JsonProperty("from", NullValueHandling = NullValueHandling.Ignore)]
        public NormalizedSpec From { get; set; }

        [JsonProperty("lookup", NullValueHandling = NullValueHandling.Ignore)]
        public Clip Lookup { get; set; }
    }

    public partial class MarkDef
    {
        [JsonProperty("additionalProperties", NullValueHandling = NullValueHandling.Ignore)]
        public bool? AdditionalProperties { get; set; }

        [JsonProperty("properties", NullValueHandling = NullValueHandling.Ignore)]
        public AreaConfigProperties Properties { get; set; }

        [JsonProperty("required", NullValueHandling = NullValueHandling.Ignore)]
        public List<string> MarkDefRequired { get; set; }

        [JsonProperty("type", NullValueHandling = NullValueHandling.Ignore)]
        public TypeEnum? Type { get; set; }
    }

    public partial class MultiSelection
    {
        [JsonProperty("additionalProperties", NullValueHandling = NullValueHandling.Ignore)]
        public bool? AdditionalProperties { get; set; }

        [JsonProperty("properties", NullValueHandling = NullValueHandling.Ignore)]
        public MultiSelectionProperties Properties { get; set; }

        [JsonProperty("required", NullValueHandling = NullValueHandling.Ignore)]
        public List<string> MultiSelectionRequired { get; set; }

        [JsonProperty("type", NullValueHandling = NullValueHandling.Ignore)]
        public TypeEnum? Type { get; set; }
    }

    public partial class MultiSelectionProperties
    {
        [JsonProperty("bind", NullValueHandling = NullValueHandling.Ignore)]
        public FieldDefWithoutScale Bind { get; set; }

        [JsonProperty("clear", NullValueHandling = NullValueHandling.Ignore)]
        public CornerRadiusEnd Clear { get; set; }

        [JsonProperty("empty", NullValueHandling = NullValueHandling.Ignore)]
        public Mark Empty { get; set; }

        [JsonProperty("encodings", NullValueHandling = NullValueHandling.Ignore)]
        public GroupbyClass Encodings { get; set; }

        [JsonProperty("fields", NullValueHandling = NullValueHandling.Ignore)]
        public GroupbyClass Fields { get; set; }

        [JsonProperty("init", NullValueHandling = NullValueHandling.Ignore)]
        public GroupbyClass Init { get; set; }

        [JsonProperty("nearest", NullValueHandling = NullValueHandling.Ignore)]
        public Clip Nearest { get; set; }

        [JsonProperty("on", NullValueHandling = NullValueHandling.Ignore)]
        public CornerRadiusEnd On { get; set; }

        [JsonProperty("resolve", NullValueHandling = NullValueHandling.Ignore)]
        public FieldDefWithoutScale Resolve { get; set; }

        [JsonProperty("toggle", NullValueHandling = NullValueHandling.Ignore)]
        public Order Toggle { get; set; }

        [JsonProperty("type", NullValueHandling = NullValueHandling.Ignore)]
        public BindElement Type { get; set; }
    }

    public partial class MultiSelectionConfig
    {
        [JsonProperty("additionalProperties", NullValueHandling = NullValueHandling.Ignore)]
        public bool? AdditionalProperties { get; set; }

        [JsonProperty("properties", NullValueHandling = NullValueHandling.Ignore)]
        public MultiSelectionProperties Properties { get; set; }

        [JsonProperty("type", NullValueHandling = NullValueHandling.Ignore)]
        public TypeEnum? Type { get; set; }
    }

    public partial class NamedData
    {
        [JsonProperty("additionalProperties", NullValueHandling = NullValueHandling.Ignore)]
        public bool? AdditionalProperties { get; set; }

        [JsonProperty("properties", NullValueHandling = NullValueHandling.Ignore)]
        public NamedDataProperties Properties { get; set; }

        [JsonProperty("required", NullValueHandling = NullValueHandling.Ignore)]
        public List<string> NamedDataRequired { get; set; }

        [JsonProperty("type", NullValueHandling = NullValueHandling.Ignore)]
        public TypeEnum? Type { get; set; }
    }

    public partial class NamedDataProperties
    {
        [JsonProperty("format", NullValueHandling = NullValueHandling.Ignore)]
        public FieldDefWithoutScale Format { get; set; }

        [JsonProperty("name", NullValueHandling = NullValueHandling.Ignore)]
        public Clip Name { get; set; }
    }

    public partial class OrderFieldDef
    {
        [JsonProperty("additionalProperties", NullValueHandling = NullValueHandling.Ignore)]
        public bool? AdditionalProperties { get; set; }

        [JsonProperty("properties", NullValueHandling = NullValueHandling.Ignore)]
        public OrderFieldDefProperties Properties { get; set; }

        [JsonProperty("type", NullValueHandling = NullValueHandling.Ignore)]
        public TypeEnum? Type { get; set; }
    }

    public partial class OrderFieldDefProperties
    {
        [JsonProperty("aggregate", NullValueHandling = NullValueHandling.Ignore)]
        public FieldDefWithoutScale Aggregate { get; set; }

        [JsonProperty("band", NullValueHandling = NullValueHandling.Ignore)]
        public Band Band { get; set; }

        [JsonProperty("bin", NullValueHandling = NullValueHandling.Ignore)]
        public Point Bin { get; set; }

        [JsonProperty("field", NullValueHandling = NullValueHandling.Ignore)]
        public FieldDefWithoutScale Field { get; set; }

        [JsonProperty("sort", NullValueHandling = NullValueHandling.Ignore)]
        public FieldDefWithoutScale Sort { get; set; }

        [JsonProperty("timeUnit", NullValueHandling = NullValueHandling.Ignore)]
        public NormalizedSpec TimeUnit { get; set; }

        [JsonProperty("title", NullValueHandling = NullValueHandling.Ignore)]
        public CornerRadiusEnd Title { get; set; }

        [JsonProperty("type", NullValueHandling = NullValueHandling.Ignore)]
        public FieldDefWithoutScale Type { get; set; }
    }

    public partial class OrderValueDef
    {
        [JsonProperty("additionalProperties", NullValueHandling = NullValueHandling.Ignore)]
        public bool? AdditionalProperties { get; set; }

        [JsonProperty("properties", NullValueHandling = NullValueHandling.Ignore)]
        public OrderValueDefProperties Properties { get; set; }

        [JsonProperty("required", NullValueHandling = NullValueHandling.Ignore)]
        public List<ExprRefRequired> OrderValueDefRequired { get; set; }

        [JsonProperty("type", NullValueHandling = NullValueHandling.Ignore)]
        public TypeEnum? Type { get; set; }

        [JsonProperty("minProperties", NullValueHandling = NullValueHandling.Ignore)]
        public long? MinProperties { get; set; }
    }

    public partial class OrderValueDefProperties
    {
        [JsonProperty("condition", NullValueHandling = NullValueHandling.Ignore)]
        public AsElement Condition { get; set; }

        [JsonProperty("value", NullValueHandling = NullValueHandling.Ignore)]
        public CornerRadiusEnd Value { get; set; }
    }

    public partial class Padding
    {
        [JsonProperty("anyOf", NullValueHandling = NullValueHandling.Ignore)]
        public List<PaddingAnyOf> AnyOf { get; set; }

        [JsonProperty("minimum", NullValueHandling = NullValueHandling.Ignore)]
        public long? Minimum { get; set; }
    }

    public partial class PaddingAnyOf
    {
        [JsonProperty("type", NullValueHandling = NullValueHandling.Ignore)]
        public TypeEnum? Type { get; set; }

        [JsonProperty("additionalProperties", NullValueHandling = NullValueHandling.Ignore)]
        public bool? AdditionalProperties { get; set; }

        [JsonProperty("properties", NullValueHandling = NullValueHandling.Ignore)]
        public HilariousProperties Properties { get; set; }
    }

    public partial class HilariousProperties
    {
        [JsonProperty("bottom", NullValueHandling = NullValueHandling.Ignore)]
        public Element Bottom { get; set; }

        [JsonProperty("left", NullValueHandling = NullValueHandling.Ignore)]
        public Element Left { get; set; }

        [JsonProperty("right", NullValueHandling = NullValueHandling.Ignore)]
        public Element Right { get; set; }

        [JsonProperty("top", NullValueHandling = NullValueHandling.Ignore)]
        public Element Top { get; set; }
    }

    public partial class Parameter
    {
        [JsonProperty("additionalProperties", NullValueHandling = NullValueHandling.Ignore)]
        public bool? AdditionalProperties { get; set; }

        [JsonProperty("properties", NullValueHandling = NullValueHandling.Ignore)]
        public ParameterProperties Properties { get; set; }

        [JsonProperty("required", NullValueHandling = NullValueHandling.Ignore)]
        public List<string> ParameterRequired { get; set; }

        [JsonProperty("type", NullValueHandling = NullValueHandling.Ignore)]
        public TypeEnum? Type { get; set; }
    }

    public partial class ParameterProperties
    {
        [JsonProperty("bind", NullValueHandling = NullValueHandling.Ignore)]
        public FieldDefWithoutScale Bind { get; set; }

        [JsonProperty("description", NullValueHandling = NullValueHandling.Ignore)]
        public Clip Description { get; set; }

        [JsonProperty("expr", NullValueHandling = NullValueHandling.Ignore)]
        public FieldDefWithoutScale Expr { get; set; }

        [JsonProperty("name", NullValueHandling = NullValueHandling.Ignore)]
        public Clip Name { get; set; }

        [JsonProperty("value", NullValueHandling = NullValueHandling.Ignore)]
        public FluffyValue Value { get; set; }
    }

    public partial class PivotTransform
    {
        [JsonProperty("additionalProperties", NullValueHandling = NullValueHandling.Ignore)]
        public bool? AdditionalProperties { get; set; }

        [JsonProperty("properties", NullValueHandling = NullValueHandling.Ignore)]
        public PivotTransformProperties Properties { get; set; }

        [JsonProperty("required", NullValueHandling = NullValueHandling.Ignore)]
        public List<string> PivotTransformRequired { get; set; }

        [JsonProperty("type", NullValueHandling = NullValueHandling.Ignore)]
        public TypeEnum? Type { get; set; }
    }

    public partial class PivotTransformProperties
    {
        [JsonProperty("groupby", NullValueHandling = NullValueHandling.Ignore)]
        public GroupbyClass Groupby { get; set; }

        [JsonProperty("limit", NullValueHandling = NullValueHandling.Ignore)]
        public Clip Limit { get; set; }

        [JsonProperty("op", NullValueHandling = NullValueHandling.Ignore)]
        public Clip Op { get; set; }

        [JsonProperty("pivot", NullValueHandling = NullValueHandling.Ignore)]
        public FieldDefWithoutScale Pivot { get; set; }

        [JsonProperty("value", NullValueHandling = NullValueHandling.Ignore)]
        public FieldDefWithoutScale Value { get; set; }
    }

    public partial class PositionDatumDef
    {
        [JsonProperty("additionalProperties", NullValueHandling = NullValueHandling.Ignore)]
        public bool? AdditionalProperties { get; set; }

        [JsonProperty("properties", NullValueHandling = NullValueHandling.Ignore)]
        public PositionDatumDefProperties Properties { get; set; }

        [JsonProperty("type", NullValueHandling = NullValueHandling.Ignore)]
        public TypeEnum? Type { get; set; }
    }

    public partial class PositionDatumDefProperties
    {
        [JsonProperty("axis", NullValueHandling = NullValueHandling.Ignore)]
        public CornerRadiusEnd Axis { get; set; }

        [JsonProperty("band", NullValueHandling = NullValueHandling.Ignore)]
        public Month Band { get; set; }

        [JsonProperty("datum", NullValueHandling = NullValueHandling.Ignore)]
        public NormalizedSpec Datum { get; set; }

        [JsonProperty("impute", NullValueHandling = NullValueHandling.Ignore)]
        public CornerRadiusEnd Impute { get; set; }

        [JsonProperty("scale", NullValueHandling = NullValueHandling.Ignore)]
        public CornerRadiusEnd Scale { get; set; }

        [JsonProperty("stack", NullValueHandling = NullValueHandling.Ignore)]
        public CornerRadiusEnd Stack { get; set; }

        [JsonProperty("type", NullValueHandling = NullValueHandling.Ignore)]
        public FieldDefWithoutScale Type { get; set; }
    }

    public partial class PositionDatumDefBase
    {
        [JsonProperty("additionalProperties", NullValueHandling = NullValueHandling.Ignore)]
        public bool? AdditionalProperties { get; set; }

        [JsonProperty("properties", NullValueHandling = NullValueHandling.Ignore)]
        public PositionDatumDefBaseProperties Properties { get; set; }

        [JsonProperty("type", NullValueHandling = NullValueHandling.Ignore)]
        public TypeEnum? Type { get; set; }
    }

    public partial class PositionDatumDefBaseProperties
    {
        [JsonProperty("band", NullValueHandling = NullValueHandling.Ignore)]
        public Month Band { get; set; }

        [JsonProperty("datum", NullValueHandling = NullValueHandling.Ignore)]
        public NormalizedSpec Datum { get; set; }

        [JsonProperty("scale", NullValueHandling = NullValueHandling.Ignore)]
        public CornerRadiusEnd Scale { get; set; }

        [JsonProperty("stack", NullValueHandling = NullValueHandling.Ignore)]
        public CornerRadiusEnd Stack { get; set; }

        [JsonProperty("type", NullValueHandling = NullValueHandling.Ignore)]
        public FieldDefWithoutScale Type { get; set; }
    }

    public partial class PositionFieldDef
    {
        [JsonProperty("additionalProperties", NullValueHandling = NullValueHandling.Ignore)]
        public bool? AdditionalProperties { get; set; }

        [JsonProperty("properties", NullValueHandling = NullValueHandling.Ignore)]
        public PositionFieldDefProperties Properties { get; set; }

        [JsonProperty("type", NullValueHandling = NullValueHandling.Ignore)]
        public TypeEnum? Type { get; set; }
    }

    public partial class PositionFieldDefProperties
    {
        [JsonProperty("aggregate", NullValueHandling = NullValueHandling.Ignore)]
        public FieldDefWithoutScale Aggregate { get; set; }

        [JsonProperty("axis", NullValueHandling = NullValueHandling.Ignore)]
        public CornerRadiusEnd Axis { get; set; }

        [JsonProperty("band", NullValueHandling = NullValueHandling.Ignore)]
        public Day Band { get; set; }

        [JsonProperty("bin", NullValueHandling = NullValueHandling.Ignore)]
        public Point Bin { get; set; }

        [JsonProperty("field", NullValueHandling = NullValueHandling.Ignore)]
        public FieldDefWithoutScale Field { get; set; }

        [JsonProperty("impute", NullValueHandling = NullValueHandling.Ignore)]
        public CornerRadiusEnd Impute { get; set; }

        [JsonProperty("scale", NullValueHandling = NullValueHandling.Ignore)]
        public CornerRadiusEnd Scale { get; set; }

        [JsonProperty("sort", NullValueHandling = NullValueHandling.Ignore)]
        public FieldDefWithoutScale Sort { get; set; }

        [JsonProperty("stack", NullValueHandling = NullValueHandling.Ignore)]
        public CornerRadiusEnd Stack { get; set; }

        [JsonProperty("timeUnit", NullValueHandling = NullValueHandling.Ignore)]
        public NormalizedSpec TimeUnit { get; set; }

        [JsonProperty("title", NullValueHandling = NullValueHandling.Ignore)]
        public CornerRadiusEnd Title { get; set; }

        [JsonProperty("type", NullValueHandling = NullValueHandling.Ignore)]
        public FieldDefWithoutScale Type { get; set; }
    }

    public partial class Projection
    {
        [JsonProperty("additionalProperties", NullValueHandling = NullValueHandling.Ignore)]
        public bool? AdditionalProperties { get; set; }

        [JsonProperty("properties", NullValueHandling = NullValueHandling.Ignore)]
        public ProjectionProperties Properties { get; set; }

        [JsonProperty("type", NullValueHandling = NullValueHandling.Ignore)]
        public TypeEnum? Type { get; set; }
    }

    public partial class ProjectionProperties
    {
        [JsonProperty("center", NullValueHandling = NullValueHandling.Ignore)]
        public FieldDefWithoutScale Center { get; set; }

        [JsonProperty("clipAngle", NullValueHandling = NullValueHandling.Ignore)]
        public Clip ClipAngle { get; set; }

        [JsonProperty("clipExtent", NullValueHandling = NullValueHandling.Ignore)]
        public FieldDefWithoutScale ClipExtent { get; set; }

        [JsonProperty("coefficient", NullValueHandling = NullValueHandling.Ignore)]
        public Element Coefficient { get; set; }

        [JsonProperty("distance", NullValueHandling = NullValueHandling.Ignore)]
        public Element Distance { get; set; }

        [JsonProperty("extent", NullValueHandling = NullValueHandling.Ignore)]
        public ColorDef Extent { get; set; }

        [JsonProperty("fit", NullValueHandling = NullValueHandling.Ignore)]
        public Fit Fit { get; set; }

        [JsonProperty("fraction", NullValueHandling = NullValueHandling.Ignore)]
        public Element Fraction { get; set; }

        [JsonProperty("lobes", NullValueHandling = NullValueHandling.Ignore)]
        public Element Lobes { get; set; }

        [JsonProperty("parallel", NullValueHandling = NullValueHandling.Ignore)]
        public Element Parallel { get; set; }

        [JsonProperty("parallels", NullValueHandling = NullValueHandling.Ignore)]
        public Day Parallels { get; set; }

        [JsonProperty("pointRadius", NullValueHandling = NullValueHandling.Ignore)]
        public Clip PointRadius { get; set; }

        [JsonProperty("precision", NullValueHandling = NullValueHandling.Ignore)]
        public Clip Precision { get; set; }

        [JsonProperty("radius", NullValueHandling = NullValueHandling.Ignore)]
        public Element Radius { get; set; }

        [JsonProperty("ratio", NullValueHandling = NullValueHandling.Ignore)]
        public Element Ratio { get; set; }

        [JsonProperty("reflectX", NullValueHandling = NullValueHandling.Ignore)]
        public Element ReflectX { get; set; }

        [JsonProperty("reflectY", NullValueHandling = NullValueHandling.Ignore)]
        public Element ReflectY { get; set; }

        [JsonProperty("rotate", NullValueHandling = NullValueHandling.Ignore)]
        public NormalizedSpec Rotate { get; set; }

        [JsonProperty("scale", NullValueHandling = NullValueHandling.Ignore)]
        public Clip Scale { get; set; }

        [JsonProperty("size", NullValueHandling = NullValueHandling.Ignore)]
        public ColorDef Size { get; set; }

        [JsonProperty("spacing", NullValueHandling = NullValueHandling.Ignore)]
        public Element Spacing { get; set; }

        [JsonProperty("tilt", NullValueHandling = NullValueHandling.Ignore)]
        public Element Tilt { get; set; }

        [JsonProperty("translate", NullValueHandling = NullValueHandling.Ignore)]
        public FieldDefWithoutScale Translate { get; set; }

        [JsonProperty("type", NullValueHandling = NullValueHandling.Ignore)]
        public FieldDefWithoutScale Type { get; set; }
    }

    public partial class QuantileTransform
    {
        [JsonProperty("additionalProperties", NullValueHandling = NullValueHandling.Ignore)]
        public bool? AdditionalProperties { get; set; }

        [JsonProperty("properties", NullValueHandling = NullValueHandling.Ignore)]
        public QuantileTransformProperties Properties { get; set; }

        [JsonProperty("required", NullValueHandling = NullValueHandling.Ignore)]
        public List<string> QuantileTransformRequired { get; set; }

        [JsonProperty("type", NullValueHandling = NullValueHandling.Ignore)]
        public TypeEnum? Type { get; set; }
    }

    public partial class QuantileTransformProperties
    {
        [JsonProperty("as", NullValueHandling = NullValueHandling.Ignore)]
        public Vector2DateTime As { get; set; }

        [JsonProperty("groupby", NullValueHandling = NullValueHandling.Ignore)]
        public GroupbyClass Groupby { get; set; }

        [JsonProperty("probs", NullValueHandling = NullValueHandling.Ignore)]
        public Day Probs { get; set; }

        [JsonProperty("quantile", NullValueHandling = NullValueHandling.Ignore)]
        public FieldDefWithoutScale Quantile { get; set; }

        [JsonProperty("step", NullValueHandling = NullValueHandling.Ignore)]
        public Clip Step { get; set; }
    }

    public partial class RangeConfig
    {
        [JsonProperty("additionalProperties", NullValueHandling = NullValueHandling.Ignore)]
        public Color AdditionalProperties { get; set; }

        [JsonProperty("properties", NullValueHandling = NullValueHandling.Ignore)]
        public RangeConfigProperties Properties { get; set; }

        [JsonProperty("type", NullValueHandling = NullValueHandling.Ignore)]
        public TypeEnum? Type { get; set; }
    }

    public partial class RangeConfigProperties
    {
        [JsonProperty("category", NullValueHandling = NullValueHandling.Ignore)]
        public AsElement Category { get; set; }

        [JsonProperty("diverging", NullValueHandling = NullValueHandling.Ignore)]
        public AsElement Diverging { get; set; }

        [JsonProperty("heatmap", NullValueHandling = NullValueHandling.Ignore)]
        public AsElement Heatmap { get; set; }

        [JsonProperty("ordinal", NullValueHandling = NullValueHandling.Ignore)]
        public AsElement Ordinal { get; set; }

        [JsonProperty("ramp", NullValueHandling = NullValueHandling.Ignore)]
        public AsElement Ramp { get; set; }

        [JsonProperty("symbol", NullValueHandling = NullValueHandling.Ignore)]
        public GroupbyClass Symbol { get; set; }
    }

    public partial class RangeRaw
    {
        [JsonProperty("items", NullValueHandling = NullValueHandling.Ignore)]
        public Color Items { get; set; }

        [JsonProperty("type", NullValueHandling = NullValueHandling.Ignore)]
        public TypeEnum? Type { get; set; }
    }

    public partial class RangeScheme
    {
        [JsonProperty("anyOf", NullValueHandling = NullValueHandling.Ignore)]
        public List<RangeSchemeAnyOf> AnyOf { get; set; }
    }

    public partial class RangeSchemeAnyOf
    {
        [JsonProperty("$ref", NullValueHandling = NullValueHandling.Ignore)]
        public string Ref { get; set; }

        [JsonProperty("additionalProperties", NullValueHandling = NullValueHandling.Ignore)]
        public bool? AdditionalProperties { get; set; }

        [JsonProperty("properties", NullValueHandling = NullValueHandling.Ignore)]
        public AmbitiousProperties Properties { get; set; }

        [JsonProperty("required", NullValueHandling = NullValueHandling.Ignore)]
        public List<string> AnyOfRequired { get; set; }

        [JsonProperty("type", NullValueHandling = NullValueHandling.Ignore)]
        public TypeEnum? Type { get; set; }
    }

    public partial class AmbitiousProperties
    {
        [JsonProperty("count", NullValueHandling = NullValueHandling.Ignore)]
        public Element Count { get; set; }

        [JsonProperty("extent", NullValueHandling = NullValueHandling.Ignore)]
        public RangeRawArray Extent { get; set; }

        [JsonProperty("scheme", NullValueHandling = NullValueHandling.Ignore)]
        public ScaleBins Scheme { get; set; }
    }

    public partial class ScaleBins
    {
        [JsonProperty("anyOf", NullValueHandling = NullValueHandling.Ignore)]
        public List<ScaleBinsAnyOf> AnyOf { get; set; }
    }

    public partial class RegressionTransform
    {
        [JsonProperty("additionalProperties", NullValueHandling = NullValueHandling.Ignore)]
        public bool? AdditionalProperties { get; set; }

        [JsonProperty("properties", NullValueHandling = NullValueHandling.Ignore)]
        public RegressionTransformProperties Properties { get; set; }

        [JsonProperty("required", NullValueHandling = NullValueHandling.Ignore)]
        public List<string> RegressionTransformRequired { get; set; }

        [JsonProperty("type", NullValueHandling = NullValueHandling.Ignore)]
        public TypeEnum? Type { get; set; }
    }

    public partial class RegressionTransformProperties
    {
        [JsonProperty("as", NullValueHandling = NullValueHandling.Ignore)]
        public Vector2DateTime As { get; set; }

        [JsonProperty("extent", NullValueHandling = NullValueHandling.Ignore)]
        public Vector2Boolean Extent { get; set; }

        [JsonProperty("groupby", NullValueHandling = NullValueHandling.Ignore)]
        public GroupbyClass Groupby { get; set; }

        [JsonProperty("method", NullValueHandling = NullValueHandling.Ignore)]
        public Mark Method { get; set; }

        [JsonProperty("on", NullValueHandling = NullValueHandling.Ignore)]
        public FieldDefWithoutScale On { get; set; }

        [JsonProperty("order", NullValueHandling = NullValueHandling.Ignore)]
        public Clip Order { get; set; }

        [JsonProperty("params", NullValueHandling = NullValueHandling.Ignore)]
        public Clip Params { get; set; }

        [JsonProperty("regression", NullValueHandling = NullValueHandling.Ignore)]
        public FieldDefWithoutScale Regression { get; set; }
    }

    public partial class RepeatMapping
    {
        [JsonProperty("additionalProperties", NullValueHandling = NullValueHandling.Ignore)]
        public bool? AdditionalProperties { get; set; }

        [JsonProperty("properties", NullValueHandling = NullValueHandling.Ignore)]
        public RepeatMappingProperties Properties { get; set; }

        [JsonProperty("type", NullValueHandling = NullValueHandling.Ignore)]
        public TypeEnum? Type { get; set; }
    }

    public partial class RepeatMappingProperties
    {
        [JsonProperty("column", NullValueHandling = NullValueHandling.Ignore)]
        public Mark Column { get; set; }

        [JsonProperty("row", NullValueHandling = NullValueHandling.Ignore)]
        public Mark Row { get; set; }
    }

    public partial class RepeatRef
    {
        [JsonProperty("additionalProperties", NullValueHandling = NullValueHandling.Ignore)]
        public bool? AdditionalProperties { get; set; }

        [JsonProperty("description", NullValueHandling = NullValueHandling.Ignore)]
        public string Description { get; set; }

        [JsonProperty("properties", NullValueHandling = NullValueHandling.Ignore)]
        public RepeatRefProperties Properties { get; set; }

        [JsonProperty("required", NullValueHandling = NullValueHandling.Ignore)]
        public List<string> RepeatRefRequired { get; set; }

        [JsonProperty("type", NullValueHandling = NullValueHandling.Ignore)]
        public TypeEnum? Type { get; set; }
    }

    public partial class RepeatRefProperties
    {
        [JsonProperty("repeat", NullValueHandling = NullValueHandling.Ignore)]
        public AggregateOp Repeat { get; set; }
    }

    public partial class Resolve
    {
        [JsonProperty("additionalProperties", NullValueHandling = NullValueHandling.Ignore)]
        public bool? AdditionalProperties { get; set; }

        [JsonProperty("description", NullValueHandling = NullValueHandling.Ignore)]
        public string Description { get; set; }

        [JsonProperty("properties", NullValueHandling = NullValueHandling.Ignore)]
        public ResolveProperties Properties { get; set; }

        [JsonProperty("type", NullValueHandling = NullValueHandling.Ignore)]
        public TypeEnum? Type { get; set; }
    }

    public partial class ResolveProperties
    {
        [JsonProperty("axis", NullValueHandling = NullValueHandling.Ignore)]
        public ColorDef Axis { get; set; }

        [JsonProperty("legend", NullValueHandling = NullValueHandling.Ignore)]
        public ColorDef Legend { get; set; }

        [JsonProperty("scale", NullValueHandling = NullValueHandling.Ignore)]
        public ColorDef Scale { get; set; }
    }

    public partial class RowCol
    {
        [JsonProperty("additionalProperties", NullValueHandling = NullValueHandling.Ignore)]
        public bool? AdditionalProperties { get; set; }

        [JsonProperty("properties", NullValueHandling = NullValueHandling.Ignore)]
        public RowColBooleanProperties Properties { get; set; }

        [JsonProperty("type", NullValueHandling = NullValueHandling.Ignore)]
        public TypeEnum? Type { get; set; }
    }

    public partial class RowColBooleanProperties
    {
        [JsonProperty("column", NullValueHandling = NullValueHandling.Ignore)]
        public Element Column { get; set; }

        [JsonProperty("row", NullValueHandling = NullValueHandling.Ignore)]
        public Element Row { get; set; }
    }

    public partial class RowColLayoutAlign
    {
        [JsonProperty("additionalProperties", NullValueHandling = NullValueHandling.Ignore)]
        public bool? AdditionalProperties { get; set; }

        [JsonProperty("properties", NullValueHandling = NullValueHandling.Ignore)]
        public RowColLayoutAlignProperties Properties { get; set; }

        [JsonProperty("type", NullValueHandling = NullValueHandling.Ignore)]
        public TypeEnum? Type { get; set; }
    }

    public partial class RowColLayoutAlignProperties
    {
        [JsonProperty("column", NullValueHandling = NullValueHandling.Ignore)]
        public ColorDef Column { get; set; }

        [JsonProperty("row", NullValueHandling = NullValueHandling.Ignore)]
        public ColorDef Row { get; set; }
    }

    public partial class SampleTransform
    {
        [JsonProperty("additionalProperties", NullValueHandling = NullValueHandling.Ignore)]
        public bool? AdditionalProperties { get; set; }

        [JsonProperty("properties", NullValueHandling = NullValueHandling.Ignore)]
        public SampleTransformProperties Properties { get; set; }

        [JsonProperty("required", NullValueHandling = NullValueHandling.Ignore)]
        public List<string> SampleTransformRequired { get; set; }

        [JsonProperty("type", NullValueHandling = NullValueHandling.Ignore)]
        public TypeEnum? Type { get; set; }
    }

    public partial class SampleTransformProperties
    {
        [JsonProperty("sample", NullValueHandling = NullValueHandling.Ignore)]
        public Clip Sample { get; set; }
    }

    public partial class Scale
    {
        [JsonProperty("additionalProperties", NullValueHandling = NullValueHandling.Ignore)]
        public bool? AdditionalProperties { get; set; }

        [JsonProperty("properties", NullValueHandling = NullValueHandling.Ignore)]
        public ScaleProperties Properties { get; set; }

        [JsonProperty("type", NullValueHandling = NullValueHandling.Ignore)]
        public TypeEnum? Type { get; set; }
    }

    public partial class ScaleProperties
    {
        [JsonProperty("align", NullValueHandling = NullValueHandling.Ignore)]
        public CornerRadiusEnd Align { get; set; }

        [JsonProperty("base", NullValueHandling = NullValueHandling.Ignore)]
        public CornerRadiusEnd Base { get; set; }

        [JsonProperty("bins", NullValueHandling = NullValueHandling.Ignore)]
        public FieldDefWithoutScale Bins { get; set; }

        [JsonProperty("clamp", NullValueHandling = NullValueHandling.Ignore)]
        public CornerRadiusEnd Clamp { get; set; }

        [JsonProperty("constant", NullValueHandling = NullValueHandling.Ignore)]
        public CornerRadiusEnd Constant { get; set; }

        [JsonProperty("domain", NullValueHandling = NullValueHandling.Ignore)]
        public Domain Domain { get; set; }

        [JsonProperty("domainMax", NullValueHandling = NullValueHandling.Ignore)]
        public CornerRadiusEnd DomainMax { get; set; }

        [JsonProperty("domainMid", NullValueHandling = NullValueHandling.Ignore)]
        public CornerRadiusEnd DomainMid { get; set; }

        [JsonProperty("domainMin", NullValueHandling = NullValueHandling.Ignore)]
        public CornerRadiusEnd DomainMin { get; set; }

        [JsonProperty("exponent", NullValueHandling = NullValueHandling.Ignore)]
        public CornerRadiusEnd Exponent { get; set; }

        [JsonProperty("interpolate", NullValueHandling = NullValueHandling.Ignore)]
        public NormalizedSpec Interpolate { get; set; }

        [JsonProperty("nice", NullValueHandling = NullValueHandling.Ignore)]
        public CornerRadiusEnd Nice { get; set; }

        [JsonProperty("padding", NullValueHandling = NullValueHandling.Ignore)]
        public Mark Padding { get; set; }

        [JsonProperty("paddingInner", NullValueHandling = NullValueHandling.Ignore)]
        public Mark PaddingInner { get; set; }

        [JsonProperty("paddingOuter", NullValueHandling = NullValueHandling.Ignore)]
        public Mark PaddingOuter { get; set; }

        [JsonProperty("range", NullValueHandling = NullValueHandling.Ignore)]
        public FluffyRange Range { get; set; }

        [JsonProperty("rangeMax", NullValueHandling = NullValueHandling.Ignore)]
        public CornerRadiusEnd RangeMax { get; set; }

        [JsonProperty("rangeMin", NullValueHandling = NullValueHandling.Ignore)]
        public CornerRadiusEnd RangeMin { get; set; }

        [JsonProperty("reverse", NullValueHandling = NullValueHandling.Ignore)]
        public CornerRadiusEnd Reverse { get; set; }

        [JsonProperty("round", NullValueHandling = NullValueHandling.Ignore)]
        public CornerRadiusEnd Round { get; set; }

        [JsonProperty("scheme", NullValueHandling = NullValueHandling.Ignore)]
        public CornerRadiusEnd Scheme { get; set; }

        [JsonProperty("type", NullValueHandling = NullValueHandling.Ignore)]
        public FieldDefWithoutScale Type { get; set; }

        [JsonProperty("zero", NullValueHandling = NullValueHandling.Ignore)]
        public CornerRadiusEnd Zero { get; set; }
    }

    public partial class Domain
    {
        [JsonProperty("anyOf", NullValueHandling = NullValueHandling.Ignore)]
        public List<FluffyAnyOf> AnyOf { get; set; }

        [JsonProperty("description", NullValueHandling = NullValueHandling.Ignore)]
        public string Description { get; set; }
    }

    public partial class FluffyRange
    {
        [JsonProperty("anyOf", NullValueHandling = NullValueHandling.Ignore)]
        public List<TentacledAnyOf> AnyOf { get; set; }

        [JsonProperty("description", NullValueHandling = NullValueHandling.Ignore)]
        public string Description { get; set; }
    }

    public partial class TentacledAnyOf
    {
        [JsonProperty("$ref", NullValueHandling = NullValueHandling.Ignore)]
        public string Ref { get; set; }

        [JsonProperty("items", NullValueHandling = NullValueHandling.Ignore)]
        public ScaleBins Items { get; set; }

        [JsonProperty("type", NullValueHandling = NullValueHandling.Ignore)]
        public TypeEnum? Type { get; set; }

        [JsonProperty("additionalProperties", NullValueHandling = NullValueHandling.Ignore)]
        public bool? AdditionalProperties { get; set; }

        [JsonProperty("properties", NullValueHandling = NullValueHandling.Ignore)]
        public CunningProperties Properties { get; set; }

        [JsonProperty("required", NullValueHandling = NullValueHandling.Ignore)]
        public List<string> AnyOfRequired { get; set; }
    }

    public partial class CunningProperties
    {
        [JsonProperty("field", NullValueHandling = NullValueHandling.Ignore)]
        public Element Field { get; set; }
    }

    public partial class ScaleConfig
    {
        [JsonProperty("additionalProperties", NullValueHandling = NullValueHandling.Ignore)]
        public bool? AdditionalProperties { get; set; }

        [JsonProperty("properties", NullValueHandling = NullValueHandling.Ignore)]
        public ScaleConfigProperties Properties { get; set; }

        [JsonProperty("type", NullValueHandling = NullValueHandling.Ignore)]
        public TypeEnum? Type { get; set; }
    }

    public partial class ScaleConfigProperties
    {
        [JsonProperty("bandPaddingInner", NullValueHandling = NullValueHandling.Ignore)]
        public Interpolate BandPaddingInner { get; set; }

        [JsonProperty("bandPaddingOuter", NullValueHandling = NullValueHandling.Ignore)]
        public Interpolate BandPaddingOuter { get; set; }

        [JsonProperty("barBandPaddingInner", NullValueHandling = NullValueHandling.Ignore)]
        public Interpolate BarBandPaddingInner { get; set; }

        [JsonProperty("clamp", NullValueHandling = NullValueHandling.Ignore)]
        public CornerRadiusEnd Clamp { get; set; }

        [JsonProperty("continuousPadding", NullValueHandling = NullValueHandling.Ignore)]
        public Interpolate ContinuousPadding { get; set; }

        [JsonProperty("maxBandSize", NullValueHandling = NullValueHandling.Ignore)]
        public Interpolate MaxBandSize { get; set; }

        [JsonProperty("maxFontSize", NullValueHandling = NullValueHandling.Ignore)]
        public Interpolate MaxFontSize { get; set; }

        [JsonProperty("maxOpacity", NullValueHandling = NullValueHandling.Ignore)]
        public Interpolate MaxOpacity { get; set; }

        [JsonProperty("maxSize", NullValueHandling = NullValueHandling.Ignore)]
        public Interpolate MaxSize { get; set; }

        [JsonProperty("maxStrokeWidth", NullValueHandling = NullValueHandling.Ignore)]
        public Interpolate MaxStrokeWidth { get; set; }

        [JsonProperty("minBandSize", NullValueHandling = NullValueHandling.Ignore)]
        public Interpolate MinBandSize { get; set; }

        [JsonProperty("minFontSize", NullValueHandling = NullValueHandling.Ignore)]
        public Interpolate MinFontSize { get; set; }

        [JsonProperty("minOpacity", NullValueHandling = NullValueHandling.Ignore)]
        public Interpolate MinOpacity { get; set; }

        [JsonProperty("minSize", NullValueHandling = NullValueHandling.Ignore)]
        public Interpolate MinSize { get; set; }

        [JsonProperty("minStrokeWidth", NullValueHandling = NullValueHandling.Ignore)]
        public Interpolate MinStrokeWidth { get; set; }

        [JsonProperty("pointPadding", NullValueHandling = NullValueHandling.Ignore)]
        public Interpolate PointPadding { get; set; }

        [JsonProperty("quantileCount", NullValueHandling = NullValueHandling.Ignore)]
        public Interpolate QuantileCount { get; set; }

        [JsonProperty("quantizeCount", NullValueHandling = NullValueHandling.Ignore)]
        public Interpolate QuantizeCount { get; set; }

        [JsonProperty("rectBandPaddingInner", NullValueHandling = NullValueHandling.Ignore)]
        public Interpolate RectBandPaddingInner { get; set; }

        [JsonProperty("round", NullValueHandling = NullValueHandling.Ignore)]
        public CornerRadiusEnd Round { get; set; }

        [JsonProperty("useUnaggregatedDomain", NullValueHandling = NullValueHandling.Ignore)]
        public Clip UseUnaggregatedDomain { get; set; }

        [JsonProperty("xReverse", NullValueHandling = NullValueHandling.Ignore)]
        public CornerRadiusEnd XReverse { get; set; }
    }

    public partial class ScaleInterpolateParams
    {
        [JsonProperty("additionalProperties", NullValueHandling = NullValueHandling.Ignore)]
        public bool? AdditionalProperties { get; set; }

        [JsonProperty("properties", NullValueHandling = NullValueHandling.Ignore)]
        public ScaleInterpolateParamsProperties Properties { get; set; }

        [JsonProperty("required", NullValueHandling = NullValueHandling.Ignore)]
        public List<string> ScaleInterpolateParamsRequired { get; set; }

        [JsonProperty("type", NullValueHandling = NullValueHandling.Ignore)]
        public TypeEnum? Type { get; set; }
    }

    public partial class ScaleInterpolateParamsProperties
    {
        [JsonProperty("gamma", NullValueHandling = NullValueHandling.Ignore)]
        public Element Gamma { get; set; }

        [JsonProperty("type", NullValueHandling = NullValueHandling.Ignore)]
        public AggregateOp Type { get; set; }
    }

    public partial class SchemeParams
    {
        [JsonProperty("additionalProperties", NullValueHandling = NullValueHandling.Ignore)]
        public bool? AdditionalProperties { get; set; }

        [JsonProperty("properties", NullValueHandling = NullValueHandling.Ignore)]
        public SchemeParamsProperties Properties { get; set; }

        [JsonProperty("required", NullValueHandling = NullValueHandling.Ignore)]
        public List<string> SchemeParamsRequired { get; set; }

        [JsonProperty("type", NullValueHandling = NullValueHandling.Ignore)]
        public TypeEnum? Type { get; set; }
    }

    public partial class SchemeParamsProperties
    {
        [JsonProperty("count", NullValueHandling = NullValueHandling.Ignore)]
        public Clip Count { get; set; }

        [JsonProperty("extent", NullValueHandling = NullValueHandling.Ignore)]
        public Interpolate Extent { get; set; }

        [JsonProperty("name", NullValueHandling = NullValueHandling.Ignore)]
        public Clip Name { get; set; }
    }

    public partial class SecondaryFieldDef
    {
        [JsonProperty("additionalProperties", NullValueHandling = NullValueHandling.Ignore)]
        public bool? AdditionalProperties { get; set; }

        [JsonProperty("description", NullValueHandling = NullValueHandling.Ignore)]
        public string Description { get; set; }

        [JsonProperty("properties", NullValueHandling = NullValueHandling.Ignore)]
        public LatLongFieldDefProperties Properties { get; set; }

        [JsonProperty("type", NullValueHandling = NullValueHandling.Ignore)]
        public TypeEnum? Type { get; set; }
    }

    public partial class SelectionConfig
    {
        [JsonProperty("additionalProperties", NullValueHandling = NullValueHandling.Ignore)]
        public bool? AdditionalProperties { get; set; }

        [JsonProperty("properties", NullValueHandling = NullValueHandling.Ignore)]
        public SelectionConfigProperties Properties { get; set; }

        [JsonProperty("type", NullValueHandling = NullValueHandling.Ignore)]
        public TypeEnum? Type { get; set; }
    }

    public partial class SelectionConfigProperties
    {
        [JsonProperty("interval", NullValueHandling = NullValueHandling.Ignore)]
        public FieldDefWithoutScale Interval { get; set; }

        [JsonProperty("multi", NullValueHandling = NullValueHandling.Ignore)]
        public FieldDefWithoutScale Multi { get; set; }

        [JsonProperty("single", NullValueHandling = NullValueHandling.Ignore)]
        public FieldDefWithoutScale Single { get; set; }
    }

    public partial class SelectionExtent
    {
        [JsonProperty("anyOf", NullValueHandling = NullValueHandling.Ignore)]
        public List<SelectionExtentAnyOf> AnyOf { get; set; }
    }

    public partial class SelectionExtentAnyOf
    {
        [JsonProperty("additionalProperties", NullValueHandling = NullValueHandling.Ignore)]
        public bool? AdditionalProperties { get; set; }

        [JsonProperty("properties", NullValueHandling = NullValueHandling.Ignore)]
        public MagentaProperties Properties { get; set; }

        [JsonProperty("required", NullValueHandling = NullValueHandling.Ignore)]
        public List<string> AnyOfRequired { get; set; }

        [JsonProperty("type", NullValueHandling = NullValueHandling.Ignore)]
        public TypeEnum? Type { get; set; }
    }

    public partial class MagentaProperties
    {
        [JsonProperty("field", NullValueHandling = NullValueHandling.Ignore)]
        public FieldDefWithoutScale Field { get; set; }

        [JsonProperty("selection", NullValueHandling = NullValueHandling.Ignore)]
        public Clip Selection { get; set; }

        [JsonProperty("encoding", NullValueHandling = NullValueHandling.Ignore)]
        public FieldDefWithoutScale Encoding { get; set; }
    }

    public partial class SelectionPredicate
    {
        [JsonProperty("additionalProperties", NullValueHandling = NullValueHandling.Ignore)]
        public bool? AdditionalProperties { get; set; }

        [JsonProperty("properties", NullValueHandling = NullValueHandling.Ignore)]
        public SelectionPredicateProperties Properties { get; set; }

        [JsonProperty("required", NullValueHandling = NullValueHandling.Ignore)]
        public List<string> SelectionPredicateRequired { get; set; }

        [JsonProperty("type", NullValueHandling = NullValueHandling.Ignore)]
        public TypeEnum? Type { get; set; }
    }

    public partial class SelectionPredicateProperties
    {
        [JsonProperty("selection", NullValueHandling = NullValueHandling.Ignore)]
        public FieldDefWithoutScale Selection { get; set; }
    }

    public partial class SequenceGenerator
    {
        [JsonProperty("additionalProperties", NullValueHandling = NullValueHandling.Ignore)]
        public bool? AdditionalProperties { get; set; }

        [JsonProperty("properties", NullValueHandling = NullValueHandling.Ignore)]
        public SequenceGeneratorProperties Properties { get; set; }

        [JsonProperty("required", NullValueHandling = NullValueHandling.Ignore)]
        public List<string> SequenceGeneratorRequired { get; set; }

        [JsonProperty("type", NullValueHandling = NullValueHandling.Ignore)]
        public TypeEnum? Type { get; set; }
    }

    public partial class SequenceGeneratorProperties
    {
        [JsonProperty("name", NullValueHandling = NullValueHandling.Ignore)]
        public Clip Name { get; set; }

        [JsonProperty("sequence", NullValueHandling = NullValueHandling.Ignore)]
        public FieldDefWithoutScale Sequence { get; set; }
    }

    public partial class SharedEncoding
    {
        [JsonProperty("additionalProperties", NullValueHandling = NullValueHandling.Ignore)]
        public bool? AdditionalProperties { get; set; }

        [JsonProperty("properties", NullValueHandling = NullValueHandling.Ignore)]
        public SharedEncodingProperties Properties { get; set; }

        [JsonProperty("type", NullValueHandling = NullValueHandling.Ignore)]
        public TypeEnum? Type { get; set; }
    }

    public partial class SharedEncodingProperties
    {
        [JsonProperty("angle", NullValueHandling = NullValueHandling.Ignore)]
        public ColorClass Angle { get; set; }

        [JsonProperty("color", NullValueHandling = NullValueHandling.Ignore)]
        public ColorClass Color { get; set; }

        [JsonProperty("description", NullValueHandling = NullValueHandling.Ignore)]
        public StringFieldDef Description { get; set; }

        [JsonProperty("detail", NullValueHandling = NullValueHandling.Ignore)]
        public AsElement Detail { get; set; }

        [JsonProperty("fill", NullValueHandling = NullValueHandling.Ignore)]
        public ColorClass Fill { get; set; }

        [JsonProperty("fillOpacity", NullValueHandling = NullValueHandling.Ignore)]
        public ColorClass FillOpacity { get; set; }

        [JsonProperty("href", NullValueHandling = NullValueHandling.Ignore)]
        public StringFieldDef Href { get; set; }

        [JsonProperty("key", NullValueHandling = NullValueHandling.Ignore)]
        public TypedFieldDef Key { get; set; }

        [JsonProperty("latitude", NullValueHandling = NullValueHandling.Ignore)]
        public Itude Latitude { get; set; }

        [JsonProperty("latitude2", NullValueHandling = NullValueHandling.Ignore)]
        public Latitude2 Latitude2 { get; set; }

        [JsonProperty("longitude", NullValueHandling = NullValueHandling.Ignore)]
        public Itude Longitude { get; set; }

        [JsonProperty("longitude2", NullValueHandling = NullValueHandling.Ignore)]
        public Latitude2 Longitude2 { get; set; }

        [JsonProperty("opacity", NullValueHandling = NullValueHandling.Ignore)]
        public ColorClass Opacity { get; set; }

        [JsonProperty("order", NullValueHandling = NullValueHandling.Ignore)]
        public AsElement Order { get; set; }

        [JsonProperty("radius", NullValueHandling = NullValueHandling.Ignore)]
        public Radius Radius { get; set; }

        [JsonProperty("radius2", NullValueHandling = NullValueHandling.Ignore)]
        public Latitude2 Radius2 { get; set; }

        [JsonProperty("shape", NullValueHandling = NullValueHandling.Ignore)]
        public ColorClass Shape { get; set; }

        [JsonProperty("size", NullValueHandling = NullValueHandling.Ignore)]
        public ColorClass Size { get; set; }

        [JsonProperty("stroke", NullValueHandling = NullValueHandling.Ignore)]
        public ColorClass Stroke { get; set; }

        [JsonProperty("strokeDash", NullValueHandling = NullValueHandling.Ignore)]
        public StrokeDash StrokeDash { get; set; }

        [JsonProperty("strokeOpacity", NullValueHandling = NullValueHandling.Ignore)]
        public ColorClass StrokeOpacity { get; set; }

        [JsonProperty("strokeWidth", NullValueHandling = NullValueHandling.Ignore)]
        public ColorClass StrokeWidth { get; set; }

        [JsonProperty("text", NullValueHandling = NullValueHandling.Ignore)]
        public Text Text { get; set; }

        [JsonProperty("theta", NullValueHandling = NullValueHandling.Ignore)]
        public Radius Theta { get; set; }

        [JsonProperty("theta2", NullValueHandling = NullValueHandling.Ignore)]
        public Latitude2 Theta2 { get; set; }

        [JsonProperty("tooltip", NullValueHandling = NullValueHandling.Ignore)]
        public AsElement Tooltip { get; set; }

        [JsonProperty("url", NullValueHandling = NullValueHandling.Ignore)]
        public StringFieldDef Url { get; set; }

        [JsonProperty("x", NullValueHandling = NullValueHandling.Ignore)]
        public Radius X { get; set; }

        [JsonProperty("x2", NullValueHandling = NullValueHandling.Ignore)]
        public Latitude2 X2 { get; set; }

        [JsonProperty("xError", NullValueHandling = NullValueHandling.Ignore)]
        public LatLongFieldDef XError { get; set; }

        [JsonProperty("xError2", NullValueHandling = NullValueHandling.Ignore)]
        public LatLongFieldDef XError2 { get; set; }

        [JsonProperty("y", NullValueHandling = NullValueHandling.Ignore)]
        public Radius Y { get; set; }

        [JsonProperty("y2", NullValueHandling = NullValueHandling.Ignore)]
        public Latitude2 Y2 { get; set; }

        [JsonProperty("yError", NullValueHandling = NullValueHandling.Ignore)]
        public LatLongFieldDef YError { get; set; }

        [JsonProperty("yError2", NullValueHandling = NullValueHandling.Ignore)]
        public LatLongFieldDef YError2 { get; set; }
    }

    public partial class ColorClass
    {
        [JsonProperty("additionalProperties", NullValueHandling = NullValueHandling.Ignore)]
        public bool? AdditionalProperties { get; set; }

        [JsonProperty("properties", NullValueHandling = NullValueHandling.Ignore)]
        public AngleProperties Properties { get; set; }

        [JsonProperty("type", NullValueHandling = NullValueHandling.Ignore)]
        public TypeEnum? Type { get; set; }
    }

    public partial class AngleProperties
    {
        [JsonProperty("aggregate", NullValueHandling = NullValueHandling.Ignore)]
        public FieldDefWithoutScale Aggregate { get; set; }

        [JsonProperty("band", NullValueHandling = NullValueHandling.Ignore)]
        public Band Band { get; set; }

        [JsonProperty("bin", NullValueHandling = NullValueHandling.Ignore)]
        public CornerRadiusEnd Bin { get; set; }

        [JsonProperty("condition", NullValueHandling = NullValueHandling.Ignore)]
        public FluffyCondition Condition { get; set; }

        [JsonProperty("datum", NullValueHandling = NullValueHandling.Ignore)]
        public NormalizedSpec Datum { get; set; }

        [JsonProperty("field", NullValueHandling = NullValueHandling.Ignore)]
        public FieldDefWithoutScale Field { get; set; }

        [JsonProperty("legend", NullValueHandling = NullValueHandling.Ignore)]
        public CornerRadiusEnd Legend { get; set; }

        [JsonProperty("scale", NullValueHandling = NullValueHandling.Ignore)]
        public CornerRadiusEnd Scale { get; set; }

        [JsonProperty("sort", NullValueHandling = NullValueHandling.Ignore)]
        public FieldDefWithoutScale Sort { get; set; }

        [JsonProperty("timeUnit", NullValueHandling = NullValueHandling.Ignore)]
        public NormalizedSpec TimeUnit { get; set; }

        [JsonProperty("title", NullValueHandling = NullValueHandling.Ignore)]
        public CornerRadiusEnd Title { get; set; }

        [JsonProperty("type", NullValueHandling = NullValueHandling.Ignore)]
        public PurpleType Type { get; set; }

        [JsonProperty("value", NullValueHandling = NullValueHandling.Ignore)]
        public CornerRadiusEnd Value { get; set; }
    }

    public partial class FluffyCondition
    {
        [JsonProperty("anyOf", NullValueHandling = NullValueHandling.Ignore)]
        public List<AsElement> AnyOf { get; set; }

        [JsonProperty("description", NullValueHandling = NullValueHandling.Ignore)]
        public string Description { get; set; }
    }

    public partial class PurpleType
    {
        [JsonProperty("anyOf", NullValueHandling = NullValueHandling.Ignore)]
        public List<FieldDefWithoutScale> AnyOf { get; set; }

        [JsonProperty("description", NullValueHandling = NullValueHandling.Ignore)]
        public string Description { get; set; }
    }

    public partial class StringFieldDef
    {
        [JsonProperty("additionalProperties", NullValueHandling = NullValueHandling.Ignore)]
        public bool? AdditionalProperties { get; set; }

        [JsonProperty("properties", NullValueHandling = NullValueHandling.Ignore)]
        public ConditionalPredicateStringFieldDefProperties Properties { get; set; }

        [JsonProperty("type", NullValueHandling = NullValueHandling.Ignore)]
        public TypeEnum? Type { get; set; }
    }

    public partial class TypedFieldDef
    {
        [JsonProperty("additionalProperties", NullValueHandling = NullValueHandling.Ignore)]
        public bool? AdditionalProperties { get; set; }

        [JsonProperty("properties", NullValueHandling = NullValueHandling.Ignore)]
        public OrderFieldDefProperties Properties { get; set; }

        [JsonProperty("type", NullValueHandling = NullValueHandling.Ignore)]
        public TypeEnum? Type { get; set; }

        [JsonProperty("description", NullValueHandling = NullValueHandling.Ignore)]
        public string Description { get; set; }
    }

    public partial class Itude
    {
        [JsonProperty("additionalProperties", NullValueHandling = NullValueHandling.Ignore)]
        public bool? AdditionalProperties { get; set; }

        [JsonProperty("properties", NullValueHandling = NullValueHandling.Ignore)]
        public LatitudeProperties Properties { get; set; }

        [JsonProperty("type", NullValueHandling = NullValueHandling.Ignore)]
        public TypeEnum? Type { get; set; }
    }

    public partial class LatitudeProperties
    {
        [JsonProperty("aggregate", NullValueHandling = NullValueHandling.Ignore)]
        public FieldDefWithoutScale Aggregate { get; set; }

        [JsonProperty("band", NullValueHandling = NullValueHandling.Ignore)]
        public Mark Band { get; set; }

        [JsonProperty("bin", NullValueHandling = NullValueHandling.Ignore)]
        public Clip Bin { get; set; }

        [JsonProperty("datum", NullValueHandling = NullValueHandling.Ignore)]
        public NormalizedSpec Datum { get; set; }

        [JsonProperty("field", NullValueHandling = NullValueHandling.Ignore)]
        public FieldDefWithoutScale Field { get; set; }

        [JsonProperty("timeUnit", NullValueHandling = NullValueHandling.Ignore)]
        public NormalizedSpec TimeUnit { get; set; }

        [JsonProperty("title", NullValueHandling = NullValueHandling.Ignore)]
        public CornerRadiusEnd Title { get; set; }

        [JsonProperty("type", NullValueHandling = NullValueHandling.Ignore)]
        public FluffyType Type { get; set; }

        [JsonProperty("value", NullValueHandling = NullValueHandling.Ignore)]
        public CornerRadiusEnd Value { get; set; }
    }

    public partial class FluffyType
    {
        [JsonProperty("anyOf", NullValueHandling = NullValueHandling.Ignore)]
        public List<BindElement> AnyOf { get; set; }

        [JsonProperty("description", NullValueHandling = NullValueHandling.Ignore)]
        public string Description { get; set; }
    }

    public partial class Latitude2
    {
        [JsonProperty("additionalProperties", NullValueHandling = NullValueHandling.Ignore)]
        public bool? AdditionalProperties { get; set; }

        [JsonProperty("properties", NullValueHandling = NullValueHandling.Ignore)]
        public Latitude2Properties Properties { get; set; }

        [JsonProperty("type", NullValueHandling = NullValueHandling.Ignore)]
        public TypeEnum? Type { get; set; }
    }

    public partial class Latitude2Properties
    {
        [JsonProperty("aggregate", NullValueHandling = NullValueHandling.Ignore)]
        public FieldDefWithoutScale Aggregate { get; set; }

        [JsonProperty("band", NullValueHandling = NullValueHandling.Ignore)]
        public Band Band { get; set; }

        [JsonProperty("bin", NullValueHandling = NullValueHandling.Ignore)]
        public Clip Bin { get; set; }

        [JsonProperty("datum", NullValueHandling = NullValueHandling.Ignore)]
        public NormalizedSpec Datum { get; set; }

        [JsonProperty("field", NullValueHandling = NullValueHandling.Ignore)]
        public FieldDefWithoutScale Field { get; set; }

        [JsonProperty("timeUnit", NullValueHandling = NullValueHandling.Ignore)]
        public NormalizedSpec TimeUnit { get; set; }

        [JsonProperty("title", NullValueHandling = NullValueHandling.Ignore)]
        public CornerRadiusEnd Title { get; set; }

        [JsonProperty("type", NullValueHandling = NullValueHandling.Ignore)]
        public FieldDefWithoutScale Type { get; set; }

        [JsonProperty("value", NullValueHandling = NullValueHandling.Ignore)]
        public Point Value { get; set; }
    }

    public partial class Radius
    {
        [JsonProperty("additionalProperties", NullValueHandling = NullValueHandling.Ignore)]
        public bool? AdditionalProperties { get; set; }

        [JsonProperty("properties", NullValueHandling = NullValueHandling.Ignore)]
        public RadiusProperties Properties { get; set; }

        [JsonProperty("type", NullValueHandling = NullValueHandling.Ignore)]
        public TypeEnum? Type { get; set; }
    }

    public partial class RadiusProperties
    {
        [JsonProperty("aggregate", NullValueHandling = NullValueHandling.Ignore)]
        public FieldDefWithoutScale Aggregate { get; set; }

        [JsonProperty("band", NullValueHandling = NullValueHandling.Ignore)]
        public Band Band { get; set; }

        [JsonProperty("bin", NullValueHandling = NullValueHandling.Ignore)]
        public Point Bin { get; set; }

        [JsonProperty("datum", NullValueHandling = NullValueHandling.Ignore)]
        public NormalizedSpec Datum { get; set; }

        [JsonProperty("field", NullValueHandling = NullValueHandling.Ignore)]
        public FieldDefWithoutScale Field { get; set; }

        [JsonProperty("scale", NullValueHandling = NullValueHandling.Ignore)]
        public CornerRadiusEnd Scale { get; set; }

        [JsonProperty("sort", NullValueHandling = NullValueHandling.Ignore)]
        public FieldDefWithoutScale Sort { get; set; }

        [JsonProperty("stack", NullValueHandling = NullValueHandling.Ignore)]
        public CornerRadiusEnd Stack { get; set; }

        [JsonProperty("timeUnit", NullValueHandling = NullValueHandling.Ignore)]
        public NormalizedSpec TimeUnit { get; set; }

        [JsonProperty("title", NullValueHandling = NullValueHandling.Ignore)]
        public CornerRadiusEnd Title { get; set; }

        [JsonProperty("type", NullValueHandling = NullValueHandling.Ignore)]
        public PurpleType Type { get; set; }

        [JsonProperty("value", NullValueHandling = NullValueHandling.Ignore)]
        public Point Value { get; set; }

        [JsonProperty("axis", NullValueHandling = NullValueHandling.Ignore)]
        public CornerRadiusEnd Axis { get; set; }

        [JsonProperty("impute", NullValueHandling = NullValueHandling.Ignore)]
        public CornerRadiusEnd Impute { get; set; }
    }

    public partial class StrokeDash
    {
        [JsonProperty("additionalProperties", NullValueHandling = NullValueHandling.Ignore)]
        public bool? AdditionalProperties { get; set; }

        [JsonProperty("properties", NullValueHandling = NullValueHandling.Ignore)]
        public StrokeDashProperties Properties { get; set; }

        [JsonProperty("type", NullValueHandling = NullValueHandling.Ignore)]
        public TypeEnum? Type { get; set; }
    }

    public partial class StrokeDashProperties
    {
        [JsonProperty("aggregate", NullValueHandling = NullValueHandling.Ignore)]
        public FieldDefWithoutScale Aggregate { get; set; }

        [JsonProperty("band", NullValueHandling = NullValueHandling.Ignore)]
        public Interpolate Band { get; set; }

        [JsonProperty("bin", NullValueHandling = NullValueHandling.Ignore)]
        public CornerRadiusEnd Bin { get; set; }

        [JsonProperty("condition", NullValueHandling = NullValueHandling.Ignore)]
        public FluffyCondition Condition { get; set; }

        [JsonProperty("datum", NullValueHandling = NullValueHandling.Ignore)]
        public NormalizedSpec Datum { get; set; }

        [JsonProperty("field", NullValueHandling = NullValueHandling.Ignore)]
        public FieldDefWithoutScale Field { get; set; }

        [JsonProperty("legend", NullValueHandling = NullValueHandling.Ignore)]
        public CornerRadiusEnd Legend { get; set; }

        [JsonProperty("scale", NullValueHandling = NullValueHandling.Ignore)]
        public CornerRadiusEnd Scale { get; set; }

        [JsonProperty("sort", NullValueHandling = NullValueHandling.Ignore)]
        public FieldDefWithoutScale Sort { get; set; }

        [JsonProperty("timeUnit", NullValueHandling = NullValueHandling.Ignore)]
        public NormalizedSpec TimeUnit { get; set; }

        [JsonProperty("title", NullValueHandling = NullValueHandling.Ignore)]
        public CornerRadiusEnd Title { get; set; }

        [JsonProperty("type", NullValueHandling = NullValueHandling.Ignore)]
        public PurpleType Type { get; set; }

        [JsonProperty("value", NullValueHandling = NullValueHandling.Ignore)]
        public PurpleValue Value { get; set; }
    }

    public partial class Text
    {
        [JsonProperty("additionalProperties", NullValueHandling = NullValueHandling.Ignore)]
        public bool? AdditionalProperties { get; set; }

        [JsonProperty("properties", NullValueHandling = NullValueHandling.Ignore)]
        public TextProperties Properties { get; set; }

        [JsonProperty("type", NullValueHandling = NullValueHandling.Ignore)]
        public TypeEnum? Type { get; set; }
    }

    public partial class TextProperties
    {
        [JsonProperty("aggregate", NullValueHandling = NullValueHandling.Ignore)]
        public FieldDefWithoutScale Aggregate { get; set; }

        [JsonProperty("band", NullValueHandling = NullValueHandling.Ignore)]
        public Month Band { get; set; }

        [JsonProperty("bin", NullValueHandling = NullValueHandling.Ignore)]
        public Point Bin { get; set; }

        [JsonProperty("condition", NullValueHandling = NullValueHandling.Ignore)]
        public FluffyCondition Condition { get; set; }

        [JsonProperty("datum", NullValueHandling = NullValueHandling.Ignore)]
        public NormalizedSpec Datum { get; set; }

        [JsonProperty("field", NullValueHandling = NullValueHandling.Ignore)]
        public FieldDefWithoutScale Field { get; set; }

        [JsonProperty("format", NullValueHandling = NullValueHandling.Ignore)]
        public CornerRadiusEnd Format { get; set; }

        [JsonProperty("formatType", NullValueHandling = NullValueHandling.Ignore)]
        public Clip FormatType { get; set; }

        [JsonProperty("labelExpr", NullValueHandling = NullValueHandling.Ignore)]
        public Clip LabelExpr { get; set; }

        [JsonProperty("timeUnit", NullValueHandling = NullValueHandling.Ignore)]
        public NormalizedSpec TimeUnit { get; set; }

        [JsonProperty("title", NullValueHandling = NullValueHandling.Ignore)]
        public CornerRadiusEnd Title { get; set; }

        [JsonProperty("type", NullValueHandling = NullValueHandling.Ignore)]
        public PurpleType Type { get; set; }

        [JsonProperty("value", NullValueHandling = NullValueHandling.Ignore)]
        public NormalizedSpec Value { get; set; }
    }

    public partial class SingleSelection
    {
        [JsonProperty("additionalProperties", NullValueHandling = NullValueHandling.Ignore)]
        public bool? AdditionalProperties { get; set; }

        [JsonProperty("properties", NullValueHandling = NullValueHandling.Ignore)]
        public SingleSelectionProperties Properties { get; set; }

        [JsonProperty("required", NullValueHandling = NullValueHandling.Ignore)]
        public List<string> SingleSelectionRequired { get; set; }

        [JsonProperty("type", NullValueHandling = NullValueHandling.Ignore)]
        public TypeEnum? Type { get; set; }
    }

    public partial class SingleSelectionProperties
    {
        [JsonProperty("bind", NullValueHandling = NullValueHandling.Ignore)]
        public Bind Bind { get; set; }

        [JsonProperty("clear", NullValueHandling = NullValueHandling.Ignore)]
        public CornerRadiusEnd Clear { get; set; }

        [JsonProperty("empty", NullValueHandling = NullValueHandling.Ignore)]
        public Mark Empty { get; set; }

        [JsonProperty("encodings", NullValueHandling = NullValueHandling.Ignore)]
        public GroupbyClass Encodings { get; set; }

        [JsonProperty("fields", NullValueHandling = NullValueHandling.Ignore)]
        public GroupbyClass Fields { get; set; }

        [JsonProperty("init", NullValueHandling = NullValueHandling.Ignore)]
        public FieldDefWithoutScale Init { get; set; }

        [JsonProperty("nearest", NullValueHandling = NullValueHandling.Ignore)]
        public Clip Nearest { get; set; }

        [JsonProperty("on", NullValueHandling = NullValueHandling.Ignore)]
        public CornerRadiusEnd On { get; set; }

        [JsonProperty("resolve", NullValueHandling = NullValueHandling.Ignore)]
        public FieldDefWithoutScale Resolve { get; set; }

        [JsonProperty("type", NullValueHandling = NullValueHandling.Ignore)]
        public Mark Type { get; set; }
    }

    public partial class Bind
    {
        [JsonProperty("anyOf", NullValueHandling = NullValueHandling.Ignore)]
        public List<BindAnyOf> AnyOf { get; set; }

        [JsonProperty("description", NullValueHandling = NullValueHandling.Ignore)]
        public string Description { get; set; }
    }

    public partial class BindAnyOf
    {
        [JsonProperty("$ref", NullValueHandling = NullValueHandling.Ignore)]
        public string Ref { get; set; }

        [JsonProperty("additionalProperties", NullValueHandling = NullValueHandling.Ignore)]
        public ColorDef AdditionalProperties { get; set; }

        [JsonProperty("type", NullValueHandling = NullValueHandling.Ignore)]
        public TypeEnum? Type { get; set; }
    }

    public partial class SingleSelectionConfig
    {
        [JsonProperty("additionalProperties", NullValueHandling = NullValueHandling.Ignore)]
        public bool? AdditionalProperties { get; set; }

        [JsonProperty("properties", NullValueHandling = NullValueHandling.Ignore)]
        public SingleSelectionProperties Properties { get; set; }

        [JsonProperty("type", NullValueHandling = NullValueHandling.Ignore)]
        public TypeEnum? Type { get; set; }
    }

    public partial class SortArray
    {
        [JsonProperty("anyOf", NullValueHandling = NullValueHandling.Ignore)]
        public List<UnionWithAnyOf> AnyOf { get; set; }
    }

    public partial class SortByEncoding
    {
        [JsonProperty("additionalProperties", NullValueHandling = NullValueHandling.Ignore)]
        public bool? AdditionalProperties { get; set; }

        [JsonProperty("properties", NullValueHandling = NullValueHandling.Ignore)]
        public SortByEncodingProperties Properties { get; set; }

        [JsonProperty("required", NullValueHandling = NullValueHandling.Ignore)]
        public List<string> SortByEncodingRequired { get; set; }

        [JsonProperty("type", NullValueHandling = NullValueHandling.Ignore)]
        public TypeEnum? Type { get; set; }
    }

    public partial class SortByEncodingProperties
    {
        [JsonProperty("encoding", NullValueHandling = NullValueHandling.Ignore)]
        public FieldDefWithoutScale Encoding { get; set; }

        [JsonProperty("order", NullValueHandling = NullValueHandling.Ignore)]
        public CornerRadiusEnd Order { get; set; }
    }

    public partial class SortField
    {
        [JsonProperty("additionalProperties", NullValueHandling = NullValueHandling.Ignore)]
        public bool? AdditionalProperties { get; set; }

        [JsonProperty("description", NullValueHandling = NullValueHandling.Ignore)]
        public string Description { get; set; }

        [JsonProperty("properties", NullValueHandling = NullValueHandling.Ignore)]
        public SortFieldProperties Properties { get; set; }

        [JsonProperty("required", NullValueHandling = NullValueHandling.Ignore)]
        public List<string> SortFieldRequired { get; set; }

        [JsonProperty("type", NullValueHandling = NullValueHandling.Ignore)]
        public TypeEnum? Type { get; set; }
    }

    public partial class SortFieldProperties
    {
        [JsonProperty("field", NullValueHandling = NullValueHandling.Ignore)]
        public FieldDefWithoutScale Field { get; set; }

        [JsonProperty("order", NullValueHandling = NullValueHandling.Ignore)]
        public CornerRadiusEnd Order { get; set; }
    }

    public partial class SphereGenerator
    {
        [JsonProperty("additionalProperties", NullValueHandling = NullValueHandling.Ignore)]
        public bool? AdditionalProperties { get; set; }

        [JsonProperty("properties", NullValueHandling = NullValueHandling.Ignore)]
        public SphereGeneratorProperties Properties { get; set; }

        [JsonProperty("required", NullValueHandling = NullValueHandling.Ignore)]
        public List<string> SphereGeneratorRequired { get; set; }

        [JsonProperty("type", NullValueHandling = NullValueHandling.Ignore)]
        public TypeEnum? Type { get; set; }
    }

    public partial class SphereGeneratorProperties
    {
        [JsonProperty("name", NullValueHandling = NullValueHandling.Ignore)]
        public Clip Name { get; set; }

        [JsonProperty("sphere", NullValueHandling = NullValueHandling.Ignore)]
        public Sphere Sphere { get; set; }
    }

    public partial class Sphere
    {
        [JsonProperty("anyOf", NullValueHandling = NullValueHandling.Ignore)]
        public List<SphereAnyOf> AnyOf { get; set; }

        [JsonProperty("description", NullValueHandling = NullValueHandling.Ignore)]
        public string Description { get; set; }
    }

    public partial class SphereAnyOf
    {
        [JsonProperty("const", NullValueHandling = NullValueHandling.Ignore)]
        public bool? Const { get; set; }

        [JsonProperty("type", NullValueHandling = NullValueHandling.Ignore)]
        public TypeEnum? Type { get; set; }

        [JsonProperty("additionalProperties", NullValueHandling = NullValueHandling.Ignore)]
        public bool? AdditionalProperties { get; set; }
    }

    public partial class StackTransform
    {
        [JsonProperty("additionalProperties", NullValueHandling = NullValueHandling.Ignore)]
        public bool? AdditionalProperties { get; set; }

        [JsonProperty("properties", NullValueHandling = NullValueHandling.Ignore)]
        public StackTransformProperties Properties { get; set; }

        [JsonProperty("required", NullValueHandling = NullValueHandling.Ignore)]
        public List<string> StackTransformRequired { get; set; }

        [JsonProperty("type", NullValueHandling = NullValueHandling.Ignore)]
        public TypeEnum? Type { get; set; }
    }

    public partial class StackTransformProperties
    {
        [JsonProperty("as", NullValueHandling = NullValueHandling.Ignore)]
        public PurpleAs As { get; set; }

        [JsonProperty("groupby", NullValueHandling = NullValueHandling.Ignore)]
        public GroupbyClass Groupby { get; set; }

        [JsonProperty("offset", NullValueHandling = NullValueHandling.Ignore)]
        public Mark Offset { get; set; }

        [JsonProperty("sort", NullValueHandling = NullValueHandling.Ignore)]
        public GroupbyClass Sort { get; set; }

        [JsonProperty("stack", NullValueHandling = NullValueHandling.Ignore)]
        public FieldDefWithoutScale Stack { get; set; }
    }

    public partial class PurpleAs
    {
        [JsonProperty("anyOf", NullValueHandling = NullValueHandling.Ignore)]
        public List<Vector2DateTime> AnyOf { get; set; }

        [JsonProperty("description", NullValueHandling = NullValueHandling.Ignore)]
        public string Description { get; set; }
    }

    public partial class Step
    {
        [JsonProperty("additionalProperties", NullValueHandling = NullValueHandling.Ignore)]
        public bool? AdditionalProperties { get; set; }

        [JsonProperty("properties", NullValueHandling = NullValueHandling.Ignore)]
        public StepProperties Properties { get; set; }

        [JsonProperty("required", NullValueHandling = NullValueHandling.Ignore)]
        public List<string> StepRequired { get; set; }

        [JsonProperty("type", NullValueHandling = NullValueHandling.Ignore)]
        public TypeEnum? Type { get; set; }
    }

    public partial class StepProperties
    {
        [JsonProperty("step", NullValueHandling = NullValueHandling.Ignore)]
        public Clip Step { get; set; }
    }

    public partial class StyleConfigIndex
    {
        [JsonProperty("additionalProperties", NullValueHandling = NullValueHandling.Ignore)]
        public AggregateClass AdditionalProperties { get; set; }

        [JsonProperty("properties", NullValueHandling = NullValueHandling.Ignore)]
        public Dictionary<string, FieldDefWithoutScale> Properties { get; set; }

        [JsonProperty("type", NullValueHandling = NullValueHandling.Ignore)]
        public TypeEnum? Type { get; set; }
    }

    public partial class TimeIntervalStep
    {
        [JsonProperty("additionalProperties", NullValueHandling = NullValueHandling.Ignore)]
        public bool? AdditionalProperties { get; set; }

        [JsonProperty("properties", NullValueHandling = NullValueHandling.Ignore)]
        public TimeIntervalStepProperties Properties { get; set; }

        [JsonProperty("required", NullValueHandling = NullValueHandling.Ignore)]
        public List<string> TimeIntervalStepRequired { get; set; }

        [JsonProperty("type", NullValueHandling = NullValueHandling.Ignore)]
        public TypeEnum? Type { get; set; }
    }

    public partial class TimeIntervalStepProperties
    {
        [JsonProperty("interval", NullValueHandling = NullValueHandling.Ignore)]
        public ColorDef Interval { get; set; }

        [JsonProperty("step", NullValueHandling = NullValueHandling.Ignore)]
        public Element Step { get; set; }
    }

    public partial class TimeUnitParams
    {
        [JsonProperty("additionalProperties", NullValueHandling = NullValueHandling.Ignore)]
        public bool? AdditionalProperties { get; set; }

        [JsonProperty("properties", NullValueHandling = NullValueHandling.Ignore)]
        public TimeUnitParamsProperties Properties { get; set; }

        [JsonProperty("type", NullValueHandling = NullValueHandling.Ignore)]
        public TypeEnum? Type { get; set; }
    }

    public partial class TimeUnitParamsProperties
    {
        [JsonProperty("maxbins", NullValueHandling = NullValueHandling.Ignore)]
        public Clip Maxbins { get; set; }

        [JsonProperty("step", NullValueHandling = NullValueHandling.Ignore)]
        public Clip Step { get; set; }

        [JsonProperty("unit", NullValueHandling = NullValueHandling.Ignore)]
        public FieldDefWithoutScale Unit { get; set; }

        [JsonProperty("utc", NullValueHandling = NullValueHandling.Ignore)]
        public Clip Utc { get; set; }
    }

    public partial class TimeUnitTransform
    {
        [JsonProperty("additionalProperties", NullValueHandling = NullValueHandling.Ignore)]
        public bool? AdditionalProperties { get; set; }

        [JsonProperty("properties", NullValueHandling = NullValueHandling.Ignore)]
        public TimeUnitTransformProperties Properties { get; set; }

        [JsonProperty("required", NullValueHandling = NullValueHandling.Ignore)]
        public List<string> TimeUnitTransformRequired { get; set; }

        [JsonProperty("type", NullValueHandling = NullValueHandling.Ignore)]
        public TypeEnum? Type { get; set; }
    }

    public partial class TimeUnitTransformProperties
    {
        [JsonProperty("as", NullValueHandling = NullValueHandling.Ignore)]
        public FieldDefWithoutScale As { get; set; }

        [JsonProperty("field", NullValueHandling = NullValueHandling.Ignore)]
        public FieldDefWithoutScale Field { get; set; }

        [JsonProperty("timeUnit", NullValueHandling = NullValueHandling.Ignore)]
        public NormalizedSpec TimeUnit { get; set; }
    }

    public partial class TitleParams
    {
        [JsonProperty("additionalProperties", NullValueHandling = NullValueHandling.Ignore)]
        public bool? AdditionalProperties { get; set; }

        [JsonProperty("properties", NullValueHandling = NullValueHandling.Ignore)]
        public TitleParamsProperties Properties { get; set; }

        [JsonProperty("required", NullValueHandling = NullValueHandling.Ignore)]
        public List<string> TitleParamsRequired { get; set; }

        [JsonProperty("type", NullValueHandling = NullValueHandling.Ignore)]
        public TypeEnum? Type { get; set; }
    }

    public partial class TitleParamsProperties
    {
        [JsonProperty("align", NullValueHandling = NullValueHandling.Ignore)]
        public FieldDefWithoutScale Align { get; set; }

        [JsonProperty("anchor", NullValueHandling = NullValueHandling.Ignore)]
        public FieldDefWithoutScale Anchor { get; set; }

        [JsonProperty("angle", NullValueHandling = NullValueHandling.Ignore)]
        public Aria Angle { get; set; }

        [JsonProperty("aria", NullValueHandling = NullValueHandling.Ignore)]
        public Aria Aria { get; set; }

        [JsonProperty("baseline", NullValueHandling = NullValueHandling.Ignore)]
        public FieldDefWithoutScale Baseline { get; set; }

        [JsonProperty("color", NullValueHandling = NullValueHandling.Ignore)]
        public Shape Color { get; set; }

        [JsonProperty("dx", NullValueHandling = NullValueHandling.Ignore)]
        public Aria Dx { get; set; }

        [JsonProperty("dy", NullValueHandling = NullValueHandling.Ignore)]
        public Aria Dy { get; set; }

        [JsonProperty("font", NullValueHandling = NullValueHandling.Ignore)]
        public Aria Font { get; set; }

        [JsonProperty("fontSize", NullValueHandling = NullValueHandling.Ignore)]
        public FontSize FontSize { get; set; }

        [JsonProperty("fontStyle", NullValueHandling = NullValueHandling.Ignore)]
        public BlendClass FontStyle { get; set; }

        [JsonProperty("fontWeight", NullValueHandling = NullValueHandling.Ignore)]
        public BlendClass FontWeight { get; set; }

        [JsonProperty("frame", NullValueHandling = NullValueHandling.Ignore)]
        public Shape Frame { get; set; }

        [JsonProperty("limit", NullValueHandling = NullValueHandling.Ignore)]
        public FontSize Limit { get; set; }

        [JsonProperty("lineHeight", NullValueHandling = NullValueHandling.Ignore)]
        public Aria LineHeight { get; set; }

        [JsonProperty("offset", NullValueHandling = NullValueHandling.Ignore)]
        public Aria Offset { get; set; }

        [JsonProperty("orient", NullValueHandling = NullValueHandling.Ignore)]
        public BlendClass Orient { get; set; }

        [JsonProperty("style", NullValueHandling = NullValueHandling.Ignore)]
        public Style Style { get; set; }

        [JsonProperty("subtitle", NullValueHandling = NullValueHandling.Ignore)]
        public FieldDefWithoutScale Subtitle { get; set; }

        [JsonProperty("subtitleColor", NullValueHandling = NullValueHandling.Ignore)]
        public Shape SubtitleColor { get; set; }

        [JsonProperty("subtitleFont", NullValueHandling = NullValueHandling.Ignore)]
        public Aria SubtitleFont { get; set; }

        [JsonProperty("subtitleFontSize", NullValueHandling = NullValueHandling.Ignore)]
        public FontSize SubtitleFontSize { get; set; }

        [JsonProperty("subtitleFontStyle", NullValueHandling = NullValueHandling.Ignore)]
        public BlendClass SubtitleFontStyle { get; set; }

        [JsonProperty("subtitleFontWeight", NullValueHandling = NullValueHandling.Ignore)]
        public BlendClass SubtitleFontWeight { get; set; }

        [JsonProperty("subtitleLineHeight", NullValueHandling = NullValueHandling.Ignore)]
        public Aria SubtitleLineHeight { get; set; }

        [JsonProperty("subtitlePadding", NullValueHandling = NullValueHandling.Ignore)]
        public Aria SubtitlePadding { get; set; }

        [JsonProperty("text", NullValueHandling = NullValueHandling.Ignore)]
        public NormalizedSpec Text { get; set; }

        [JsonProperty("zindex", NullValueHandling = NullValueHandling.Ignore)]
        public Interpolate Zindex { get; set; }
    }

    public partial class TooltipContent
    {
        [JsonProperty("additionalProperties", NullValueHandling = NullValueHandling.Ignore)]
        public bool? AdditionalProperties { get; set; }

        [JsonProperty("properties", NullValueHandling = NullValueHandling.Ignore)]
        public TooltipContentProperties Properties { get; set; }

        [JsonProperty("required", NullValueHandling = NullValueHandling.Ignore)]
        public List<string> TooltipContentRequired { get; set; }

        [JsonProperty("type", NullValueHandling = NullValueHandling.Ignore)]
        public TypeEnum? Type { get; set; }
    }

    public partial class TooltipContentProperties
    {
        [JsonProperty("content", NullValueHandling = NullValueHandling.Ignore)]
        public AggregateOp Content { get; set; }
    }

    public partial class TopLevelFacetSpec
    {
        [JsonProperty("additionalProperties", NullValueHandling = NullValueHandling.Ignore)]
        public bool? AdditionalProperties { get; set; }

        [JsonProperty("properties", NullValueHandling = NullValueHandling.Ignore)]
        public TopLevelFacetSpecProperties Properties { get; set; }

        [JsonProperty("required", NullValueHandling = NullValueHandling.Ignore)]
        public List<string> TopLevelFacetSpecRequired { get; set; }

        [JsonProperty("type", NullValueHandling = NullValueHandling.Ignore)]
        public TypeEnum? Type { get; set; }
    }

    public partial class TopLevelFacetSpecProperties
    {
        [JsonProperty("$schema", NullValueHandling = NullValueHandling.Ignore)]
        public Schema Schema { get; set; }

        [JsonProperty("align", NullValueHandling = NullValueHandling.Ignore)]
        public NormalizedSpec Align { get; set; }

        [JsonProperty("autosize", NullValueHandling = NullValueHandling.Ignore)]
        public NormalizedSpec Autosize { get; set; }

        [JsonProperty("background", NullValueHandling = NullValueHandling.Ignore)]
        public NormalizedSpec Background { get; set; }

        [JsonProperty("bounds", NullValueHandling = NullValueHandling.Ignore)]
        public Mark Bounds { get; set; }

        [JsonProperty("center", NullValueHandling = NullValueHandling.Ignore)]
        public CornerRadiusEnd Center { get; set; }

        [JsonProperty("columns", NullValueHandling = NullValueHandling.Ignore)]
        public Clip Columns { get; set; }

        [JsonProperty("config", NullValueHandling = NullValueHandling.Ignore)]
        public FieldDefWithoutScale Config { get; set; }

        [JsonProperty("data", NullValueHandling = NullValueHandling.Ignore)]
        public CornerRadiusEnd Data { get; set; }

        [JsonProperty("datasets", NullValueHandling = NullValueHandling.Ignore)]
        public FieldDefWithoutScale Datasets { get; set; }

        [JsonProperty("description", NullValueHandling = NullValueHandling.Ignore)]
        public Clip Description { get; set; }

        [JsonProperty("facet", NullValueHandling = NullValueHandling.Ignore)]
        public NormalizedSpec Facet { get; set; }

        [JsonProperty("name", NullValueHandling = NullValueHandling.Ignore)]
        public Clip Name { get; set; }

        [JsonProperty("padding", NullValueHandling = NullValueHandling.Ignore)]
        public NormalizedSpec Padding { get; set; }

        [JsonProperty("params", NullValueHandling = NullValueHandling.Ignore)]
        public GroupbyClass Params { get; set; }

        [JsonProperty("resolve", NullValueHandling = NullValueHandling.Ignore)]
        public FieldDefWithoutScale Resolve { get; set; }

        [JsonProperty("spacing", NullValueHandling = NullValueHandling.Ignore)]
        public CornerRadiusEnd Spacing { get; set; }

        [JsonProperty("spec", NullValueHandling = NullValueHandling.Ignore)]
        public SpecClass Spec { get; set; }

        [JsonProperty("title", NullValueHandling = NullValueHandling.Ignore)]
        public NormalizedSpec Title { get; set; }

        [JsonProperty("transform", NullValueHandling = NullValueHandling.Ignore)]
        public GroupbyClass Transform { get; set; }

        [JsonProperty("usermeta", NullValueHandling = NullValueHandling.Ignore)]
        public FieldDefWithoutScale Usermeta { get; set; }

        [JsonProperty("concat", NullValueHandling = NullValueHandling.Ignore)]
        public GroupbyClass Concat { get; set; }

        [JsonProperty("repeat", NullValueHandling = NullValueHandling.Ignore)]
        public Repeat Repeat { get; set; }
    }

    public partial class Schema
    {
        [JsonProperty("description", NullValueHandling = NullValueHandling.Ignore)]
        public string Description { get; set; }

        [JsonProperty("format", NullValueHandling = NullValueHandling.Ignore)]
        public string Format { get; set; }

        [JsonProperty("type", NullValueHandling = NullValueHandling.Ignore)]
        public TypeEnum? Type { get; set; }
    }

    public partial class TopLevelSpec
    {
        [JsonProperty("additionalProperties", NullValueHandling = NullValueHandling.Ignore)]
        public bool? AdditionalProperties { get; set; }

        [JsonProperty("properties", NullValueHandling = NullValueHandling.Ignore)]
        public TopLevelLayerSpecProperties Properties { get; set; }

        [JsonProperty("required", NullValueHandling = NullValueHandling.Ignore)]
        public List<string> TopLevelSpecRequired { get; set; }

        [JsonProperty("type", NullValueHandling = NullValueHandling.Ignore)]
        public TypeEnum? Type { get; set; }
    }

    public partial class TopLevelLayerSpecProperties
    {
        [JsonProperty("$schema", NullValueHandling = NullValueHandling.Ignore)]
        public Schema Schema { get; set; }

        [JsonProperty("autosize", NullValueHandling = NullValueHandling.Ignore)]
        public NormalizedSpec Autosize { get; set; }

        [JsonProperty("background", NullValueHandling = NullValueHandling.Ignore)]
        public NormalizedSpec Background { get; set; }

        [JsonProperty("config", NullValueHandling = NullValueHandling.Ignore)]
        public FieldDefWithoutScale Config { get; set; }

        [JsonProperty("data", NullValueHandling = NullValueHandling.Ignore)]
        public CornerRadiusEnd Data { get; set; }

        [JsonProperty("datasets", NullValueHandling = NullValueHandling.Ignore)]
        public FieldDefWithoutScale Datasets { get; set; }

        [JsonProperty("description", NullValueHandling = NullValueHandling.Ignore)]
        public Clip Description { get; set; }

        [JsonProperty("encoding", NullValueHandling = NullValueHandling.Ignore)]
        public FieldDefWithoutScale Encoding { get; set; }

        [JsonProperty("height", NullValueHandling = NullValueHandling.Ignore)]
        public Point Height { get; set; }

        [JsonProperty("layer", NullValueHandling = NullValueHandling.Ignore)]
        public Layer Layer { get; set; }

        [JsonProperty("name", NullValueHandling = NullValueHandling.Ignore)]
        public Clip Name { get; set; }

        [JsonProperty("padding", NullValueHandling = NullValueHandling.Ignore)]
        public NormalizedSpec Padding { get; set; }

        [JsonProperty("params", NullValueHandling = NullValueHandling.Ignore)]
        public GroupbyClass Params { get; set; }

        [JsonProperty("projection", NullValueHandling = NullValueHandling.Ignore)]
        public FieldDefWithoutScale Projection { get; set; }

        [JsonProperty("resolve", NullValueHandling = NullValueHandling.Ignore)]
        public FieldDefWithoutScale Resolve { get; set; }

        [JsonProperty("title", NullValueHandling = NullValueHandling.Ignore)]
        public NormalizedSpec Title { get; set; }

        [JsonProperty("transform", NullValueHandling = NullValueHandling.Ignore)]
        public GroupbyClass Transform { get; set; }

        [JsonProperty("usermeta", NullValueHandling = NullValueHandling.Ignore)]
        public FieldDefWithoutScale Usermeta { get; set; }

        [JsonProperty("view", NullValueHandling = NullValueHandling.Ignore)]
        public FieldDefWithoutScale View { get; set; }

        [JsonProperty("width", NullValueHandling = NullValueHandling.Ignore)]
        public Point Width { get; set; }

        [JsonProperty("align", NullValueHandling = NullValueHandling.Ignore)]
        public NormalizedSpec Align { get; set; }

        [JsonProperty("bounds", NullValueHandling = NullValueHandling.Ignore)]
        public Mark Bounds { get; set; }

        [JsonProperty("center", NullValueHandling = NullValueHandling.Ignore)]
        public CornerRadiusEnd Center { get; set; }

        [JsonProperty("mark", NullValueHandling = NullValueHandling.Ignore)]
        public FieldDefWithoutScale Mark { get; set; }

        [JsonProperty("selection", NullValueHandling = NullValueHandling.Ignore)]
        public Selection Selection { get; set; }

        [JsonProperty("spacing", NullValueHandling = NullValueHandling.Ignore)]
        public CornerRadiusEnd Spacing { get; set; }
    }

    public partial class TopLevelNormalizedConcatSpecGenericSpec
    {
        [JsonProperty("additionalProperties", NullValueHandling = NullValueHandling.Ignore)]
        public bool? AdditionalProperties { get; set; }

        [JsonProperty("properties", NullValueHandling = NullValueHandling.Ignore)]
        public TopLevelNormalizedHConcatSpecGenericSpecProperties Properties { get; set; }

        [JsonProperty("required", NullValueHandling = NullValueHandling.Ignore)]
        public List<string> TopLevelNormalizedConcatSpecGenericSpecRequired { get; set; }

        [JsonProperty("type", NullValueHandling = NullValueHandling.Ignore)]
        public TypeEnum? Type { get; set; }
    }

    public partial class TopLevelNormalizedHConcatSpecGenericSpecProperties
    {
        [JsonProperty("$schema", NullValueHandling = NullValueHandling.Ignore)]
        public Schema Schema { get; set; }

        [JsonProperty("autosize", NullValueHandling = NullValueHandling.Ignore)]
        public NormalizedSpec Autosize { get; set; }

        [JsonProperty("background", NullValueHandling = NullValueHandling.Ignore)]
        public NormalizedSpec Background { get; set; }

        [JsonProperty("bounds", NullValueHandling = NullValueHandling.Ignore)]
        public Mark Bounds { get; set; }

        [JsonProperty("center", NullValueHandling = NullValueHandling.Ignore)]
        public Clip Center { get; set; }

        [JsonProperty("config", NullValueHandling = NullValueHandling.Ignore)]
        public FieldDefWithoutScale Config { get; set; }

        [JsonProperty("data", NullValueHandling = NullValueHandling.Ignore)]
        public CornerRadiusEnd Data { get; set; }

        [JsonProperty("datasets", NullValueHandling = NullValueHandling.Ignore)]
        public FieldDefWithoutScale Datasets { get; set; }

        [JsonProperty("description", NullValueHandling = NullValueHandling.Ignore)]
        public Clip Description { get; set; }

        [JsonProperty("hconcat", NullValueHandling = NullValueHandling.Ignore)]
        public GroupbyClass Hconcat { get; set; }

        [JsonProperty("name", NullValueHandling = NullValueHandling.Ignore)]
        public Clip Name { get; set; }

        [JsonProperty("padding", NullValueHandling = NullValueHandling.Ignore)]
        public NormalizedSpec Padding { get; set; }

        [JsonProperty("params", NullValueHandling = NullValueHandling.Ignore)]
        public GroupbyClass Params { get; set; }

        [JsonProperty("resolve", NullValueHandling = NullValueHandling.Ignore)]
        public FieldDefWithoutScale Resolve { get; set; }

        [JsonProperty("spacing", NullValueHandling = NullValueHandling.Ignore)]
        public Clip Spacing { get; set; }

        [JsonProperty("title", NullValueHandling = NullValueHandling.Ignore)]
        public NormalizedSpec Title { get; set; }

        [JsonProperty("transform", NullValueHandling = NullValueHandling.Ignore)]
        public GroupbyClass Transform { get; set; }

        [JsonProperty("usermeta", NullValueHandling = NullValueHandling.Ignore)]
        public FieldDefWithoutScale Usermeta { get; set; }

        [JsonProperty("vconcat", NullValueHandling = NullValueHandling.Ignore)]
        public GroupbyClass Vconcat { get; set; }
    }

    public partial class TopLevelRepeatSpec
    {
        [JsonProperty("anyOf", NullValueHandling = NullValueHandling.Ignore)]
        public List<TopLevelFacetSpec> AnyOf { get; set; }
    }

    public partial class TopoDataFormat
    {
        [JsonProperty("additionalProperties", NullValueHandling = NullValueHandling.Ignore)]
        public bool? AdditionalProperties { get; set; }

        [JsonProperty("properties", NullValueHandling = NullValueHandling.Ignore)]
        public TopoDataFormatProperties Properties { get; set; }

        [JsonProperty("type", NullValueHandling = NullValueHandling.Ignore)]
        public TypeEnum? Type { get; set; }
    }

    public partial class TopoDataFormatProperties
    {
        [JsonProperty("feature", NullValueHandling = NullValueHandling.Ignore)]
        public Clip Feature { get; set; }

        [JsonProperty("mesh", NullValueHandling = NullValueHandling.Ignore)]
        public Clip Mesh { get; set; }

        [JsonProperty("parse", NullValueHandling = NullValueHandling.Ignore)]
        public CornerRadiusEnd Parse { get; set; }

        [JsonProperty("type", NullValueHandling = NullValueHandling.Ignore)]
        public BindElement Type { get; set; }
    }

    public partial class UrlData
    {
        [JsonProperty("additionalProperties", NullValueHandling = NullValueHandling.Ignore)]
        public bool? AdditionalProperties { get; set; }

        [JsonProperty("properties", NullValueHandling = NullValueHandling.Ignore)]
        public UrlDataProperties Properties { get; set; }

        [JsonProperty("required", NullValueHandling = NullValueHandling.Ignore)]
        public List<string> UrlDataRequired { get; set; }

        [JsonProperty("type", NullValueHandling = NullValueHandling.Ignore)]
        public TypeEnum? Type { get; set; }
    }

    public partial class UrlDataProperties
    {
        [JsonProperty("format", NullValueHandling = NullValueHandling.Ignore)]
        public FieldDefWithoutScale Format { get; set; }

        [JsonProperty("name", NullValueHandling = NullValueHandling.Ignore)]
        public Clip Name { get; set; }

        [JsonProperty("url", NullValueHandling = NullValueHandling.Ignore)]
        public Clip Url { get; set; }
    }

    public partial class ValueDefNumber
    {
        [JsonProperty("additionalProperties", NullValueHandling = NullValueHandling.Ignore)]
        public bool? AdditionalProperties { get; set; }

        [JsonProperty("description", NullValueHandling = NullValueHandling.Ignore)]
        public string Description { get; set; }

        [JsonProperty("properties", NullValueHandling = NullValueHandling.Ignore)]
        public ValueDefNumberProperties Properties { get; set; }

        [JsonProperty("required", NullValueHandling = NullValueHandling.Ignore)]
        public List<ExprRefRequired> ValueDefNumberRequired { get; set; }

        [JsonProperty("type", NullValueHandling = NullValueHandling.Ignore)]
        public TypeEnum? Type { get; set; }
    }

    public partial class ValueDefNumberProperties
    {
        [JsonProperty("value", NullValueHandling = NullValueHandling.Ignore)]
        public Clip Value { get; set; }
    }

    public partial class ValueDefNumberExprRef
    {
        [JsonProperty("additionalProperties", NullValueHandling = NullValueHandling.Ignore)]
        public bool? AdditionalProperties { get; set; }

        [JsonProperty("description", NullValueHandling = NullValueHandling.Ignore)]
        public string Description { get; set; }

        [JsonProperty("properties", NullValueHandling = NullValueHandling.Ignore)]
        public ValueDefNumberExprRefProperties Properties { get; set; }

        [JsonProperty("required", NullValueHandling = NullValueHandling.Ignore)]
        public List<ExprRefRequired> ValueDefNumberExprRefRequired { get; set; }

        [JsonProperty("type", NullValueHandling = NullValueHandling.Ignore)]
        public TypeEnum? Type { get; set; }
    }

    public partial class ValueDefNumberExprRefProperties
    {
        [JsonProperty("value", NullValueHandling = NullValueHandling.Ignore)]
        public CornerRadiusEnd Value { get; set; }
    }

    public partial class ValueDefNumberWidthHeightExprRef
    {
        [JsonProperty("additionalProperties", NullValueHandling = NullValueHandling.Ignore)]
        public bool? AdditionalProperties { get; set; }

        [JsonProperty("description", NullValueHandling = NullValueHandling.Ignore)]
        public string Description { get; set; }

        [JsonProperty("properties", NullValueHandling = NullValueHandling.Ignore)]
        public ValueDefNumberWidthHeightExprRefProperties Properties { get; set; }

        [JsonProperty("required", NullValueHandling = NullValueHandling.Ignore)]
        public List<ExprRefRequired> ValueDefNumberWidthHeightExprRefRequired { get; set; }

        [JsonProperty("type", NullValueHandling = NullValueHandling.Ignore)]
        public TypeEnum? Type { get; set; }
    }

    public partial class ValueDefNumberWidthHeightExprRefProperties
    {
        [JsonProperty("value", NullValueHandling = NullValueHandling.Ignore)]
        public Point Value { get; set; }
    }

    public partial class ValueDefWithConditionStringFieldDefText
    {
        [JsonProperty("additionalProperties", NullValueHandling = NullValueHandling.Ignore)]
        public bool? AdditionalProperties { get; set; }

        [JsonProperty("minProperties", NullValueHandling = NullValueHandling.Ignore)]
        public long? MinProperties { get; set; }

        [JsonProperty("properties", NullValueHandling = NullValueHandling.Ignore)]
        public ValueDefWithConditionStringFieldDefTextProperties Properties { get; set; }

        [JsonProperty("type", NullValueHandling = NullValueHandling.Ignore)]
        public TypeEnum? Type { get; set; }
    }

    public partial class ValueDefWithConditionStringFieldDefTextProperties
    {
        [JsonProperty("condition", NullValueHandling = NullValueHandling.Ignore)]
        public AsElement Condition { get; set; }

        [JsonProperty("value", NullValueHandling = NullValueHandling.Ignore)]
        public NormalizedSpec Value { get; set; }
    }

    public partial class ViewBackground
    {
        [JsonProperty("additionalProperties", NullValueHandling = NullValueHandling.Ignore)]
        public bool? AdditionalProperties { get; set; }

        [JsonProperty("properties", NullValueHandling = NullValueHandling.Ignore)]
        public ViewBackgroundProperties Properties { get; set; }

        [JsonProperty("type", NullValueHandling = NullValueHandling.Ignore)]
        public TypeEnum? Type { get; set; }
    }

    public partial class ViewBackgroundProperties
    {
        [JsonProperty("cornerRadius", NullValueHandling = NullValueHandling.Ignore)]
        public Aria CornerRadius { get; set; }

        [JsonProperty("cursor", NullValueHandling = NullValueHandling.Ignore)]
        public FieldDefWithoutScale Cursor { get; set; }

        [JsonProperty("fill", NullValueHandling = NullValueHandling.Ignore)]
        public CornerRadiusEnd Fill { get; set; }

        [JsonProperty("fillOpacity", NullValueHandling = NullValueHandling.Ignore)]
        public GridOpacityClass FillOpacity { get; set; }

        [JsonProperty("opacity", NullValueHandling = NullValueHandling.Ignore)]
        public Day Opacity { get; set; }

        [JsonProperty("stroke", NullValueHandling = NullValueHandling.Ignore)]
        public CornerRadiusEnd Stroke { get; set; }

        [JsonProperty("strokeCap", NullValueHandling = NullValueHandling.Ignore)]
        public BlendClass StrokeCap { get; set; }

        [JsonProperty("strokeDash", NullValueHandling = NullValueHandling.Ignore)]
        public Dash StrokeDash { get; set; }

        [JsonProperty("strokeDashOffset", NullValueHandling = NullValueHandling.Ignore)]
        public Aria StrokeDashOffset { get; set; }

        [JsonProperty("strokeJoin", NullValueHandling = NullValueHandling.Ignore)]
        public BlendClass StrokeJoin { get; set; }

        [JsonProperty("strokeMiterLimit", NullValueHandling = NullValueHandling.Ignore)]
        public Aria StrokeMiterLimit { get; set; }

        [JsonProperty("strokeOpacity", NullValueHandling = NullValueHandling.Ignore)]
        public GridOpacityClass StrokeOpacity { get; set; }

        [JsonProperty("strokeWidth", NullValueHandling = NullValueHandling.Ignore)]
        public FontSize StrokeWidth { get; set; }

        [JsonProperty("style", NullValueHandling = NullValueHandling.Ignore)]
        public Style Style { get; set; }
    }

    public partial class ViewConfig
    {
        [JsonProperty("additionalProperties", NullValueHandling = NullValueHandling.Ignore)]
        public bool? AdditionalProperties { get; set; }

        [JsonProperty("properties", NullValueHandling = NullValueHandling.Ignore)]
        public ViewConfigProperties Properties { get; set; }

        [JsonProperty("type", NullValueHandling = NullValueHandling.Ignore)]
        public TypeEnum? Type { get; set; }
    }

    public partial class ViewConfigProperties
    {
        [JsonProperty("clip", NullValueHandling = NullValueHandling.Ignore)]
        public Clip Clip { get; set; }

        [JsonProperty("continuousHeight", NullValueHandling = NullValueHandling.Ignore)]
        public Clip ContinuousHeight { get; set; }

        [JsonProperty("continuousWidth", NullValueHandling = NullValueHandling.Ignore)]
        public Clip ContinuousWidth { get; set; }

        [JsonProperty("cornerRadius", NullValueHandling = NullValueHandling.Ignore)]
        public Aria CornerRadius { get; set; }

        [JsonProperty("cursor", NullValueHandling = NullValueHandling.Ignore)]
        public FieldDefWithoutScale Cursor { get; set; }

        [JsonProperty("discreteHeight", NullValueHandling = NullValueHandling.Ignore)]
        public Discrete DiscreteHeight { get; set; }

        [JsonProperty("discreteWidth", NullValueHandling = NullValueHandling.Ignore)]
        public Discrete DiscreteWidth { get; set; }

        [JsonProperty("fill", NullValueHandling = NullValueHandling.Ignore)]
        public CornerRadiusEnd Fill { get; set; }

        [JsonProperty("fillOpacity", NullValueHandling = NullValueHandling.Ignore)]
        public GridOpacityClass FillOpacity { get; set; }

        [JsonProperty("height", NullValueHandling = NullValueHandling.Ignore)]
        public Clip Height { get; set; }

        [JsonProperty("opacity", NullValueHandling = NullValueHandling.Ignore)]
        public Interpolate Opacity { get; set; }

        [JsonProperty("step", NullValueHandling = NullValueHandling.Ignore)]
        public Clip Step { get; set; }

        [JsonProperty("stroke", NullValueHandling = NullValueHandling.Ignore)]
        public CornerRadiusEnd Stroke { get; set; }

        [JsonProperty("strokeCap", NullValueHandling = NullValueHandling.Ignore)]
        public BlendClass StrokeCap { get; set; }

        [JsonProperty("strokeDash", NullValueHandling = NullValueHandling.Ignore)]
        public Dash StrokeDash { get; set; }

        [JsonProperty("strokeDashOffset", NullValueHandling = NullValueHandling.Ignore)]
        public Aria StrokeDashOffset { get; set; }

        [JsonProperty("strokeJoin", NullValueHandling = NullValueHandling.Ignore)]
        public BlendClass StrokeJoin { get; set; }

        [JsonProperty("strokeMiterLimit", NullValueHandling = NullValueHandling.Ignore)]
        public Aria StrokeMiterLimit { get; set; }

        [JsonProperty("strokeOpacity", NullValueHandling = NullValueHandling.Ignore)]
        public GridOpacityClass StrokeOpacity { get; set; }

        [JsonProperty("strokeWidth", NullValueHandling = NullValueHandling.Ignore)]
        public FontSize StrokeWidth { get; set; }

        [JsonProperty("width", NullValueHandling = NullValueHandling.Ignore)]
        public Clip Width { get; set; }
    }

    public partial class Discrete
    {
        [JsonProperty("anyOf", NullValueHandling = NullValueHandling.Ignore)]
        public List<DiscreteHeightAnyOf> AnyOf { get; set; }

        [JsonProperty("description", NullValueHandling = NullValueHandling.Ignore)]
        public string Description { get; set; }
    }

    public partial class DiscreteHeightAnyOf
    {
        [JsonProperty("type", NullValueHandling = NullValueHandling.Ignore)]
        public TypeEnum? Type { get; set; }

        [JsonProperty("additionalProperties", NullValueHandling = NullValueHandling.Ignore)]
        public bool? AdditionalProperties { get; set; }

        [JsonProperty("properties", NullValueHandling = NullValueHandling.Ignore)]
        public FriskyProperties Properties { get; set; }

        [JsonProperty("required", NullValueHandling = NullValueHandling.Ignore)]
        public List<string> AnyOfRequired { get; set; }
    }

    public partial class FriskyProperties
    {
        [JsonProperty("step", NullValueHandling = NullValueHandling.Ignore)]
        public Element Step { get; set; }
    }

    public partial class WindowFieldDef
    {
        [JsonProperty("additionalProperties", NullValueHandling = NullValueHandling.Ignore)]
        public bool? AdditionalProperties { get; set; }

        [JsonProperty("properties", NullValueHandling = NullValueHandling.Ignore)]
        public WindowFieldDefProperties Properties { get; set; }

        [JsonProperty("required", NullValueHandling = NullValueHandling.Ignore)]
        public List<string> WindowFieldDefRequired { get; set; }

        [JsonProperty("type", NullValueHandling = NullValueHandling.Ignore)]
        public TypeEnum? Type { get; set; }
    }

    public partial class WindowFieldDefProperties
    {
        [JsonProperty("as", NullValueHandling = NullValueHandling.Ignore)]
        public FieldDefWithoutScale As { get; set; }

        [JsonProperty("field", NullValueHandling = NullValueHandling.Ignore)]
        public FieldDefWithoutScale Field { get; set; }

        [JsonProperty("op", NullValueHandling = NullValueHandling.Ignore)]
        public NormalizedSpec Op { get; set; }

        [JsonProperty("param", NullValueHandling = NullValueHandling.Ignore)]
        public Clip Param { get; set; }
    }

    public partial class WindowTransform
    {
        [JsonProperty("additionalProperties", NullValueHandling = NullValueHandling.Ignore)]
        public bool? AdditionalProperties { get; set; }

        [JsonProperty("properties", NullValueHandling = NullValueHandling.Ignore)]
        public WindowTransformProperties Properties { get; set; }

        [JsonProperty("required", NullValueHandling = NullValueHandling.Ignore)]
        public List<string> WindowTransformRequired { get; set; }

        [JsonProperty("type", NullValueHandling = NullValueHandling.Ignore)]
        public TypeEnum? Type { get; set; }
    }

    public partial class WindowTransformProperties
    {
        [JsonProperty("frame", NullValueHandling = NullValueHandling.Ignore)]
        public FluffyFrame Frame { get; set; }

        [JsonProperty("groupby", NullValueHandling = NullValueHandling.Ignore)]
        public GroupbyClass Groupby { get; set; }

        [JsonProperty("ignorePeers", NullValueHandling = NullValueHandling.Ignore)]
        public Clip IgnorePeers { get; set; }

        [JsonProperty("sort", NullValueHandling = NullValueHandling.Ignore)]
        public GroupbyClass Sort { get; set; }

        [JsonProperty("window", NullValueHandling = NullValueHandling.Ignore)]
        public GroupbyClass Window { get; set; }
    }

    public partial class FluffyFrame
    {
        [JsonProperty("description", NullValueHandling = NullValueHandling.Ignore)]
        public string Description { get; set; }

        [JsonProperty("items", NullValueHandling = NullValueHandling.Ignore)]
        public PrimitiveValue Items { get; set; }

        [JsonProperty("type", NullValueHandling = NullValueHandling.Ignore)]
        public TypeEnum? Type { get; set; }
    }

    public enum TypeEnum { Array, Boolean, Null, Number, Object, String };

    public enum DayRef { DefinitionsColorScheme, DefinitionsConditionalAxisNumber, DefinitionsConditionalAxisNumberArray, DefinitionsConditionalAxisString, DefinitionsExprOrSignalRef, DefinitionsExprRef };

    public enum EnumElement { Filter };

    public enum ConstElement { Alphabetic, Binned, Container, Height, Legend, LineBottom, LineTop, Transparent, Unaggregated, Width };

    public enum PurpleRef { DefinitionsBaseline, DefinitionsBinParams, DefinitionsExprOrSignalRef, DefinitionsExprRef, DefinitionsLegendStreamBinding, DefinitionsOverlayMarkDef, DefinitionsStep };

    public enum FluffyRef { DefinitionsConditionalAxisColor, DefinitionsExprOrSignalRef, DefinitionsExprRef };

    public enum MarkRef { DefinitionsBinParams, DefinitionsConditionalAxisNumber, DefinitionsConditionalAxisNumberArray, DefinitionsExprRef, DefinitionsRepeatMapping, DefinitionsStep, DefinitionsType };

    public enum MonthRef { DefinitionsExprOrSignalRef, DefinitionsExprRef, DefinitionsScaleBinParams };

    public enum ExprRefRequired { Condition, Expr, Value };

    public enum ConditionalPredicateValueDefGradientStringNullExprRefRequired { Expr, Test, Value };

    public partial struct Enum
    {
        public long? Integer;
        public string String;

        public static implicit operator Enum(long Integer) => new Enum { Integer = Integer };
        public static implicit operator Enum(string String) => new Enum { String = String };
    }

    public partial class VegaLiteSpec
    {
        public static VegaLiteSpec FromJson(string json) => JsonConvert.DeserializeObject<VegaLiteSpec>(json, Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this VegaLiteSpec self) => JsonConvert.SerializeObject(self, Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                TypeEnumConverter.Singleton,
                DayRefConverter.Singleton,
                EnumElementConverter.Singleton,
                PurpleRefConverter.Singleton,
                ConstElementConverter.Singleton,
                FluffyRefConverter.Singleton,
                MarkRefConverter.Singleton,
                MonthRefConverter.Singleton,
                ExprRefRequiredConverter.Singleton,
                ConditionalPredicateValueDefGradientStringNullExprRefRequiredConverter.Singleton,
                EnumConverter.Singleton,
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class TypeEnumConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(TypeEnum) || t == typeof(TypeEnum?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "array":
                    return TypeEnum.Array;
                case "boolean":
                    return TypeEnum.Boolean;
                case "null":
                    return TypeEnum.Null;
                case "number":
                    return TypeEnum.Number;
                case "object":
                    return TypeEnum.Object;
                case "string":
                    return TypeEnum.String;
            }
            throw new Exception("Cannot unmarshal type TypeEnum");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (TypeEnum)untypedValue;
            switch (value)
            {
                case TypeEnum.Array:
                    serializer.Serialize(writer, "array");
                    return;
                case TypeEnum.Boolean:
                    serializer.Serialize(writer, "boolean");
                    return;
                case TypeEnum.Null:
                    serializer.Serialize(writer, "null");
                    return;
                case TypeEnum.Number:
                    serializer.Serialize(writer, "number");
                    return;
                case TypeEnum.Object:
                    serializer.Serialize(writer, "object");
                    return;
                case TypeEnum.String:
                    serializer.Serialize(writer, "string");
                    return;
            }
            throw new Exception("Cannot marshal type TypeEnum");
        }

        public static readonly TypeEnumConverter Singleton = new TypeEnumConverter();
    }

    internal class DayRefConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(DayRef) || t == typeof(DayRef?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "#/definitions/ColorScheme":
                    return DayRef.DefinitionsColorScheme;
                case "#/definitions/ConditionalAxisNumber":
                    return DayRef.DefinitionsConditionalAxisNumber;
                case "#/definitions/ConditionalAxisNumberArray":
                    return DayRef.DefinitionsConditionalAxisNumberArray;
                case "#/definitions/ConditionalAxisString":
                    return DayRef.DefinitionsConditionalAxisString;
                case "#/definitions/ExprOrSignalRef":
                    return DayRef.DefinitionsExprOrSignalRef;
                case "#/definitions/ExprRef":
                    return DayRef.DefinitionsExprRef;
            }
            throw new Exception("Cannot unmarshal type DayRef");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (DayRef)untypedValue;
            switch (value)
            {
                case DayRef.DefinitionsColorScheme:
                    serializer.Serialize(writer, "#/definitions/ColorScheme");
                    return;
                case DayRef.DefinitionsConditionalAxisNumber:
                    serializer.Serialize(writer, "#/definitions/ConditionalAxisNumber");
                    return;
                case DayRef.DefinitionsConditionalAxisNumberArray:
                    serializer.Serialize(writer, "#/definitions/ConditionalAxisNumberArray");
                    return;
                case DayRef.DefinitionsConditionalAxisString:
                    serializer.Serialize(writer, "#/definitions/ConditionalAxisString");
                    return;
                case DayRef.DefinitionsExprOrSignalRef:
                    serializer.Serialize(writer, "#/definitions/ExprOrSignalRef");
                    return;
                case DayRef.DefinitionsExprRef:
                    serializer.Serialize(writer, "#/definitions/ExprRef");
                    return;
            }
            throw new Exception("Cannot marshal type DayRef");
        }

        public static readonly DayRefConverter Singleton = new DayRefConverter();
    }

    internal class EnumElementConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(EnumElement) || t == typeof(EnumElement?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            if (value == "filter")
            {
                return EnumElement.Filter;
            }
            throw new Exception("Cannot unmarshal type EnumElement");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (EnumElement)untypedValue;
            if (value == EnumElement.Filter)
            {
                serializer.Serialize(writer, "filter");
                return;
            }
            throw new Exception("Cannot marshal type EnumElement");
        }

        public static readonly EnumElementConverter Singleton = new EnumElementConverter();
    }

    internal class PurpleRefConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(PurpleRef) || t == typeof(PurpleRef?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "#/definitions/Baseline":
                    return PurpleRef.DefinitionsBaseline;
                case "#/definitions/BinParams":
                    return PurpleRef.DefinitionsBinParams;
                case "#/definitions/ExprOrSignalRef":
                    return PurpleRef.DefinitionsExprOrSignalRef;
                case "#/definitions/ExprRef":
                    return PurpleRef.DefinitionsExprRef;
                case "#/definitions/LegendStreamBinding":
                    return PurpleRef.DefinitionsLegendStreamBinding;
                case "#/definitions/OverlayMarkDef":
                    return PurpleRef.DefinitionsOverlayMarkDef;
                case "#/definitions/Step":
                    return PurpleRef.DefinitionsStep;
            }
            throw new Exception("Cannot unmarshal type PurpleRef");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (PurpleRef)untypedValue;
            switch (value)
            {
                case PurpleRef.DefinitionsBaseline:
                    serializer.Serialize(writer, "#/definitions/Baseline");
                    return;
                case PurpleRef.DefinitionsBinParams:
                    serializer.Serialize(writer, "#/definitions/BinParams");
                    return;
                case PurpleRef.DefinitionsExprOrSignalRef:
                    serializer.Serialize(writer, "#/definitions/ExprOrSignalRef");
                    return;
                case PurpleRef.DefinitionsExprRef:
                    serializer.Serialize(writer, "#/definitions/ExprRef");
                    return;
                case PurpleRef.DefinitionsLegendStreamBinding:
                    serializer.Serialize(writer, "#/definitions/LegendStreamBinding");
                    return;
                case PurpleRef.DefinitionsOverlayMarkDef:
                    serializer.Serialize(writer, "#/definitions/OverlayMarkDef");
                    return;
                case PurpleRef.DefinitionsStep:
                    serializer.Serialize(writer, "#/definitions/Step");
                    return;
            }
            throw new Exception("Cannot marshal type PurpleRef");
        }

        public static readonly PurpleRefConverter Singleton = new PurpleRefConverter();
    }

    internal class ConstElementConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(ConstElement) || t == typeof(ConstElement?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "alphabetic":
                    return ConstElement.Alphabetic;
                case "binned":
                    return ConstElement.Binned;
                case "container":
                    return ConstElement.Container;
                case "height":
                    return ConstElement.Height;
                case "legend":
                    return ConstElement.Legend;
                case "line-bottom":
                    return ConstElement.LineBottom;
                case "line-top":
                    return ConstElement.LineTop;
                case "transparent":
                    return ConstElement.Transparent;
                case "unaggregated":
                    return ConstElement.Unaggregated;
                case "width":
                    return ConstElement.Width;
            }
            throw new Exception("Cannot unmarshal type ConstElement");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (ConstElement)untypedValue;
            switch (value)
            {
                case ConstElement.Alphabetic:
                    serializer.Serialize(writer, "alphabetic");
                    return;
                case ConstElement.Binned:
                    serializer.Serialize(writer, "binned");
                    return;
                case ConstElement.Container:
                    serializer.Serialize(writer, "container");
                    return;
                case ConstElement.Height:
                    serializer.Serialize(writer, "height");
                    return;
                case ConstElement.Legend:
                    serializer.Serialize(writer, "legend");
                    return;
                case ConstElement.LineBottom:
                    serializer.Serialize(writer, "line-bottom");
                    return;
                case ConstElement.LineTop:
                    serializer.Serialize(writer, "line-top");
                    return;
                case ConstElement.Transparent:
                    serializer.Serialize(writer, "transparent");
                    return;
                case ConstElement.Unaggregated:
                    serializer.Serialize(writer, "unaggregated");
                    return;
                case ConstElement.Width:
                    serializer.Serialize(writer, "width");
                    return;
            }
            throw new Exception("Cannot marshal type ConstElement");
        }

        public static readonly ConstElementConverter Singleton = new ConstElementConverter();
    }

    internal class FluffyRefConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(FluffyRef) || t == typeof(FluffyRef?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "#/definitions/ConditionalAxisColor":
                    return FluffyRef.DefinitionsConditionalAxisColor;
                case "#/definitions/ExprOrSignalRef":
                    return FluffyRef.DefinitionsExprOrSignalRef;
                case "#/definitions/ExprRef":
                    return FluffyRef.DefinitionsExprRef;
            }
            throw new Exception("Cannot unmarshal type FluffyRef");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (FluffyRef)untypedValue;
            switch (value)
            {
                case FluffyRef.DefinitionsConditionalAxisColor:
                    serializer.Serialize(writer, "#/definitions/ConditionalAxisColor");
                    return;
                case FluffyRef.DefinitionsExprOrSignalRef:
                    serializer.Serialize(writer, "#/definitions/ExprOrSignalRef");
                    return;
                case FluffyRef.DefinitionsExprRef:
                    serializer.Serialize(writer, "#/definitions/ExprRef");
                    return;
            }
            throw new Exception("Cannot marshal type FluffyRef");
        }

        public static readonly FluffyRefConverter Singleton = new FluffyRefConverter();
    }

    internal class MarkRefConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(MarkRef) || t == typeof(MarkRef?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "#/definitions/BinParams":
                    return MarkRef.DefinitionsBinParams;
                case "#/definitions/ConditionalAxisNumber":
                    return MarkRef.DefinitionsConditionalAxisNumber;
                case "#/definitions/ConditionalAxisNumberArray":
                    return MarkRef.DefinitionsConditionalAxisNumberArray;
                case "#/definitions/ExprRef":
                    return MarkRef.DefinitionsExprRef;
                case "#/definitions/RepeatMapping":
                    return MarkRef.DefinitionsRepeatMapping;
                case "#/definitions/Step":
                    return MarkRef.DefinitionsStep;
                case "#/definitions/Type":
                    return MarkRef.DefinitionsType;
            }
            throw new Exception("Cannot unmarshal type MarkRef");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (MarkRef)untypedValue;
            switch (value)
            {
                case MarkRef.DefinitionsBinParams:
                    serializer.Serialize(writer, "#/definitions/BinParams");
                    return;
                case MarkRef.DefinitionsConditionalAxisNumber:
                    serializer.Serialize(writer, "#/definitions/ConditionalAxisNumber");
                    return;
                case MarkRef.DefinitionsConditionalAxisNumberArray:
                    serializer.Serialize(writer, "#/definitions/ConditionalAxisNumberArray");
                    return;
                case MarkRef.DefinitionsExprRef:
                    serializer.Serialize(writer, "#/definitions/ExprRef");
                    return;
                case MarkRef.DefinitionsRepeatMapping:
                    serializer.Serialize(writer, "#/definitions/RepeatMapping");
                    return;
                case MarkRef.DefinitionsStep:
                    serializer.Serialize(writer, "#/definitions/Step");
                    return;
                case MarkRef.DefinitionsType:
                    serializer.Serialize(writer, "#/definitions/Type");
                    return;
            }
            throw new Exception("Cannot marshal type MarkRef");
        }

        public static readonly MarkRefConverter Singleton = new MarkRefConverter();
    }

    internal class MonthRefConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(MonthRef) || t == typeof(MonthRef?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "#/definitions/ExprOrSignalRef":
                    return MonthRef.DefinitionsExprOrSignalRef;
                case "#/definitions/ExprRef":
                    return MonthRef.DefinitionsExprRef;
                case "#/definitions/ScaleBinParams":
                    return MonthRef.DefinitionsScaleBinParams;
            }
            throw new Exception("Cannot unmarshal type MonthRef");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (MonthRef)untypedValue;
            switch (value)
            {
                case MonthRef.DefinitionsExprOrSignalRef:
                    serializer.Serialize(writer, "#/definitions/ExprOrSignalRef");
                    return;
                case MonthRef.DefinitionsExprRef:
                    serializer.Serialize(writer, "#/definitions/ExprRef");
                    return;
                case MonthRef.DefinitionsScaleBinParams:
                    serializer.Serialize(writer, "#/definitions/ScaleBinParams");
                    return;
            }
            throw new Exception("Cannot marshal type MonthRef");
        }

        public static readonly MonthRefConverter Singleton = new MonthRefConverter();
    }

    internal class ExprRefRequiredConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(ExprRefRequired) || t == typeof(ExprRefRequired?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "condition":
                    return ExprRefRequired.Condition;
                case "expr":
                    return ExprRefRequired.Expr;
                case "value":
                    return ExprRefRequired.Value;
            }
            throw new Exception("Cannot unmarshal type ExprRefRequired");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (ExprRefRequired)untypedValue;
            switch (value)
            {
                case ExprRefRequired.Condition:
                    serializer.Serialize(writer, "condition");
                    return;
                case ExprRefRequired.Expr:
                    serializer.Serialize(writer, "expr");
                    return;
                case ExprRefRequired.Value:
                    serializer.Serialize(writer, "value");
                    return;
            }
            throw new Exception("Cannot marshal type ExprRefRequired");
        }

        public static readonly ExprRefRequiredConverter Singleton = new ExprRefRequiredConverter();
    }

    internal class ConditionalPredicateValueDefGradientStringNullExprRefRequiredConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(ConditionalPredicateValueDefGradientStringNullExprRefRequired) || t == typeof(ConditionalPredicateValueDefGradientStringNullExprRefRequired?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "expr":
                    return ConditionalPredicateValueDefGradientStringNullExprRefRequired.Expr;
                case "test":
                    return ConditionalPredicateValueDefGradientStringNullExprRefRequired.Test;
                case "value":
                    return ConditionalPredicateValueDefGradientStringNullExprRefRequired.Value;
            }
            throw new Exception("Cannot unmarshal type ConditionalPredicateValueDefGradientStringNullExprRefRequired");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (ConditionalPredicateValueDefGradientStringNullExprRefRequired)untypedValue;
            switch (value)
            {
                case ConditionalPredicateValueDefGradientStringNullExprRefRequired.Expr:
                    serializer.Serialize(writer, "expr");
                    return;
                case ConditionalPredicateValueDefGradientStringNullExprRefRequired.Test:
                    serializer.Serialize(writer, "test");
                    return;
                case ConditionalPredicateValueDefGradientStringNullExprRefRequired.Value:
                    serializer.Serialize(writer, "value");
                    return;
            }
            throw new Exception("Cannot marshal type ConditionalPredicateValueDefGradientStringNullExprRefRequired");
        }

        public static readonly ConditionalPredicateValueDefGradientStringNullExprRefRequiredConverter Singleton = new ConditionalPredicateValueDefGradientStringNullExprRefRequiredConverter();
    }

    internal class EnumConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Enum) || t == typeof(Enum?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            switch (reader.TokenType)
            {
                case JsonToken.Integer:
                    var integerValue = serializer.Deserialize<long>(reader);
                    return new Enum { Integer = integerValue };
                case JsonToken.String:
                case JsonToken.Date:
                    var stringValue = serializer.Deserialize<string>(reader);
                    return new Enum { String = stringValue };
            }
            throw new Exception("Cannot unmarshal type Enum");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            var value = (Enum)untypedValue;
            if (value.Integer != null)
            {
                serializer.Serialize(writer, value.Integer.Value);
                return;
            }
            if (value.String != null)
            {
                serializer.Serialize(writer, value.String);
                return;
            }
            throw new Exception("Cannot marshal type Enum");
        }

        public static readonly EnumConverter Singleton = new EnumConverter();
    }
}
