/**
 * Zybach
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { SensorPulseDto } from '../model/sensor-pulse-dto';
import { StructuredResultsDto } from '../model/structured-results-dto';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';
import { catchError } from 'rxjs/operators';
import { ApiService } from '../../services';


@Injectable({
  providedIn: 'root'
})
export class ZybachAPIService {

    protected basePath = 'http://localhost';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration
    , private apiService: ApiService) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * 
     * 
     * @param sensorPulseDto 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiSensorsPulsePost(sensorPulseDto?: SensorPulseDto, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public apiSensorsPulsePost(sensorPulseDto?: SensorPulseDto, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public apiSensorsPulsePost(sensorPulseDto?: SensorPulseDto, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public apiSensorsPulsePost(sensorPulseDto?: SensorPulseDto, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // authentication (ApiKey) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["x-api-key"]) {
            headers = headers.set('x-api-key', this.configuration.apiKeys["x-api-key"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json',
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<any>(`${this.basePath}/api/sensors/pulse`,
            sensorPulseDto,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        ).pipe(catchError((error: any) => { return this.apiService.handleError(error)}));
    }

    /**
     * Migrates Influx records associated with the specified Well Pressure sensor from the first specified well to the second.
     * Sample requests:        GET /api/sensors/PW011111/migrateWaterLevelReadings/G-022222/G-033333?bucket&#x3D;Training        GET /api/sensors/PW011111/migrateWaterLevelReadings/G-022222/G-033333?bucket&#x3D;Training&amp;startDate&#x3D;2020-12-31&amp;endDate&#x3D;2023-06-01
     * @param sensorName The device number for the sensor readings to be migrated.
     * @param fromWellRegistrationID The registration ID for the well which the specified sensor readings should be migrated from.
     * @param toWellRegistrationID The registration ID for the well which the specified sensor readings should be migrated to.
     * @param bucket The bucket to be used for the Influx operations.
     * @param startDate The start date for the readings to be migrated in yyyy-MM-dd format (eg. 2022-06-23). If no date is provided, 2018-01-01 will be used by default.
     * @param endDate The end date for the readings to be migrated in yyyy-MM-dd format (eg. 2022-07-01). If no date is provided, the current date will be used by default.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiSensorsSensorNameMigrateWaterLevelReadingsFromWellRegistrationIDToWellRegistrationIDPut(sensorName: string, fromWellRegistrationID: string, toWellRegistrationID: string, bucket: string, startDate?: string, endDate?: string, observe?: 'body', reportProgress?: boolean): Observable<number>;
    public apiSensorsSensorNameMigrateWaterLevelReadingsFromWellRegistrationIDToWellRegistrationIDPut(sensorName: string, fromWellRegistrationID: string, toWellRegistrationID: string, bucket: string, startDate?: string, endDate?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<number>>;
    public apiSensorsSensorNameMigrateWaterLevelReadingsFromWellRegistrationIDToWellRegistrationIDPut(sensorName: string, fromWellRegistrationID: string, toWellRegistrationID: string, bucket: string, startDate?: string, endDate?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<number>>;
    public apiSensorsSensorNameMigrateWaterLevelReadingsFromWellRegistrationIDToWellRegistrationIDPut(sensorName: string, fromWellRegistrationID: string, toWellRegistrationID: string, bucket: string, startDate?: string, endDate?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (sensorName === null || sensorName === undefined) {
            throw new Error('Required parameter sensorName was null or undefined when calling apiSensorsSensorNameMigrateWaterLevelReadingsFromWellRegistrationIDToWellRegistrationIDPut.');
        }

        if (fromWellRegistrationID === null || fromWellRegistrationID === undefined) {
            throw new Error('Required parameter fromWellRegistrationID was null or undefined when calling apiSensorsSensorNameMigrateWaterLevelReadingsFromWellRegistrationIDToWellRegistrationIDPut.');
        }

        if (toWellRegistrationID === null || toWellRegistrationID === undefined) {
            throw new Error('Required parameter toWellRegistrationID was null or undefined when calling apiSensorsSensorNameMigrateWaterLevelReadingsFromWellRegistrationIDToWellRegistrationIDPut.');
        }

        if (bucket === null || bucket === undefined) {
            throw new Error('Required parameter bucket was null or undefined when calling apiSensorsSensorNameMigrateWaterLevelReadingsFromWellRegistrationIDToWellRegistrationIDPut.');
        }



        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (bucket !== undefined && bucket !== null) {
            queryParameters = queryParameters.set('bucket', <any>bucket);
        }
        if (startDate !== undefined && startDate !== null) {
            queryParameters = queryParameters.set('startDate', <any>startDate);
        }
        if (endDate !== undefined && endDate !== null) {
            queryParameters = queryParameters.set('endDate', <any>endDate);
        }

        let headers = this.defaultHeaders;

        // authentication (ApiKey) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["x-api-key"]) {
            headers = headers.set('x-api-key', this.configuration.apiKeys["x-api-key"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json',
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.put<number>(`${this.basePath}/api/sensors/${encodeURIComponent(String(sensorName))}/migrateWaterLevelReadings/${encodeURIComponent(String(fromWellRegistrationID))}/${encodeURIComponent(String(toWellRegistrationID))}`,
            null,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        ).pipe(catchError((error: any) => { return this.apiService.handleError(error)}));
    }

    /**
     * Returns a time series representing pumped volume at a well or series of wells, summed daily for a given date range.  Each point in the output time series represents the total pumped volume for the given day.
     * Sample requests:                    Returns data for ALL wells from 8/1/2021 to 8/31/2021      GET /api/wells/pumpedVolume?startDate&#x3D;2021-08-01&amp;endDate&#x3D;2021-08-31                    Returns data for Well Registration IDs G-056157, G-097457, G-110920 from 8/1/2021 to 8/31/2021      GET /api/wells/pumpedVolume?startDate&#x3D;2021-08-01&amp;endDate&#x3D;2021-08-31&amp;wellRegistrationID&#x3D;G-056157&amp;wellRegistrationID&#x3D;G-097457&amp;wellRegistrationID&#x3D;G-110920
     * @param wellRegistrationID The Well Registration ID(s) for the requested Well(s). If left blank, will bring back data for every Well that has reported data within the time range.
     * @param startDate The start date for the report in yyyy-MM-dd format (eg. 2020-06-23)
     * @param endDate The end date for the report in yyyy-MM-dd format (eg. 2020-06-23)
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiWellsPumpedVolumeGet(wellRegistrationID?: Array<string>, startDate?: string, endDate?: string, observe?: 'body', reportProgress?: boolean): Observable<StructuredResultsDto>;
    public apiWellsPumpedVolumeGet(wellRegistrationID?: Array<string>, startDate?: string, endDate?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<StructuredResultsDto>>;
    public apiWellsPumpedVolumeGet(wellRegistrationID?: Array<string>, startDate?: string, endDate?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<StructuredResultsDto>>;
    public apiWellsPumpedVolumeGet(wellRegistrationID?: Array<string>, startDate?: string, endDate?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {




        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (wellRegistrationID !== undefined && wellRegistrationID !== null) {
            queryParameters = queryParameters.set('wellRegistrationID', <any>wellRegistrationID);
        }
        if (startDate !== undefined && startDate !== null) {
            queryParameters = queryParameters.set('startDate', <any>startDate);
        }
        if (endDate !== undefined && endDate !== null) {
            queryParameters = queryParameters.set('endDate', <any>endDate);
        }

        let headers = this.defaultHeaders;

        // authentication (ApiKey) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["x-api-key"]) {
            headers = headers.set('x-api-key', this.configuration.apiKeys["x-api-key"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<StructuredResultsDto>(`${this.basePath}/api/wells/pumpedVolume`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        ).pipe(catchError((error: any) => { return this.apiService.handleError(error)}));
    }

    /**
     * Returns a time series representing pumped volume at a well, summed daily for a given date range.  Each point in the output time series represents the total pumped volume for the given day.
     * Sample request:        GET /api/wells/G-110920/pumpedVolume?startDate&#x3D;2021-08-01&amp;endDate&#x3D;2021-08-31
     * @param wellRegistrationID The Well Registration ID for the requested Well.
     * @param startDate The start date for the report in yyyy-MM-dd format (eg. 2020-06-23)
     * @param endDate The end date for the report in yyyy-MM-dd format (eg. 2020-06-23)
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiWellsWellRegistrationIDPumpedVolumeGet(wellRegistrationID: string, startDate?: string, endDate?: string, observe?: 'body', reportProgress?: boolean): Observable<StructuredResultsDto>;
    public apiWellsWellRegistrationIDPumpedVolumeGet(wellRegistrationID: string, startDate?: string, endDate?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<StructuredResultsDto>>;
    public apiWellsWellRegistrationIDPumpedVolumeGet(wellRegistrationID: string, startDate?: string, endDate?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<StructuredResultsDto>>;
    public apiWellsWellRegistrationIDPumpedVolumeGet(wellRegistrationID: string, startDate?: string, endDate?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (wellRegistrationID === null || wellRegistrationID === undefined) {
            throw new Error('Required parameter wellRegistrationID was null or undefined when calling apiWellsWellRegistrationIDPumpedVolumeGet.');
        }



        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (startDate !== undefined && startDate !== null) {
            queryParameters = queryParameters.set('startDate', <any>startDate);
        }
        if (endDate !== undefined && endDate !== null) {
            queryParameters = queryParameters.set('endDate', <any>endDate);
        }

        let headers = this.defaultHeaders;

        // authentication (ApiKey) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["x-api-key"]) {
            headers = headers.set('x-api-key', this.configuration.apiKeys["x-api-key"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<StructuredResultsDto>(`${this.basePath}/api/wells/${encodeURIComponent(String(wellRegistrationID))}/pumpedVolume`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        ).pipe(catchError((error: any) => { return this.apiService.handleError(error)}));
    }

}
